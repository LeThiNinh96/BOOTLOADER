
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fbc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  08008160  08008160  00018160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008664  08008664  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008664  08008664  00018664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800866c  0800866c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800866c  0800866c  0001866c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008670  08008670  00018670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004998  200001e0  08008854  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b78  08008854  00024b78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e084  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002521  00000000  00000000  0002e294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  000307b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  00031478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003df2  00000000  00000000  00032030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf78  00000000  00000000  00035e22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ec21  00000000  00000000  00042d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d19bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004554  00000000  00000000  000d1a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008144 	.word	0x08008144

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08008144 	.word	0x08008144

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <Leds_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Leds_init()
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <Leds_init+0x5c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a13      	ldr	r2, [pc, #76]	; (8000fb8 <Leds_init+0x5c>)
 8000f6c:	f043 0308 	orr.w	r3, r3, #8
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <Leds_init+0x5c>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
	 uint32_t* GPIOD_MODER = (uint32_t*)(0x40020C00 + 0x00);
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <Leds_init+0x60>)
 8000f80:	60fb      	str	r3, [r7, #12]
	 uint32_t* GPIOD_OTYPER = (uint32_t*)(0x40020C00 + 0x04);
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <Leds_init+0x64>)
 8000f84:	60bb      	str	r3, [r7, #8]

	 /* set up PD 12 13 14 15 in OUTPUT */
	 *GPIOD_MODER &= ~(0xff << 24);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	601a      	str	r2, [r3, #0]
	 *GPIOD_MODER |= (0b01 << 24) | (0b01 << 26) | (0b01 << 28) | (0b01 << 30);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f043 42aa 	orr.w	r2, r3, #1426063360	; 0x55000000
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	601a      	str	r2, [r3, #0]

	 /* set up PD 12 13 14 15 in pussh-pull*/
	 *GPIOD_OTYPER &= ~(0xf << 12);
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	601a      	str	r2, [r3, #0]
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020c00 	.word	0x40020c00
 8000fc0:	40020c04 	.word	0x40020c04

08000fc4 <Leds_ctrl>:
 * 		led_num uint8_t be 1(PD12),2,3 or 4
 * 		led_state uint8_t be 0 ->0v: low, 1->3v: high
 * @retval none
 */
void Leds_ctrl(led_enum_t led_enum, uint8_t led_state)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	460a      	mov	r2, r1
 8000fce:	71fb      	strb	r3, [r7, #7]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	71bb      	strb	r3, [r7, #6]
	uint32_t* GPIOD_ODR = (uint32_t*)(0x40020C00 + 0x14);
 8000fd4:	4b10      	ldr	r3, [pc, #64]	; (8001018 <Leds_ctrl+0x54>)
 8000fd6:	60fb      	str	r3, [r7, #12]
	if(led_state != 0)
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00a      	beq.n	8000ff4 <Leds_ctrl+0x30>
	{
	*GPIOD_ODR |= (0b1 << (12 + led_enum)); /* set PD 12 to high --> LED on */
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	79fa      	ldrb	r2, [r7, #7]
 8000fe4:	320c      	adds	r2, #12
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fec:	431a      	orrs	r2, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	601a      	str	r2, [r3, #0]
	}
	else
	{
	*GPIOD_ODR &= ~(0b1 << (12 + led_enum)); /* set PD 12 to high --> LED off */
	}
}
 8000ff2:	e00a      	b.n	800100a <Leds_ctrl+0x46>
	*GPIOD_ODR &= ~(0b1 << (12 + led_enum)); /* set PD 12 to high --> LED off */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	79fa      	ldrb	r2, [r7, #7]
 8000ffa:	320c      	adds	r2, #12
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8001002:	43d2      	mvns	r2, r2
 8001004:	401a      	ands	r2, r3
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	601a      	str	r2, [r3, #0]
}
 800100a:	bf00      	nop
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40020c14 	.word	0x40020c14

0800101c <UART1_init>:
void UART1_init()
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af00      	add	r7, sp, #0
	__HAL_RCC_USART1_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	4b24      	ldr	r3, [pc, #144]	; (80010b8 <UART1_init+0x9c>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a23      	ldr	r2, [pc, #140]	; (80010b8 <UART1_init+0x9c>)
 800102c:	f043 0310 	orr.w	r3, r3, #16
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <UART1_init+0x9c>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f003 0310 	and.w	r3, r3, #16
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <UART1_init+0x9c>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <UART1_init+0x9c>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <UART1_init+0x9c>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]

	uint32_t* MODER = (uint32_t*)(0x40020400);
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <UART1_init+0xa0>)
 800105c:	61fb      	str	r3, [r7, #28]
	*MODER |= (0b10 << 12) | (0b10 << 14);		//set PB6 (U1Tx), PB7(U1Rx)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f443 4220 	orr.w	r2, r3, #40960	; 0xa000
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	601a      	str	r2, [r3, #0]

	uint32_t* AFRL = (uint32_t*)(0x40020420);
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <UART1_init+0xa4>)
 800106c:	61bb      	str	r3, [r7, #24]
	*AFRL  |= (0b0111 << 24) | (0b0111 << 28);
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f043 42ee 	orr.w	r2, r3, #1996488704	; 0x77000000
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	601a      	str	r2, [r3, #0]

	uint32_t* BRR = (uint32_t*)(0x40011008);
 800107a:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <UART1_init+0xa8>)
 800107c:	617b      	str	r3, [r7, #20]
	*BRR = (104<<4) | 3;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	f240 6283 	movw	r2, #1667	; 0x683
 8001084:	601a      	str	r2, [r3, #0]

	uint32_t* CR3 = (uint32_t*)(0x40011014);
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <UART1_init+0xac>)
 8001088:	613b      	str	r3, [r7, #16]
	*CR3 |= 1 << 6;							//enable DMA for receiver
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	601a      	str	r2, [r3, #0]

	uint32_t* CR1 = (uint32_t*)(0x4001100c);
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <UART1_init+0xb0>)
 8001098:	60fb      	str	r3, [r7, #12]
	*CR1 |= (1<< 3)|(1<<2)|(1<<13);
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010a2:	f043 030c 	orr.w	r3, r3, #12
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	6013      	str	r3, [r2, #0]
}
 80010aa:	bf00      	nop
 80010ac:	3724      	adds	r7, #36	; 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020400 	.word	0x40020400
 80010c0:	40020420 	.word	0x40020420
 80010c4:	40011008 	.word	0x40011008
 80010c8:	40011014 	.word	0x40011014
 80010cc:	4001100c 	.word	0x4001100c

080010d0 <UART1_Send>:
void UART1_Send(char data)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
	uint32_t* SR = (uint32_t*)(0x40011000);
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <UART1_Send+0x50>)
 80010dc:	60fb      	str	r3, [r7, #12]
	uint32_t* DR = (uint32_t*)(0x40011004);
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <UART1_Send+0x54>)
 80010e0:	60bb      	str	r3, [r7, #8]
	while(((*SR >> 7) & 1) != 1);
 80010e2:	bf00      	nop
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	09db      	lsrs	r3, r3, #7
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0f8      	beq.n	80010e4 <UART1_Send+0x14>
	*DR	= data;
 80010f2:	79fa      	ldrb	r2, [r7, #7]
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	601a      	str	r2, [r3, #0]
	while(((*SR >> 6) & 1) != 1);
 80010f8:	bf00      	nop
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	099b      	lsrs	r3, r3, #6
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0f8      	beq.n	80010fa <UART1_Send+0x2a>
	*SR &= ~(1 << 6);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	601a      	str	r2, [r3, #0]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	40011000 	.word	0x40011000
 8001124:	40011004 	.word	0x40011004

08001128 <UART1_Log>:
void UART1_Log(char* format, ...)
{
 8001128:	b40f      	push	{r0, r1, r2, r3}
 800112a:	b580      	push	{r7, lr}
 800112c:	b0a4      	sub	sp, #144	; 0x90
 800112e:	af00      	add	r7, sp, #0
	va_list arg;
    va_start(arg, format);
 8001130:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001134:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    char send_buff[128] = {0};
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	f107 0308 	add.w	r3, r7, #8
 8001140:	227c      	movs	r2, #124	; 0x7c
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f004 f921 	bl	800538c <memset>
    vsprintf(send_buff, format, arg);
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001150:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001154:	4618      	mov	r0, r3
 8001156:	f004 fda1 	bl	8005c9c <vsiprintf>
    va_end(arg);
	int msg_len = strlen(send_buff);
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f83f 	bl	80001e0 <strlen>
 8001162:	4603      	mov	r3, r0
 8001164:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	for(int i = 0; i < msg_len; i++)
 8001168:	2300      	movs	r3, #0
 800116a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800116e:	e00c      	b.n	800118a <UART1_Log+0x62>
	{
		UART1_Send(send_buff[i]);
 8001170:	1d3a      	adds	r2, r7, #4
 8001172:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001176:	4413      	add	r3, r2
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ffa8 	bl	80010d0 <UART1_Send>
	for(int i = 0; i < msg_len; i++)
 8001180:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001184:	3301      	adds	r3, #1
 8001186:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800118a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800118e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001192:	429a      	cmp	r2, r3
 8001194:	dbec      	blt.n	8001170 <UART1_Log+0x48>
	}
}
 8001196:	bf00      	nop
 8001198:	bf00      	nop
 800119a:	3790      	adds	r7, #144	; 0x90
 800119c:	46bd      	mov	sp, r7
 800119e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011a2:	b004      	add	sp, #16
 80011a4:	4770      	bx	lr
	...

080011a8 <adc_init>:

void adc_init()
{
 80011a8:	b480      	push	{r7}
 80011aa:	b087      	sub	sp, #28
 80011ac:	af00      	add	r7, sp, #0
	//set PC2 in analog mode

	__HAL_RCC_ADC1_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <adc_init+0x7c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a1b      	ldr	r2, [pc, #108]	; (8001224 <adc_init+0x7c>)
 80011b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <adc_init+0x7c>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
	uint32_t* SMR1 = (uint32_t*)(0x4001200c);
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <adc_init+0x80>)
 80011cc:	617b      	str	r3, [r7, #20]
	uint32_t* CR2 = (uint32_t*)(0x40012008);
 80011ce:	4b17      	ldr	r3, [pc, #92]	; (800122c <adc_init+0x84>)
 80011d0:	613b      	str	r3, [r7, #16]

	uint32_t* CCR = (uint32_t*)0x40012304;
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <adc_init+0x88>)
 80011d4:	60fb      	str	r3, [r7, #12]

	*SMR1 |= 0b111<< 18;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f443 12e0 	orr.w	r2, r3, #1835008	; 0x1c0000
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	601a      	str	r2, [r3, #0]
	uint32_t* JSQR = (uint32_t*)(0x40012038);
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <adc_init+0x8c>)
 80011e4:	60bb      	str	r3, [r7, #8]
	*JSQR &= ~(0b11 << 20); //select 1 convertion
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	601a      	str	r2, [r3, #0]
	*JSQR |= (16<<15); //select channel 16 (temp sensor) for JSQ4
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	601a      	str	r2, [r3, #0]
	*CCR |= 1<<23; // enable temp sensor
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	601a      	str	r2, [r3, #0]

	*CR2 |= 1<<0; //enable ADC
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f043 0201 	orr.w	r2, r3, #1
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	601a      	str	r2, [r3, #0]

}
 8001216:	bf00      	nop
 8001218:	371c      	adds	r7, #28
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	4001200c 	.word	0x4001200c
 800122c:	40012008 	.word	0x40012008
 8001230:	40012304 	.word	0x40012304
 8001234:	40012038 	.word	0x40012038

08001238 <adc_measure>:

float adc_measure()
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
	uint32_t* CR2 = (uint32_t*)0x40012008;
 800123e:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <adc_measure+0x88>)
 8001240:	60fb      	str	r3, [r7, #12]
	*CR2 |= (1<<22); //start injected channel to convert adc
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	601a      	str	r2, [r3, #0]
	uint32_t* SR = (uint32_t*)0x40012000;
 800124e:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <adc_measure+0x8c>)
 8001250:	60bb      	str	r3, [r7, #8]
	while(((*SR >> 2) & 1) == 0);
 8001252:	bf00      	nop
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	089b      	lsrs	r3, r3, #2
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0f8      	beq.n	8001254 <adc_measure+0x1c>
	*SR &= ~(1<<2);
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f023 0204 	bic.w	r2, r3, #4
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	601a      	str	r2, [r3, #0]
	uint32_t* JDR1 = (uint32_t*)0x4001203c;
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <adc_measure+0x90>)
 8001270:	607b      	str	r3, [r7, #4]

	return 3.0*(*JDR1)/4095.0;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f94c 	bl	8000514 <__aeabi_ui2d>
 800127c:	f04f 0200 	mov.w	r2, #0
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <adc_measure+0x94>)
 8001282:	f7ff f9c1 	bl	8000608 <__aeabi_dmul>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4610      	mov	r0, r2
 800128c:	4619      	mov	r1, r3
 800128e:	a30a      	add	r3, pc, #40	; (adr r3, 80012b8 <adc_measure+0x80>)
 8001290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001294:	f7ff fae2 	bl	800085c <__aeabi_ddiv>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f7ff fc8a 	bl	8000bb8 <__aeabi_d2f>
 80012a4:	4603      	mov	r3, r0
 80012a6:	ee07 3a90 	vmov	s15, r3
}
 80012aa:	eeb0 0a67 	vmov.f32	s0, s15
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	f3af 8000 	nop.w
 80012b8:	00000000 	.word	0x00000000
 80012bc:	40affe00 	.word	0x40affe00
 80012c0:	40012008 	.word	0x40012008
 80012c4:	40012000 	.word	0x40012000
 80012c8:	4001203c 	.word	0x4001203c
 80012cc:	40080000 	.word	0x40080000

080012d0 <temp_measure>:
float temperature;
float temp_measure()
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
	float vsense = adc_measure();
 80012d6:	f7ff ffaf 	bl	8001238 <adc_measure>
 80012da:	ed87 0a03 	vstr	s0, [r7, #12]
	const float v25 = 0.76;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <temp_measure+0x48>)
 80012e0:	60bb      	str	r3, [r7, #8]
	const float avg_slope = 2.5/1000;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <temp_measure+0x4c>)
 80012e4:	607b      	str	r3, [r7, #4]
	float temp = ((vsense - v25)/avg_slope) + 25;
 80012e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80012ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80012ee:	ee77 6a67 	vsub.f32	s13, s14, s15
 80012f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80012f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012fa:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80012fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001302:	edc7 7a00 	vstr	s15, [r7]
	return temp;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	ee07 3a90 	vmov	s15, r3
}
 800130c:	eeb0 0a67 	vmov.f32	s0, s15
 8001310:	3710      	adds	r7, #16
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	3f428f5c 	.word	0x3f428f5c
 800131c:	3b23d70a 	.word	0x3b23d70a

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001324:	f000 fab6 	bl	8001894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001328:	f000 f852 	bl	80013d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132c:	f000 f8ae 	bl	800148c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Leds_init();
 8001330:	f7ff fe14 	bl	8000f5c <Leds_init>
  UART1_init();
 8001334:	f7ff fe72 	bl	800101c <UART1_init>
  adc_init();
 8001338:	f7ff ff36 	bl	80011a8 <adc_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800133c:	f001 f85a 	bl	80023f4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of temp_queue */
  temp_queueHandle = osMessageQueueNew (16, sizeof(float), &temp_queue_attributes);
 8001340:	4a15      	ldr	r2, [pc, #84]	; (8001398 <main+0x78>)
 8001342:	2104      	movs	r1, #4
 8001344:	2010      	movs	r0, #16
 8001346:	f001 f94c 	bl	80025e2 <osMessageQueueNew>
 800134a:	4603      	mov	r3, r0
 800134c:	4a13      	ldr	r2, [pc, #76]	; (800139c <main+0x7c>)
 800134e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task1 */
  task1Handle = osThreadNew(func1, NULL, &task1_attributes);
 8001350:	4a13      	ldr	r2, [pc, #76]	; (80013a0 <main+0x80>)
 8001352:	2100      	movs	r1, #0
 8001354:	4813      	ldr	r0, [pc, #76]	; (80013a4 <main+0x84>)
 8001356:	f001 f897 	bl	8002488 <osThreadNew>
 800135a:	4603      	mov	r3, r0
 800135c:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <main+0x88>)
 800135e:	6013      	str	r3, [r2, #0]

  /* creation of task2 */
  task2Handle = osThreadNew(func2, NULL, &task2_attributes);
 8001360:	4a12      	ldr	r2, [pc, #72]	; (80013ac <main+0x8c>)
 8001362:	2100      	movs	r1, #0
 8001364:	4812      	ldr	r0, [pc, #72]	; (80013b0 <main+0x90>)
 8001366:	f001 f88f 	bl	8002488 <osThreadNew>
 800136a:	4603      	mov	r3, r0
 800136c:	4a11      	ldr	r2, [pc, #68]	; (80013b4 <main+0x94>)
 800136e:	6013      	str	r3, [r2, #0]

  /* creation of task3 */
  task3Handle = osThreadNew(func3, NULL, &task3_attributes);
 8001370:	4a11      	ldr	r2, [pc, #68]	; (80013b8 <main+0x98>)
 8001372:	2100      	movs	r1, #0
 8001374:	4811      	ldr	r0, [pc, #68]	; (80013bc <main+0x9c>)
 8001376:	f001 f887 	bl	8002488 <osThreadNew>
 800137a:	4603      	mov	r3, r0
 800137c:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <main+0xa0>)
 800137e:	6013      	str	r3, [r2, #0]

  /* creation of task4 */
  task4Handle = osThreadNew(func4, NULL, &task4_attributes);
 8001380:	4a10      	ldr	r2, [pc, #64]	; (80013c4 <main+0xa4>)
 8001382:	2100      	movs	r1, #0
 8001384:	4810      	ldr	r0, [pc, #64]	; (80013c8 <main+0xa8>)
 8001386:	f001 f87f 	bl	8002488 <osThreadNew>
 800138a:	4603      	mov	r3, r0
 800138c:	4a0f      	ldr	r2, [pc, #60]	; (80013cc <main+0xac>)
 800138e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001390:	f001 f854 	bl	800243c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001394:	e7fe      	b.n	8001394 <main+0x74>
 8001396:	bf00      	nop
 8001398:	08008264 	.word	0x08008264
 800139c:	2000020c 	.word	0x2000020c
 80013a0:	080081d4 	.word	0x080081d4
 80013a4:	080014c1 	.word	0x080014c1
 80013a8:	200001fc 	.word	0x200001fc
 80013ac:	080081f8 	.word	0x080081f8
 80013b0:	080014eb 	.word	0x080014eb
 80013b4:	20000200 	.word	0x20000200
 80013b8:	0800821c 	.word	0x0800821c
 80013bc:	08001515 	.word	0x08001515
 80013c0:	20000204 	.word	0x20000204
 80013c4:	08008240 	.word	0x08008240
 80013c8:	080015b5 	.word	0x080015b5
 80013cc:	20000208 	.word	0x20000208

080013d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b094      	sub	sp, #80	; 0x50
 80013d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d6:	f107 0320 	add.w	r3, r7, #32
 80013da:	2230      	movs	r2, #48	; 0x30
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 ffd4 	bl	800538c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	4b22      	ldr	r3, [pc, #136]	; (8001484 <SystemClock_Config+0xb4>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	4a21      	ldr	r2, [pc, #132]	; (8001484 <SystemClock_Config+0xb4>)
 80013fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001402:	6413      	str	r3, [r2, #64]	; 0x40
 8001404:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <SystemClock_Config+0xb4>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <SystemClock_Config+0xb8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a1b      	ldr	r2, [pc, #108]	; (8001488 <SystemClock_Config+0xb8>)
 800141a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b19      	ldr	r3, [pc, #100]	; (8001488 <SystemClock_Config+0xb8>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800142c:	2302      	movs	r3, #2
 800142e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001430:	2301      	movs	r3, #1
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001434:	2310      	movs	r3, #16
 8001436:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001438:	2300      	movs	r3, #0
 800143a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800143c:	f107 0320 	add.w	r3, r7, #32
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fb7f 	bl	8001b44 <HAL_RCC_OscConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800144c:	f000 f8cc 	bl	80015e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001450:	230f      	movs	r3, #15
 8001452:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f000 fde2 	bl	8002034 <HAL_RCC_ClockConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001476:	f000 f8b7 	bl	80015e8 <Error_Handler>
  }
}
 800147a:	bf00      	nop
 800147c:	3750      	adds	r7, #80	; 0x50
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800
 8001488:	40007000 	.word	0x40007000

0800148c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_GPIO_Init+0x30>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a08      	ldr	r2, [pc, #32]	; (80014bc <MX_GPIO_Init+0x30>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_GPIO_Init+0x30>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800

080014c0 <func1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_func1 */
void func1(void *argument)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	Leds_ctrl(LED_1, LED_ON);
 80014c8:	2101      	movs	r1, #1
 80014ca:	2001      	movs	r0, #1
 80014cc:	f7ff fd7a 	bl	8000fc4 <Leds_ctrl>
    osDelay(1000);
 80014d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014d4:	f001 f86a 	bl	80025ac <osDelay>
    Leds_ctrl(LED_1, LED_OFF);
 80014d8:	2100      	movs	r1, #0
 80014da:	2001      	movs	r0, #1
 80014dc:	f7ff fd72 	bl	8000fc4 <Leds_ctrl>
    osDelay(1000);
 80014e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014e4:	f001 f862 	bl	80025ac <osDelay>
	Leds_ctrl(LED_1, LED_ON);
 80014e8:	e7ee      	b.n	80014c8 <func1+0x8>

080014ea <func2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func2 */
void func2(void *argument)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func2 */
  /* Infinite loop */
  for(;;)
  {
    Leds_ctrl(LED_2, LED_ON);
 80014f2:	2101      	movs	r1, #1
 80014f4:	2002      	movs	r0, #2
 80014f6:	f7ff fd65 	bl	8000fc4 <Leds_ctrl>
    osDelay(1500);
 80014fa:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80014fe:	f001 f855 	bl	80025ac <osDelay>
    Leds_ctrl(LED_2, LED_OFF);
 8001502:	2100      	movs	r1, #0
 8001504:	2002      	movs	r0, #2
 8001506:	f7ff fd5d 	bl	8000fc4 <Leds_ctrl>
	osDelay(1500);
 800150a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800150e:	f001 f84d 	bl	80025ac <osDelay>
    Leds_ctrl(LED_2, LED_ON);
 8001512:	e7ee      	b.n	80014f2 <func2+0x8>

08001514 <func3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func3 */
void func3(void *argument)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func3 */
  /* Infinite loop */

  for(;;)
  {
	float temp = 0;
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
	UART1_Log("temperature: [");
 8001522:	4820      	ldr	r0, [pc, #128]	; (80015a4 <func3+0x90>)
 8001524:	f7ff fe00 	bl	8001128 <UART1_Log>
	int msg_cnt = osMessageQueueGetCount(temp_queueHandle);
 8001528:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <func3+0x94>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f001 f989 	bl	8002844 <osMessageQueueGetCount>
 8001532:	4603      	mov	r3, r0
 8001534:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < msg_cnt; i++)
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	e014      	b.n	8001566 <func3+0x52>
	{
		osMessageQueueGet(temp_queueHandle, &temp, 0, HAL_MAX_DELAY);
 800153c:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <func3+0x94>)
 800153e:	6818      	ldr	r0, [r3, #0]
 8001540:	f107 0108 	add.w	r1, r7, #8
 8001544:	f04f 33ff 	mov.w	r3, #4294967295
 8001548:	2200      	movs	r2, #0
 800154a:	f001 f91d 	bl	8002788 <osMessageQueueGet>
		UART1_Log("%.2f", temp);
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff f801 	bl	8000558 <__aeabi_f2d>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4814      	ldr	r0, [pc, #80]	; (80015ac <func3+0x98>)
 800155c:	f7ff fde4 	bl	8001128 <UART1_Log>
	for(int i = 0; i < msg_cnt; i++)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	3301      	adds	r3, #1
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	429a      	cmp	r2, r3
 800156c:	dbe6      	blt.n	800153c <func3+0x28>
	}
	osMessageQueueGet (temp_queueHandle, &temp, 0, HAL_MAX_DELAY);
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <func3+0x94>)
 8001570:	6818      	ldr	r0, [r3, #0]
 8001572:	f107 0108 	add.w	r1, r7, #8
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
 800157a:	2200      	movs	r2, #0
 800157c:	f001 f904 	bl	8002788 <osMessageQueueGet>

	int msg_cnt1 = osMessageQueueGetCount(temp_queueHandle);
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <func3+0x94>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f001 f95d 	bl	8002844 <osMessageQueueGetCount>
 800158a:	4603      	mov	r3, r0
 800158c:	60fb      	str	r3, [r7, #12]
	UART1_Log("temperature % d - %d\r\n", msg_cnt, msg_cnt1);
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	6939      	ldr	r1, [r7, #16]
 8001592:	4807      	ldr	r0, [pc, #28]	; (80015b0 <func3+0x9c>)
 8001594:	f7ff fdc8 	bl	8001128 <UART1_Log>
    osDelay(1000);
 8001598:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800159c:	f001 f806 	bl	80025ac <osDelay>
  {
 80015a0:	e7bc      	b.n	800151c <func3+0x8>
 80015a2:	bf00      	nop
 80015a4:	0800818c 	.word	0x0800818c
 80015a8:	2000020c 	.word	0x2000020c
 80015ac:	0800819c 	.word	0x0800819c
 80015b0:	080081a4 	.word	0x080081a4

080015b4 <func4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_func4 */
void func4(void *argument)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN func4 */
  /* Infinite loop */
  for(;;)
  {
	float temp = temp_measure();
 80015bc:	f7ff fe88 	bl	80012d0 <temp_measure>
 80015c0:	eef0 7a40 	vmov.f32	s15, s0
 80015c4:	edc7 7a03 	vstr	s15, [r7, #12]
	osMessageQueuePut(temp_queueHandle, &temp, 0, HAL_MAX_DELAY);
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <func4+0x30>)
 80015ca:	6818      	ldr	r0, [r3, #0]
 80015cc:	f107 010c 	add.w	r1, r7, #12
 80015d0:	f04f 33ff 	mov.w	r3, #4294967295
 80015d4:	2200      	movs	r2, #0
 80015d6:	f001 f877 	bl	80026c8 <osMessageQueuePut>
    osDelay(100);
 80015da:	2064      	movs	r0, #100	; 0x64
 80015dc:	f000 ffe6 	bl	80025ac <osDelay>
  {
 80015e0:	e7ec      	b.n	80015bc <func4+0x8>
 80015e2:	bf00      	nop
 80015e4:	2000020c 	.word	0x2000020c

080015e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ec:	b672      	cpsid	i
}
 80015ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f0:	e7fe      	b.n	80015f0 <Error_Handler+0x8>
	...

080015f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b12      	ldr	r3, [pc, #72]	; (8001648 <HAL_MspInit+0x54>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	4a11      	ldr	r2, [pc, #68]	; (8001648 <HAL_MspInit+0x54>)
 8001604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001608:	6453      	str	r3, [r2, #68]	; 0x44
 800160a:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <HAL_MspInit+0x54>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_MspInit+0x54>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <HAL_MspInit+0x54>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <HAL_MspInit+0x54>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	210f      	movs	r1, #15
 8001636:	f06f 0001 	mvn.w	r0, #1
 800163a:	f000 fa5a 	bl	8001af2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <NMI_Handler+0x4>

08001652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <HardFault_Handler+0x4>

08001658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <MemManage_Handler+0x4>

0800165e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <BusFault_Handler+0x4>

08001664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <UsageFault_Handler+0x4>

0800166a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800167c:	f000 f95c 	bl	8001938 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001680:	f002 fde8 	bl	8004254 <xTaskGetSchedulerState>
 8001684:	4603      	mov	r3, r0
 8001686:	2b01      	cmp	r3, #1
 8001688:	d001      	beq.n	800168e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800168a:	f003 fbcd 	bl	8004e28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}

08001692 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  return 1;
 8001696:	2301      	movs	r3, #1
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <_kill>:

int _kill(int pid, int sig)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
 80016aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016ac:	f003 fe36 	bl	800531c <__errno>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2216      	movs	r2, #22
 80016b4:	601a      	str	r2, [r3, #0]
  return -1;
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <_exit>:

void _exit (int status)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b082      	sub	sp, #8
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016ca:	f04f 31ff 	mov.w	r1, #4294967295
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ffe7 	bl	80016a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016d4:	e7fe      	b.n	80016d4 <_exit+0x12>

080016d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b086      	sub	sp, #24
 80016da:	af00      	add	r7, sp, #0
 80016dc:	60f8      	str	r0, [r7, #12]
 80016de:	60b9      	str	r1, [r7, #8]
 80016e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
 80016e6:	e00a      	b.n	80016fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016e8:	f3af 8000 	nop.w
 80016ec:	4601      	mov	r1, r0
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	1c5a      	adds	r2, r3, #1
 80016f2:	60ba      	str	r2, [r7, #8]
 80016f4:	b2ca      	uxtb	r2, r1
 80016f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3301      	adds	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	429a      	cmp	r2, r3
 8001704:	dbf0      	blt.n	80016e8 <_read+0x12>
  }

  return len;
 8001706:	687b      	ldr	r3, [r7, #4]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	e009      	b.n	8001736 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	1c5a      	adds	r2, r3, #1
 8001726:	60ba      	str	r2, [r7, #8]
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	3301      	adds	r3, #1
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	429a      	cmp	r2, r3
 800173c:	dbf1      	blt.n	8001722 <_write+0x12>
  }
  return len;
 800173e:	687b      	ldr	r3, [r7, #4]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <_close>:

int _close(int file)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001750:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001770:	605a      	str	r2, [r3, #4]
  return 0;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <_isatty>:

int _isatty(int file)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001788:	2301      	movs	r3, #1
}
 800178a:	4618      	mov	r0, r3
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001796:	b480      	push	{r7}
 8001798:	b085      	sub	sp, #20
 800179a:	af00      	add	r7, sp, #0
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b8:	4a14      	ldr	r2, [pc, #80]	; (800180c <_sbrk+0x5c>)
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <_sbrk+0x60>)
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c4:	4b13      	ldr	r3, [pc, #76]	; (8001814 <_sbrk+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d102      	bne.n	80017d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <_sbrk+0x64>)
 80017ce:	4a12      	ldr	r2, [pc, #72]	; (8001818 <_sbrk+0x68>)
 80017d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017d2:	4b10      	ldr	r3, [pc, #64]	; (8001814 <_sbrk+0x64>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d207      	bcs.n	80017f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e0:	f003 fd9c 	bl	800531c <__errno>
 80017e4:	4603      	mov	r3, r0
 80017e6:	220c      	movs	r2, #12
 80017e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	e009      	b.n	8001804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <_sbrk+0x64>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f6:	4b07      	ldr	r3, [pc, #28]	; (8001814 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	4a05      	ldr	r2, [pc, #20]	; (8001814 <_sbrk+0x64>)
 8001800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001802:	68fb      	ldr	r3, [r7, #12]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20020000 	.word	0x20020000
 8001810:	00000400 	.word	0x00000400
 8001814:	20000210 	.word	0x20000210
 8001818:	20004b78 	.word	0x20004b78

0800181c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <SystemInit+0x20>)
 8001822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001826:	4a05      	ldr	r2, [pc, #20]	; (800183c <SystemInit+0x20>)
 8001828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800182c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001878 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001844:	480d      	ldr	r0, [pc, #52]	; (800187c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001846:	490e      	ldr	r1, [pc, #56]	; (8001880 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001848:	4a0e      	ldr	r2, [pc, #56]	; (8001884 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800184c:	e002      	b.n	8001854 <LoopCopyDataInit>

0800184e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001852:	3304      	adds	r3, #4

08001854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001858:	d3f9      	bcc.n	800184e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185a:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800185c:	4c0b      	ldr	r4, [pc, #44]	; (800188c <LoopFillZerobss+0x26>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001860:	e001      	b.n	8001866 <LoopFillZerobss>

08001862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001864:	3204      	adds	r2, #4

08001866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001868:	d3fb      	bcc.n	8001862 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800186a:	f7ff ffd7 	bl	800181c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800186e:	f003 fd5b 	bl	8005328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001872:	f7ff fd55 	bl	8001320 <main>
  bx  lr    
 8001876:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001878:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800187c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001880:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001884:	08008674 	.word	0x08008674
  ldr r2, =_sbss
 8001888:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800188c:	20004b78 	.word	0x20004b78

08001890 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001890:	e7fe      	b.n	8001890 <ADC_IRQHandler>
	...

08001894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001898:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0d      	ldr	r2, [pc, #52]	; (80018d4 <HAL_Init+0x40>)
 800189e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018a4:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_Init+0x40>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <HAL_Init+0x40>)
 80018aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <HAL_Init+0x40>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a07      	ldr	r2, [pc, #28]	; (80018d4 <HAL_Init+0x40>)
 80018b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018bc:	2003      	movs	r0, #3
 80018be:	f000 f90d 	bl	8001adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c2:	200f      	movs	r0, #15
 80018c4:	f000 f808 	bl	80018d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c8:	f7ff fe94 	bl	80015f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023c00 	.word	0x40023c00

080018d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_InitTick+0x54>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_InitTick+0x58>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4619      	mov	r1, r3
 80018ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 f917 	bl	8001b2a <HAL_SYSTICK_Config>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e00e      	b.n	8001924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b0f      	cmp	r3, #15
 800190a:	d80a      	bhi.n	8001922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800190c:	2200      	movs	r2, #0
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f000 f8ed 	bl	8001af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001918:	4a06      	ldr	r2, [pc, #24]	; (8001934 <HAL_InitTick+0x5c>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	e000      	b.n	8001924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000000 	.word	0x20000000
 8001930:	20000008 	.word	0x20000008
 8001934:	20000004 	.word	0x20000004

08001938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_IncTick+0x20>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_IncTick+0x24>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4413      	add	r3, r2
 8001948:	4a04      	ldr	r2, [pc, #16]	; (800195c <HAL_IncTick+0x24>)
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000008 	.word	0x20000008
 800195c:	20000214 	.word	0x20000214

08001960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return uwTick;
 8001964:	4b03      	ldr	r3, [pc, #12]	; (8001974 <HAL_GetTick+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000214 	.word	0x20000214

08001978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001994:	4013      	ands	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019aa:	4a04      	ldr	r2, [pc, #16]	; (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	60d3      	str	r3, [r2, #12]
}
 80019b0:	bf00      	nop
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c4:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <__NVIC_GetPriorityGrouping+0x18>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	f003 0307 	and.w	r3, r3, #7
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	db0a      	blt.n	8001a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	490c      	ldr	r1, [pc, #48]	; (8001a28 <__NVIC_SetPriority+0x4c>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	0112      	lsls	r2, r2, #4
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	440b      	add	r3, r1
 8001a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a04:	e00a      	b.n	8001a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4908      	ldr	r1, [pc, #32]	; (8001a2c <__NVIC_SetPriority+0x50>)
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	3b04      	subs	r3, #4
 8001a14:	0112      	lsls	r2, r2, #4
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	440b      	add	r3, r1
 8001a1a:	761a      	strb	r2, [r3, #24]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000e100 	.word	0xe000e100
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f1c3 0307 	rsb	r3, r3, #7
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	bf28      	it	cs
 8001a4e:	2304      	movcs	r3, #4
 8001a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3304      	adds	r3, #4
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	d902      	bls.n	8001a60 <NVIC_EncodePriority+0x30>
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3b03      	subs	r3, #3
 8001a5e:	e000      	b.n	8001a62 <NVIC_EncodePriority+0x32>
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	f04f 32ff 	mov.w	r2, #4294967295
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	401a      	ands	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	43d9      	mvns	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	4313      	orrs	r3, r2
         );
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3724      	adds	r7, #36	; 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa8:	d301      	bcc.n	8001aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00f      	b.n	8001ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <SysTick_Config+0x40>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f7ff ff8e 	bl	80019dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac6:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac8:	2207      	movs	r2, #7
 8001aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	e000e010 	.word	0xe000e010

08001adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff47 	bl	8001978 <__NVIC_SetPriorityGrouping>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b04:	f7ff ff5c 	bl	80019c0 <__NVIC_GetPriorityGrouping>
 8001b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	6978      	ldr	r0, [r7, #20]
 8001b10:	f7ff ff8e 	bl	8001a30 <NVIC_EncodePriority>
 8001b14:	4602      	mov	r2, r0
 8001b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff5d 	bl	80019dc <__NVIC_SetPriority>
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ffb0 	bl	8001a98 <SysTick_Config>
 8001b38:	4603      	mov	r3, r0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
	...

08001b44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e267      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d075      	beq.n	8001c4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b62:	4b88      	ldr	r3, [pc, #544]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d00c      	beq.n	8001b88 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b6e:	4b85      	ldr	r3, [pc, #532]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d112      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b7a:	4b82      	ldr	r3, [pc, #520]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b86:	d10b      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b88:	4b7e      	ldr	r3, [pc, #504]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d05b      	beq.n	8001c4c <HAL_RCC_OscConfig+0x108>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d157      	bne.n	8001c4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e242      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba8:	d106      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x74>
 8001baa:	4b76      	ldr	r3, [pc, #472]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a75      	ldr	r2, [pc, #468]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e01d      	b.n	8001bf4 <HAL_RCC_OscConfig+0xb0>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc0:	d10c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x98>
 8001bc2:	4b70      	ldr	r3, [pc, #448]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a6f      	ldr	r2, [pc, #444]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	4b6d      	ldr	r3, [pc, #436]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a6c      	ldr	r2, [pc, #432]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e00b      	b.n	8001bf4 <HAL_RCC_OscConfig+0xb0>
 8001bdc:	4b69      	ldr	r3, [pc, #420]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a68      	ldr	r2, [pc, #416]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b66      	ldr	r3, [pc, #408]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a65      	ldr	r2, [pc, #404]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d013      	beq.n	8001c24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff feb0 	bl	8001960 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff feac 	bl	8001960 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	; 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e207      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	4b5b      	ldr	r3, [pc, #364]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0xc0>
 8001c22:	e014      	b.n	8001c4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7ff fe9c 	bl	8001960 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c2c:	f7ff fe98 	bl	8001960 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b64      	cmp	r3, #100	; 0x64
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e1f3      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3e:	4b51      	ldr	r3, [pc, #324]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0xe8>
 8001c4a:	e000      	b.n	8001c4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d063      	beq.n	8001d22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c5a:	4b4a      	ldr	r3, [pc, #296]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00b      	beq.n	8001c7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c66:	4b47      	ldr	r3, [pc, #284]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d11c      	bne.n	8001cac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c72:	4b44      	ldr	r3, [pc, #272]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d116      	bne.n	8001cac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7e:	4b41      	ldr	r3, [pc, #260]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_RCC_OscConfig+0x152>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d001      	beq.n	8001c96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e1c7      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c96:	4b3b      	ldr	r3, [pc, #236]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4937      	ldr	r1, [pc, #220]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001caa:	e03a      	b.n	8001d22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d020      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb4:	4b34      	ldr	r3, [pc, #208]	; (8001d88 <HAL_RCC_OscConfig+0x244>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cba:	f7ff fe51 	bl	8001960 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc2:	f7ff fe4d 	bl	8001960 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e1a8      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd4:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce0:	4b28      	ldr	r3, [pc, #160]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4925      	ldr	r1, [pc, #148]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	600b      	str	r3, [r1, #0]
 8001cf4:	e015      	b.n	8001d22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cf6:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <HAL_RCC_OscConfig+0x244>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fe30 	bl	8001960 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d04:	f7ff fe2c 	bl	8001960 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e187      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d16:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d036      	beq.n	8001d9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d016      	beq.n	8001d64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <HAL_RCC_OscConfig+0x248>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3c:	f7ff fe10 	bl	8001960 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d44:	f7ff fe0c 	bl	8001960 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e167      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x200>
 8001d62:	e01b      	b.n	8001d9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <HAL_RCC_OscConfig+0x248>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6a:	f7ff fdf9 	bl	8001960 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d70:	e00e      	b.n	8001d90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d72:	f7ff fdf5 	bl	8001960 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d907      	bls.n	8001d90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e150      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
 8001d84:	40023800 	.word	0x40023800
 8001d88:	42470000 	.word	0x42470000
 8001d8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d90:	4b88      	ldr	r3, [pc, #544]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1ea      	bne.n	8001d72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 8097 	beq.w	8001ed8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dae:	4b81      	ldr	r3, [pc, #516]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10f      	bne.n	8001dda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	4b7d      	ldr	r3, [pc, #500]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	4a7c      	ldr	r2, [pc, #496]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dca:	4b7a      	ldr	r3, [pc, #488]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dda:	4b77      	ldr	r3, [pc, #476]	; (8001fb8 <HAL_RCC_OscConfig+0x474>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d118      	bne.n	8001e18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001de6:	4b74      	ldr	r3, [pc, #464]	; (8001fb8 <HAL_RCC_OscConfig+0x474>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a73      	ldr	r2, [pc, #460]	; (8001fb8 <HAL_RCC_OscConfig+0x474>)
 8001dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df2:	f7ff fdb5 	bl	8001960 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dfa:	f7ff fdb1 	bl	8001960 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e10c      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0c:	4b6a      	ldr	r3, [pc, #424]	; (8001fb8 <HAL_RCC_OscConfig+0x474>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d106      	bne.n	8001e2e <HAL_RCC_OscConfig+0x2ea>
 8001e20:	4b64      	ldr	r3, [pc, #400]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e24:	4a63      	ldr	r2, [pc, #396]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e2c:	e01c      	b.n	8001e68 <HAL_RCC_OscConfig+0x324>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b05      	cmp	r3, #5
 8001e34:	d10c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x30c>
 8001e36:	4b5f      	ldr	r3, [pc, #380]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e3a:	4a5e      	ldr	r2, [pc, #376]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	6713      	str	r3, [r2, #112]	; 0x70
 8001e42:	4b5c      	ldr	r3, [pc, #368]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e46:	4a5b      	ldr	r2, [pc, #364]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4e:	e00b      	b.n	8001e68 <HAL_RCC_OscConfig+0x324>
 8001e50:	4b58      	ldr	r3, [pc, #352]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e54:	4a57      	ldr	r2, [pc, #348]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e56:	f023 0301 	bic.w	r3, r3, #1
 8001e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e5c:	4b55      	ldr	r3, [pc, #340]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e60:	4a54      	ldr	r2, [pc, #336]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e62:	f023 0304 	bic.w	r3, r3, #4
 8001e66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d015      	beq.n	8001e9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e70:	f7ff fd76 	bl	8001960 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e78:	f7ff fd72 	bl	8001960 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e0cb      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8e:	4b49      	ldr	r3, [pc, #292]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0ee      	beq.n	8001e78 <HAL_RCC_OscConfig+0x334>
 8001e9a:	e014      	b.n	8001ec6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9c:	f7ff fd60 	bl	8001960 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea2:	e00a      	b.n	8001eba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea4:	f7ff fd5c 	bl	8001960 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e0b5      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eba:	4b3e      	ldr	r3, [pc, #248]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1ee      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d105      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ecc:	4b39      	ldr	r3, [pc, #228]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	4a38      	ldr	r2, [pc, #224]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80a1 	beq.w	8002024 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ee2:	4b34      	ldr	r3, [pc, #208]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d05c      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d141      	bne.n	8001f7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef6:	4b31      	ldr	r3, [pc, #196]	; (8001fbc <HAL_RCC_OscConfig+0x478>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff fd30 	bl	8001960 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f04:	f7ff fd2c 	bl	8001960 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e087      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f16:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69da      	ldr	r2, [r3, #28]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	019b      	lsls	r3, r3, #6
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f38:	085b      	lsrs	r3, r3, #1
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	041b      	lsls	r3, r3, #16
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f44:	061b      	lsls	r3, r3, #24
 8001f46:	491b      	ldr	r1, [pc, #108]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <HAL_RCC_OscConfig+0x478>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7ff fd05 	bl	8001960 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f5a:	f7ff fd01 	bl	8001960 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e05c      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6c:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x416>
 8001f78:	e054      	b.n	8002024 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <HAL_RCC_OscConfig+0x478>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7ff fcee 	bl	8001960 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f88:	f7ff fcea 	bl	8001960 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e045      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x444>
 8001fa6:	e03d      	b.n	8002024 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e038      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40007000 	.word	0x40007000
 8001fbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_RCC_OscConfig+0x4ec>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d028      	beq.n	8002020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d121      	bne.n	8002020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d11a      	bne.n	8002020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ff6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d111      	bne.n	8002020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002006:	085b      	lsrs	r3, r3, #1
 8002008:	3b01      	subs	r3, #1
 800200a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800200c:	429a      	cmp	r2, r3
 800200e:	d107      	bne.n	8002020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800201c:	429a      	cmp	r2, r3
 800201e:	d001      	beq.n	8002024 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800

08002034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0cc      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002048:	4b68      	ldr	r3, [pc, #416]	; (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d90c      	bls.n	8002070 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b65      	ldr	r3, [pc, #404]	; (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800205e:	4b63      	ldr	r3, [pc, #396]	; (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d001      	beq.n	8002070 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0b8      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d020      	beq.n	80020be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002088:	4b59      	ldr	r3, [pc, #356]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4a58      	ldr	r2, [pc, #352]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002092:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020a0:	4b53      	ldr	r3, [pc, #332]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	4a52      	ldr	r2, [pc, #328]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ac:	4b50      	ldr	r3, [pc, #320]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	494d      	ldr	r1, [pc, #308]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d044      	beq.n	8002154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d107      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	4b47      	ldr	r3, [pc, #284]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d119      	bne.n	8002112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e07f      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d003      	beq.n	80020f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d107      	bne.n	8002102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f2:	4b3f      	ldr	r3, [pc, #252]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e06f      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002102:	4b3b      	ldr	r3, [pc, #236]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e067      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002112:	4b37      	ldr	r3, [pc, #220]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f023 0203 	bic.w	r2, r3, #3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	4934      	ldr	r1, [pc, #208]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	4313      	orrs	r3, r2
 8002122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002124:	f7ff fc1c 	bl	8001960 <HAL_GetTick>
 8002128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212a:	e00a      	b.n	8002142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800212c:	f7ff fc18 	bl	8001960 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	; 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e04f      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002142:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 020c 	and.w	r2, r3, #12
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	429a      	cmp	r2, r3
 8002152:	d1eb      	bne.n	800212c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002154:	4b25      	ldr	r3, [pc, #148]	; (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d20c      	bcs.n	800217c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b22      	ldr	r3, [pc, #136]	; (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	4b20      	ldr	r3, [pc, #128]	; (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e032      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d008      	beq.n	800219a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002188:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4916      	ldr	r1, [pc, #88]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	4313      	orrs	r3, r2
 8002198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d009      	beq.n	80021ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021a6:	4b12      	ldr	r3, [pc, #72]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	490e      	ldr	r1, [pc, #56]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ba:	f000 f821 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 80021be:	4602      	mov	r2, r0
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	490a      	ldr	r1, [pc, #40]	; (80021f4 <HAL_RCC_ClockConfig+0x1c0>)
 80021cc:	5ccb      	ldrb	r3, [r1, r3]
 80021ce:	fa22 f303 	lsr.w	r3, r2, r3
 80021d2:	4a09      	ldr	r2, [pc, #36]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <HAL_RCC_ClockConfig+0x1c8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff fb7c 	bl	80018d8 <HAL_InitTick>

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023c00 	.word	0x40023c00
 80021f0:	40023800 	.word	0x40023800
 80021f4:	0800827c 	.word	0x0800827c
 80021f8:	20000000 	.word	0x20000000
 80021fc:	20000004 	.word	0x20000004

08002200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002204:	b090      	sub	sp, #64	; 0x40
 8002206:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	637b      	str	r3, [r7, #52]	; 0x34
 800220c:	2300      	movs	r3, #0
 800220e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002210:	2300      	movs	r3, #0
 8002212:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002218:	4b59      	ldr	r3, [pc, #356]	; (8002380 <HAL_RCC_GetSysClockFreq+0x180>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 030c 	and.w	r3, r3, #12
 8002220:	2b08      	cmp	r3, #8
 8002222:	d00d      	beq.n	8002240 <HAL_RCC_GetSysClockFreq+0x40>
 8002224:	2b08      	cmp	r3, #8
 8002226:	f200 80a1 	bhi.w	800236c <HAL_RCC_GetSysClockFreq+0x16c>
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x34>
 800222e:	2b04      	cmp	r3, #4
 8002230:	d003      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0x3a>
 8002232:	e09b      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002234:	4b53      	ldr	r3, [pc, #332]	; (8002384 <HAL_RCC_GetSysClockFreq+0x184>)
 8002236:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002238:	e09b      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800223a:	4b53      	ldr	r3, [pc, #332]	; (8002388 <HAL_RCC_GetSysClockFreq+0x188>)
 800223c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800223e:	e098      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002240:	4b4f      	ldr	r3, [pc, #316]	; (8002380 <HAL_RCC_GetSysClockFreq+0x180>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002248:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800224a:	4b4d      	ldr	r3, [pc, #308]	; (8002380 <HAL_RCC_GetSysClockFreq+0x180>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d028      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002256:	4b4a      	ldr	r3, [pc, #296]	; (8002380 <HAL_RCC_GetSysClockFreq+0x180>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	099b      	lsrs	r3, r3, #6
 800225c:	2200      	movs	r2, #0
 800225e:	623b      	str	r3, [r7, #32]
 8002260:	627a      	str	r2, [r7, #36]	; 0x24
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002268:	2100      	movs	r1, #0
 800226a:	4b47      	ldr	r3, [pc, #284]	; (8002388 <HAL_RCC_GetSysClockFreq+0x188>)
 800226c:	fb03 f201 	mul.w	r2, r3, r1
 8002270:	2300      	movs	r3, #0
 8002272:	fb00 f303 	mul.w	r3, r0, r3
 8002276:	4413      	add	r3, r2
 8002278:	4a43      	ldr	r2, [pc, #268]	; (8002388 <HAL_RCC_GetSysClockFreq+0x188>)
 800227a:	fba0 1202 	umull	r1, r2, r0, r2
 800227e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002280:	460a      	mov	r2, r1
 8002282:	62ba      	str	r2, [r7, #40]	; 0x28
 8002284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002286:	4413      	add	r3, r2
 8002288:	62fb      	str	r3, [r7, #44]	; 0x2c
 800228a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800228c:	2200      	movs	r2, #0
 800228e:	61bb      	str	r3, [r7, #24]
 8002290:	61fa      	str	r2, [r7, #28]
 8002292:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002296:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800229a:	f7fe fcdd 	bl	8000c58 <__aeabi_uldivmod>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4613      	mov	r3, r2
 80022a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022a6:	e053      	b.n	8002350 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a8:	4b35      	ldr	r3, [pc, #212]	; (8002380 <HAL_RCC_GetSysClockFreq+0x180>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	099b      	lsrs	r3, r3, #6
 80022ae:	2200      	movs	r2, #0
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	617a      	str	r2, [r7, #20]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80022ba:	f04f 0b00 	mov.w	fp, #0
 80022be:	4652      	mov	r2, sl
 80022c0:	465b      	mov	r3, fp
 80022c2:	f04f 0000 	mov.w	r0, #0
 80022c6:	f04f 0100 	mov.w	r1, #0
 80022ca:	0159      	lsls	r1, r3, #5
 80022cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022d0:	0150      	lsls	r0, r2, #5
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	ebb2 080a 	subs.w	r8, r2, sl
 80022da:	eb63 090b 	sbc.w	r9, r3, fp
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022f2:	ebb2 0408 	subs.w	r4, r2, r8
 80022f6:	eb63 0509 	sbc.w	r5, r3, r9
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	00eb      	lsls	r3, r5, #3
 8002304:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002308:	00e2      	lsls	r2, r4, #3
 800230a:	4614      	mov	r4, r2
 800230c:	461d      	mov	r5, r3
 800230e:	eb14 030a 	adds.w	r3, r4, sl
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	eb45 030b 	adc.w	r3, r5, fp
 8002318:	607b      	str	r3, [r7, #4]
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002326:	4629      	mov	r1, r5
 8002328:	028b      	lsls	r3, r1, #10
 800232a:	4621      	mov	r1, r4
 800232c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002330:	4621      	mov	r1, r4
 8002332:	028a      	lsls	r2, r1, #10
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800233a:	2200      	movs	r2, #0
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	60fa      	str	r2, [r7, #12]
 8002340:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002344:	f7fe fc88 	bl	8000c58 <__aeabi_uldivmod>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4613      	mov	r3, r2
 800234e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002350:	4b0b      	ldr	r3, [pc, #44]	; (8002380 <HAL_RCC_GetSysClockFreq+0x180>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	0c1b      	lsrs	r3, r3, #16
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	3301      	adds	r3, #1
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002360:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002364:	fbb2 f3f3 	udiv	r3, r2, r3
 8002368:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800236a:	e002      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <HAL_RCC_GetSysClockFreq+0x184>)
 800236e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002374:	4618      	mov	r0, r3
 8002376:	3740      	adds	r7, #64	; 0x40
 8002378:	46bd      	mov	sp, r7
 800237a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	00f42400 	.word	0x00f42400
 8002388:	017d7840 	.word	0x017d7840

0800238c <__NVIC_SetPriority>:
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	6039      	str	r1, [r7, #0]
 8002396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	2b00      	cmp	r3, #0
 800239e:	db0a      	blt.n	80023b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	490c      	ldr	r1, [pc, #48]	; (80023d8 <__NVIC_SetPriority+0x4c>)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	0112      	lsls	r2, r2, #4
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	440b      	add	r3, r1
 80023b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023b4:	e00a      	b.n	80023cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4908      	ldr	r1, [pc, #32]	; (80023dc <__NVIC_SetPriority+0x50>)
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	3b04      	subs	r3, #4
 80023c4:	0112      	lsls	r2, r2, #4
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	440b      	add	r3, r1
 80023ca:	761a      	strb	r2, [r3, #24]
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000e100 	.word	0xe000e100
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80023e4:	2100      	movs	r1, #0
 80023e6:	f06f 0004 	mvn.w	r0, #4
 80023ea:	f7ff ffcf 	bl	800238c <__NVIC_SetPriority>
#endif
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023fa:	f3ef 8305 	mrs	r3, IPSR
 80023fe:	603b      	str	r3, [r7, #0]
  return(result);
 8002400:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002406:	f06f 0305 	mvn.w	r3, #5
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	e00c      	b.n	8002428 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <osKernelInitialize+0x44>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d105      	bne.n	8002422 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <osKernelInitialize+0x44>)
 8002418:	2201      	movs	r2, #1
 800241a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800241c:	2300      	movs	r3, #0
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	e002      	b.n	8002428 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002422:	f04f 33ff 	mov.w	r3, #4294967295
 8002426:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002428:	687b      	ldr	r3, [r7, #4]
}
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	20000218 	.word	0x20000218

0800243c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002442:	f3ef 8305 	mrs	r3, IPSR
 8002446:	603b      	str	r3, [r7, #0]
  return(result);
 8002448:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <osKernelStart+0x1a>
    stat = osErrorISR;
 800244e:	f06f 0305 	mvn.w	r3, #5
 8002452:	607b      	str	r3, [r7, #4]
 8002454:	e010      	b.n	8002478 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002456:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <osKernelStart+0x48>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d109      	bne.n	8002472 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800245e:	f7ff ffbf 	bl	80023e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002462:	4b08      	ldr	r3, [pc, #32]	; (8002484 <osKernelStart+0x48>)
 8002464:	2202      	movs	r2, #2
 8002466:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002468:	f001 faac 	bl	80039c4 <vTaskStartScheduler>
      stat = osOK;
 800246c:	2300      	movs	r3, #0
 800246e:	607b      	str	r3, [r7, #4]
 8002470:	e002      	b.n	8002478 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002472:	f04f 33ff 	mov.w	r3, #4294967295
 8002476:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002478:	687b      	ldr	r3, [r7, #4]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000218 	.word	0x20000218

08002488 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002488:	b580      	push	{r7, lr}
 800248a:	b08e      	sub	sp, #56	; 0x38
 800248c:	af04      	add	r7, sp, #16
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002494:	2300      	movs	r3, #0
 8002496:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002498:	f3ef 8305 	mrs	r3, IPSR
 800249c:	617b      	str	r3, [r7, #20]
  return(result);
 800249e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d17e      	bne.n	80025a2 <osThreadNew+0x11a>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d07b      	beq.n	80025a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80024aa:	2380      	movs	r3, #128	; 0x80
 80024ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80024ae:	2318      	movs	r3, #24
 80024b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d045      	beq.n	800254e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <osThreadNew+0x48>
        name = attr->name;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <osThreadNew+0x6e>
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	2b38      	cmp	r3, #56	; 0x38
 80024e8:	d805      	bhi.n	80024f6 <osThreadNew+0x6e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <osThreadNew+0x72>
        return (NULL);
 80024f6:	2300      	movs	r3, #0
 80024f8:	e054      	b.n	80025a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	089b      	lsrs	r3, r3, #2
 8002508:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00e      	beq.n	8002530 <osThreadNew+0xa8>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b5b      	cmp	r3, #91	; 0x5b
 8002518:	d90a      	bls.n	8002530 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800251e:	2b00      	cmp	r3, #0
 8002520:	d006      	beq.n	8002530 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <osThreadNew+0xa8>
        mem = 1;
 800252a:	2301      	movs	r3, #1
 800252c:	61bb      	str	r3, [r7, #24]
 800252e:	e010      	b.n	8002552 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10c      	bne.n	8002552 <osThreadNew+0xca>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d108      	bne.n	8002552 <osThreadNew+0xca>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d104      	bne.n	8002552 <osThreadNew+0xca>
          mem = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	e001      	b.n	8002552 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d110      	bne.n	800257a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002560:	9202      	str	r2, [sp, #8]
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	6a3a      	ldr	r2, [r7, #32]
 800256c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f001 f852 	bl	8003618 <xTaskCreateStatic>
 8002574:	4603      	mov	r3, r0
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	e013      	b.n	80025a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d110      	bne.n	80025a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	b29a      	uxth	r2, r3
 8002584:	f107 0310 	add.w	r3, r7, #16
 8002588:	9301      	str	r3, [sp, #4]
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f001 f89d 	bl	80036d2 <xTaskCreate>
 8002598:	4603      	mov	r3, r0
 800259a:	2b01      	cmp	r3, #1
 800259c:	d001      	beq.n	80025a2 <osThreadNew+0x11a>
            hTask = NULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80025a2:	693b      	ldr	r3, [r7, #16]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3728      	adds	r7, #40	; 0x28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025b4:	f3ef 8305 	mrs	r3, IPSR
 80025b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80025ba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <osDelay+0x1c>
    stat = osErrorISR;
 80025c0:	f06f 0305 	mvn.w	r3, #5
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	e007      	b.n	80025d8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f001 f9c2 	bl	800395c <vTaskDelay>
    }
  }

  return (stat);
 80025d8:	68fb      	ldr	r3, [r7, #12]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b08a      	sub	sp, #40	; 0x28
 80025e6:	af02      	add	r7, sp, #8
 80025e8:	60f8      	str	r0, [r7, #12]
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025f2:	f3ef 8305 	mrs	r3, IPSR
 80025f6:	613b      	str	r3, [r7, #16]
  return(result);
 80025f8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d15f      	bne.n	80026be <osMessageQueueNew+0xdc>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d05c      	beq.n	80026be <osMessageQueueNew+0xdc>
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d059      	beq.n	80026be <osMessageQueueNew+0xdc>
    mem = -1;
 800260a:	f04f 33ff 	mov.w	r3, #4294967295
 800260e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d029      	beq.n	800266a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d012      	beq.n	8002644 <osMessageQueueNew+0x62>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	2b4f      	cmp	r3, #79	; 0x4f
 8002624:	d90e      	bls.n	8002644 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00a      	beq.n	8002644 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695a      	ldr	r2, [r3, #20]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	fb01 f303 	mul.w	r3, r1, r3
 800263a:	429a      	cmp	r2, r3
 800263c:	d302      	bcc.n	8002644 <osMessageQueueNew+0x62>
        mem = 1;
 800263e:	2301      	movs	r3, #1
 8002640:	61bb      	str	r3, [r7, #24]
 8002642:	e014      	b.n	800266e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d110      	bne.n	800266e <osMessageQueueNew+0x8c>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10c      	bne.n	800266e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002658:	2b00      	cmp	r3, #0
 800265a:	d108      	bne.n	800266e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d104      	bne.n	800266e <osMessageQueueNew+0x8c>
          mem = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	61bb      	str	r3, [r7, #24]
 8002668:	e001      	b.n	800266e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d10b      	bne.n	800268c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2100      	movs	r1, #0
 800267e:	9100      	str	r1, [sp, #0]
 8002680:	68b9      	ldr	r1, [r7, #8]
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 fa4e 	bl	8002b24 <xQueueGenericCreateStatic>
 8002688:	61f8      	str	r0, [r7, #28]
 800268a:	e008      	b.n	800269e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d105      	bne.n	800269e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8002692:	2200      	movs	r2, #0
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 fabc 	bl	8002c14 <xQueueGenericCreate>
 800269c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00c      	beq.n	80026be <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <osMessageQueueNew+0xd0>
        name = attr->name;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	e001      	b.n	80026b6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80026b6:	6979      	ldr	r1, [r7, #20]
 80026b8:	69f8      	ldr	r0, [r7, #28]
 80026ba:	f000 ff4f 	bl	800355c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80026be:	69fb      	ldr	r3, [r7, #28]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3720      	adds	r7, #32
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	603b      	str	r3, [r7, #0]
 80026d4:	4613      	mov	r3, r2
 80026d6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80026dc:	2300      	movs	r3, #0
 80026de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026e0:	f3ef 8305 	mrs	r3, IPSR
 80026e4:	617b      	str	r3, [r7, #20]
  return(result);
 80026e6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d028      	beq.n	800273e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d005      	beq.n	80026fe <osMessageQueuePut+0x36>
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d002      	beq.n	80026fe <osMessageQueuePut+0x36>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80026fe:	f06f 0303 	mvn.w	r3, #3
 8002702:	61fb      	str	r3, [r7, #28]
 8002704:	e038      	b.n	8002778 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800270a:	f107 0210 	add.w	r2, r7, #16
 800270e:	2300      	movs	r3, #0
 8002710:	68b9      	ldr	r1, [r7, #8]
 8002712:	69b8      	ldr	r0, [r7, #24]
 8002714:	f000 fbda 	bl	8002ecc <xQueueGenericSendFromISR>
 8002718:	4603      	mov	r3, r0
 800271a:	2b01      	cmp	r3, #1
 800271c:	d003      	beq.n	8002726 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800271e:	f06f 0302 	mvn.w	r3, #2
 8002722:	61fb      	str	r3, [r7, #28]
 8002724:	e028      	b.n	8002778 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d025      	beq.n	8002778 <osMessageQueuePut+0xb0>
 800272c:	4b15      	ldr	r3, [pc, #84]	; (8002784 <osMessageQueuePut+0xbc>)
 800272e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	f3bf 8f4f 	dsb	sy
 8002738:	f3bf 8f6f 	isb	sy
 800273c:	e01c      	b.n	8002778 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <osMessageQueuePut+0x82>
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d103      	bne.n	8002752 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800274a:	f06f 0303 	mvn.w	r3, #3
 800274e:	61fb      	str	r3, [r7, #28]
 8002750:	e012      	b.n	8002778 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002752:	2300      	movs	r3, #0
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	68b9      	ldr	r1, [r7, #8]
 8002758:	69b8      	ldr	r0, [r7, #24]
 800275a:	f000 fab9 	bl	8002cd0 <xQueueGenericSend>
 800275e:	4603      	mov	r3, r0
 8002760:	2b01      	cmp	r3, #1
 8002762:	d009      	beq.n	8002778 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800276a:	f06f 0301 	mvn.w	r3, #1
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	e002      	b.n	8002778 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8002772:	f06f 0302 	mvn.w	r3, #2
 8002776:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002778:	69fb      	ldr	r3, [r7, #28]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3720      	adds	r7, #32
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	e000ed04 	.word	0xe000ed04

08002788 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002788:	b580      	push	{r7, lr}
 800278a:	b088      	sub	sp, #32
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
 8002794:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800279e:	f3ef 8305 	mrs	r3, IPSR
 80027a2:	617b      	str	r3, [r7, #20]
  return(result);
 80027a4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d028      	beq.n	80027fc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <osMessageQueueGet+0x34>
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d002      	beq.n	80027bc <osMessageQueueGet+0x34>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80027bc:	f06f 0303 	mvn.w	r3, #3
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	e037      	b.n	8002834 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80027c8:	f107 0310 	add.w	r3, r7, #16
 80027cc:	461a      	mov	r2, r3
 80027ce:	68b9      	ldr	r1, [r7, #8]
 80027d0:	69b8      	ldr	r0, [r7, #24]
 80027d2:	f000 fcf7 	bl	80031c4 <xQueueReceiveFromISR>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d003      	beq.n	80027e4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80027dc:	f06f 0302 	mvn.w	r3, #2
 80027e0:	61fb      	str	r3, [r7, #28]
 80027e2:	e027      	b.n	8002834 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d024      	beq.n	8002834 <osMessageQueueGet+0xac>
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <osMessageQueueGet+0xb8>)
 80027ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027f0:	601a      	str	r2, [r3, #0]
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	f3bf 8f6f 	isb	sy
 80027fa:	e01b      	b.n	8002834 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d002      	beq.n	8002808 <osMessageQueueGet+0x80>
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d103      	bne.n	8002810 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8002808:	f06f 0303 	mvn.w	r3, #3
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	e011      	b.n	8002834 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	68b9      	ldr	r1, [r7, #8]
 8002814:	69b8      	ldr	r0, [r7, #24]
 8002816:	f000 fbf5 	bl	8003004 <xQueueReceive>
 800281a:	4603      	mov	r3, r0
 800281c:	2b01      	cmp	r3, #1
 800281e:	d009      	beq.n	8002834 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8002826:	f06f 0301 	mvn.w	r3, #1
 800282a:	61fb      	str	r3, [r7, #28]
 800282c:	e002      	b.n	8002834 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800282e:	f06f 0302 	mvn.w	r3, #2
 8002832:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002834:	69fb      	ldr	r3, [r7, #28]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3720      	adds	r7, #32
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	e000ed04 	.word	0xe000ed04

08002844 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d102      	bne.n	800285c <osMessageQueueGetCount+0x18>
    count = 0U;
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
 800285a:	e00e      	b.n	800287a <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800285c:	f3ef 8305 	mrs	r3, IPSR
 8002860:	60fb      	str	r3, [r7, #12]
  return(result);
 8002862:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002864:	2b00      	cmp	r3, #0
 8002866:	d004      	beq.n	8002872 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8002868:	6938      	ldr	r0, [r7, #16]
 800286a:	f000 fd49 	bl	8003300 <uxQueueMessagesWaitingFromISR>
 800286e:	6178      	str	r0, [r7, #20]
 8002870:	e003      	b.n	800287a <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8002872:	6938      	ldr	r0, [r7, #16]
 8002874:	f000 fd26 	bl	80032c4 <uxQueueMessagesWaiting>
 8002878:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 800287a:	697b      	ldr	r3, [r7, #20]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4a07      	ldr	r2, [pc, #28]	; (80028b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002894:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	4a06      	ldr	r2, [pc, #24]	; (80028b4 <vApplicationGetIdleTaskMemory+0x30>)
 800289a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2280      	movs	r2, #128	; 0x80
 80028a0:	601a      	str	r2, [r3, #0]
}
 80028a2:	bf00      	nop
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	2000021c 	.word	0x2000021c
 80028b4:	20000278 	.word	0x20000278

080028b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4a07      	ldr	r2, [pc, #28]	; (80028e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80028c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	4a06      	ldr	r2, [pc, #24]	; (80028e8 <vApplicationGetTimerTaskMemory+0x30>)
 80028ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028d6:	601a      	str	r2, [r3, #0]
}
 80028d8:	bf00      	nop
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	20000478 	.word	0x20000478
 80028e8:	200004d4 	.word	0x200004d4

080028ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f103 0208 	add.w	r2, r3, #8
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f04f 32ff 	mov.w	r2, #4294967295
 8002904:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f103 0208 	add.w	r2, r3, #8
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f103 0208 	add.w	r2, r3, #8
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002946:	b480      	push	{r7}
 8002948:	b085      	sub	sp, #20
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	601a      	str	r2, [r3, #0]
}
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800298e:	b480      	push	{r7}
 8002990:	b085      	sub	sp, #20
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a4:	d103      	bne.n	80029ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	60fb      	str	r3, [r7, #12]
 80029ac:	e00c      	b.n	80029c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3308      	adds	r3, #8
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	e002      	b.n	80029bc <vListInsert+0x2e>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d2f6      	bcs.n	80029b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	601a      	str	r2, [r3, #0]
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6892      	ldr	r2, [r2, #8]
 8002a16:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6852      	ldr	r2, [r2, #4]
 8002a20:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d103      	bne.n	8002a34 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	1e5a      	subs	r2, r3, #1
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3714      	adds	r7, #20
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10a      	bne.n	8002a7e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6c:	f383 8811 	msr	BASEPRI, r3
 8002a70:	f3bf 8f6f 	isb	sy
 8002a74:	f3bf 8f4f 	dsb	sy
 8002a78:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a7a:	bf00      	nop
 8002a7c:	e7fe      	b.n	8002a7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a7e:	f002 f941 	bl	8004d04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8a:	68f9      	ldr	r1, [r7, #12]
 8002a8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	441a      	add	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	68f9      	ldr	r1, [r7, #12]
 8002ab2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	441a      	add	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	22ff      	movs	r2, #255	; 0xff
 8002ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	22ff      	movs	r2, #255	; 0xff
 8002aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d114      	bne.n	8002afe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d01a      	beq.n	8002b12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	3310      	adds	r3, #16
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f001 f9f9 	bl	8003ed8 <xTaskRemoveFromEventList>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d012      	beq.n	8002b12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002aec:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <xQueueGenericReset+0xcc>)
 8002aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	f3bf 8f4f 	dsb	sy
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	e009      	b.n	8002b12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	3310      	adds	r3, #16
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fef2 	bl	80028ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	3324      	adds	r3, #36	; 0x24
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff feed 	bl	80028ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002b12:	f002 f927 	bl	8004d64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002b16:	2301      	movs	r3, #1
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	e000ed04 	.word	0xe000ed04

08002b24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08e      	sub	sp, #56	; 0x38
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d10a      	bne.n	8002b4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3c:	f383 8811 	msr	BASEPRI, r3
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b4a:	bf00      	nop
 8002b4c:	e7fe      	b.n	8002b4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10a      	bne.n	8002b6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b58:	f383 8811 	msr	BASEPRI, r3
 8002b5c:	f3bf 8f6f 	isb	sy
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b66:	bf00      	nop
 8002b68:	e7fe      	b.n	8002b68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d002      	beq.n	8002b76 <xQueueGenericCreateStatic+0x52>
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d001      	beq.n	8002b7a <xQueueGenericCreateStatic+0x56>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <xQueueGenericCreateStatic+0x58>
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10a      	bne.n	8002b96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b84:	f383 8811 	msr	BASEPRI, r3
 8002b88:	f3bf 8f6f 	isb	sy
 8002b8c:	f3bf 8f4f 	dsb	sy
 8002b90:	623b      	str	r3, [r7, #32]
}
 8002b92:	bf00      	nop
 8002b94:	e7fe      	b.n	8002b94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d102      	bne.n	8002ba2 <xQueueGenericCreateStatic+0x7e>
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <xQueueGenericCreateStatic+0x82>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <xQueueGenericCreateStatic+0x84>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10a      	bne.n	8002bc2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb0:	f383 8811 	msr	BASEPRI, r3
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	61fb      	str	r3, [r7, #28]
}
 8002bbe:	bf00      	nop
 8002bc0:	e7fe      	b.n	8002bc0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002bc2:	2350      	movs	r3, #80	; 0x50
 8002bc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2b50      	cmp	r3, #80	; 0x50
 8002bca:	d00a      	beq.n	8002be2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd0:	f383 8811 	msr	BASEPRI, r3
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	f3bf 8f4f 	dsb	sy
 8002bdc:	61bb      	str	r3, [r7, #24]
}
 8002bde:	bf00      	nop
 8002be0:	e7fe      	b.n	8002be0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002be2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00d      	beq.n	8002c0a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002bf6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	68b9      	ldr	r1, [r7, #8]
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 f83f 	bl	8002c88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3730      	adds	r7, #48	; 0x30
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08a      	sub	sp, #40	; 0x28
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10a      	bne.n	8002c3e <xQueueGenericCreate+0x2a>
	__asm volatile
 8002c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	613b      	str	r3, [r7, #16]
}
 8002c3a:	bf00      	nop
 8002c3c:	e7fe      	b.n	8002c3c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	fb02 f303 	mul.w	r3, r2, r3
 8002c46:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	3350      	adds	r3, #80	; 0x50
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f002 f97b 	bl	8004f48 <pvPortMalloc>
 8002c52:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d011      	beq.n	8002c7e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	3350      	adds	r3, #80	; 0x50
 8002c62:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c6c:	79fa      	ldrb	r2, [r7, #7]
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	4613      	mov	r3, r2
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	68b9      	ldr	r1, [r7, #8]
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 f805 	bl	8002c88 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c7e:	69bb      	ldr	r3, [r7, #24]
	}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3720      	adds	r7, #32
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d103      	bne.n	8002ca4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	e002      	b.n	8002caa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	69b8      	ldr	r0, [r7, #24]
 8002cba:	f7ff fecb 	bl	8002a54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08e      	sub	sp, #56	; 0x38
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10a      	bne.n	8002d02 <xQueueGenericSend+0x32>
	__asm volatile
 8002cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf0:	f383 8811 	msr	BASEPRI, r3
 8002cf4:	f3bf 8f6f 	isb	sy
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002cfe:	bf00      	nop
 8002d00:	e7fe      	b.n	8002d00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d103      	bne.n	8002d10 <xQueueGenericSend+0x40>
 8002d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <xQueueGenericSend+0x44>
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <xQueueGenericSend+0x46>
 8002d14:	2300      	movs	r3, #0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10a      	bne.n	8002d30 <xQueueGenericSend+0x60>
	__asm volatile
 8002d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1e:	f383 8811 	msr	BASEPRI, r3
 8002d22:	f3bf 8f6f 	isb	sy
 8002d26:	f3bf 8f4f 	dsb	sy
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d2c:	bf00      	nop
 8002d2e:	e7fe      	b.n	8002d2e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d103      	bne.n	8002d3e <xQueueGenericSend+0x6e>
 8002d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <xQueueGenericSend+0x72>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e000      	b.n	8002d44 <xQueueGenericSend+0x74>
 8002d42:	2300      	movs	r3, #0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10a      	bne.n	8002d5e <xQueueGenericSend+0x8e>
	__asm volatile
 8002d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	623b      	str	r3, [r7, #32]
}
 8002d5a:	bf00      	nop
 8002d5c:	e7fe      	b.n	8002d5c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d5e:	f001 fa79 	bl	8004254 <xTaskGetSchedulerState>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d102      	bne.n	8002d6e <xQueueGenericSend+0x9e>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <xQueueGenericSend+0xa2>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <xQueueGenericSend+0xa4>
 8002d72:	2300      	movs	r3, #0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10a      	bne.n	8002d8e <xQueueGenericSend+0xbe>
	__asm volatile
 8002d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7c:	f383 8811 	msr	BASEPRI, r3
 8002d80:	f3bf 8f6f 	isb	sy
 8002d84:	f3bf 8f4f 	dsb	sy
 8002d88:	61fb      	str	r3, [r7, #28]
}
 8002d8a:	bf00      	nop
 8002d8c:	e7fe      	b.n	8002d8c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d8e:	f001 ffb9 	bl	8004d04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d302      	bcc.n	8002da4 <xQueueGenericSend+0xd4>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d129      	bne.n	8002df8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	68b9      	ldr	r1, [r7, #8]
 8002da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002daa:	f000 fac7 	bl	800333c <prvCopyDataToQueue>
 8002dae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d010      	beq.n	8002dda <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dba:	3324      	adds	r3, #36	; 0x24
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 f88b 	bl	8003ed8 <xTaskRemoveFromEventList>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d013      	beq.n	8002df0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002dc8:	4b3f      	ldr	r3, [pc, #252]	; (8002ec8 <xQueueGenericSend+0x1f8>)
 8002dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	f3bf 8f6f 	isb	sy
 8002dd8:	e00a      	b.n	8002df0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d007      	beq.n	8002df0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002de0:	4b39      	ldr	r3, [pc, #228]	; (8002ec8 <xQueueGenericSend+0x1f8>)
 8002de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002df0:	f001 ffb8 	bl	8004d64 <vPortExitCritical>
				return pdPASS;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e063      	b.n	8002ec0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d103      	bne.n	8002e06 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002dfe:	f001 ffb1 	bl	8004d64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	e05c      	b.n	8002ec0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d106      	bne.n	8002e1a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e0c:	f107 0314 	add.w	r3, r7, #20
 8002e10:	4618      	mov	r0, r3
 8002e12:	f001 f8c5 	bl	8003fa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e16:	2301      	movs	r3, #1
 8002e18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e1a:	f001 ffa3 	bl	8004d64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e1e:	f000 fe37 	bl	8003a90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e22:	f001 ff6f 	bl	8004d04 <vPortEnterCritical>
 8002e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e2c:	b25b      	sxtb	r3, r3
 8002e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e32:	d103      	bne.n	8002e3c <xQueueGenericSend+0x16c>
 8002e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e42:	b25b      	sxtb	r3, r3
 8002e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e48:	d103      	bne.n	8002e52 <xQueueGenericSend+0x182>
 8002e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e52:	f001 ff87 	bl	8004d64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e56:	1d3a      	adds	r2, r7, #4
 8002e58:	f107 0314 	add.w	r3, r7, #20
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f001 f8b4 	bl	8003fcc <xTaskCheckForTimeOut>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d124      	bne.n	8002eb4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e6c:	f000 fb5e 	bl	800352c <prvIsQueueFull>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d018      	beq.n	8002ea8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	3310      	adds	r3, #16
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 ffda 	bl	8003e38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e86:	f000 fae9 	bl	800345c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e8a:	f000 fe0f 	bl	8003aac <xTaskResumeAll>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f47f af7c 	bne.w	8002d8e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002e96:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <xQueueGenericSend+0x1f8>)
 8002e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	f3bf 8f4f 	dsb	sy
 8002ea2:	f3bf 8f6f 	isb	sy
 8002ea6:	e772      	b.n	8002d8e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eaa:	f000 fad7 	bl	800345c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002eae:	f000 fdfd 	bl	8003aac <xTaskResumeAll>
 8002eb2:	e76c      	b.n	8002d8e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002eb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002eb6:	f000 fad1 	bl	800345c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002eba:	f000 fdf7 	bl	8003aac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ebe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3738      	adds	r7, #56	; 0x38
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	e000ed04 	.word	0xe000ed04

08002ecc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b090      	sub	sp, #64	; 0x40
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10a      	bne.n	8002efa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee8:	f383 8811 	msr	BASEPRI, r3
 8002eec:	f3bf 8f6f 	isb	sy
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ef6:	bf00      	nop
 8002ef8:	e7fe      	b.n	8002ef8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d103      	bne.n	8002f08 <xQueueGenericSendFromISR+0x3c>
 8002f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <xQueueGenericSendFromISR+0x40>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <xQueueGenericSendFromISR+0x42>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10a      	bne.n	8002f28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f16:	f383 8811 	msr	BASEPRI, r3
 8002f1a:	f3bf 8f6f 	isb	sy
 8002f1e:	f3bf 8f4f 	dsb	sy
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f24:	bf00      	nop
 8002f26:	e7fe      	b.n	8002f26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d103      	bne.n	8002f36 <xQueueGenericSendFromISR+0x6a>
 8002f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d101      	bne.n	8002f3a <xQueueGenericSendFromISR+0x6e>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <xQueueGenericSendFromISR+0x70>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10a      	bne.n	8002f56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f44:	f383 8811 	msr	BASEPRI, r3
 8002f48:	f3bf 8f6f 	isb	sy
 8002f4c:	f3bf 8f4f 	dsb	sy
 8002f50:	623b      	str	r3, [r7, #32]
}
 8002f52:	bf00      	nop
 8002f54:	e7fe      	b.n	8002f54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f56:	f001 ffb7 	bl	8004ec8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f5a:	f3ef 8211 	mrs	r2, BASEPRI
 8002f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	61fa      	str	r2, [r7, #28]
 8002f70:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f72:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f74:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d302      	bcc.n	8002f88 <xQueueGenericSendFromISR+0xbc>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d12f      	bne.n	8002fe8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f9e:	f000 f9cd 	bl	800333c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002fa2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002faa:	d112      	bne.n	8002fd2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d016      	beq.n	8002fe2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb6:	3324      	adds	r3, #36	; 0x24
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 ff8d 	bl	8003ed8 <xTaskRemoveFromEventList>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00e      	beq.n	8002fe2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00b      	beq.n	8002fe2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e007      	b.n	8002fe2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002fd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	b25a      	sxtb	r2, r3
 8002fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002fe6:	e001      	b.n	8002fec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002ff6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3740      	adds	r7, #64	; 0x40
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08c      	sub	sp, #48	; 0x30
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003010:	2300      	movs	r3, #0
 8003012:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10a      	bne.n	8003034 <xQueueReceive+0x30>
	__asm volatile
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	f383 8811 	msr	BASEPRI, r3
 8003026:	f3bf 8f6f 	isb	sy
 800302a:	f3bf 8f4f 	dsb	sy
 800302e:	623b      	str	r3, [r7, #32]
}
 8003030:	bf00      	nop
 8003032:	e7fe      	b.n	8003032 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d103      	bne.n	8003042 <xQueueReceive+0x3e>
 800303a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <xQueueReceive+0x42>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <xQueueReceive+0x44>
 8003046:	2300      	movs	r3, #0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10a      	bne.n	8003062 <xQueueReceive+0x5e>
	__asm volatile
 800304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003050:	f383 8811 	msr	BASEPRI, r3
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	61fb      	str	r3, [r7, #28]
}
 800305e:	bf00      	nop
 8003060:	e7fe      	b.n	8003060 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003062:	f001 f8f7 	bl	8004254 <xTaskGetSchedulerState>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d102      	bne.n	8003072 <xQueueReceive+0x6e>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <xQueueReceive+0x72>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <xQueueReceive+0x74>
 8003076:	2300      	movs	r3, #0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10a      	bne.n	8003092 <xQueueReceive+0x8e>
	__asm volatile
 800307c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003080:	f383 8811 	msr	BASEPRI, r3
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	61bb      	str	r3, [r7, #24]
}
 800308e:	bf00      	nop
 8003090:	e7fe      	b.n	8003090 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003092:	f001 fe37 	bl	8004d04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d01f      	beq.n	80030e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030a2:	68b9      	ldr	r1, [r7, #8]
 80030a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030a6:	f000 f9b3 	bl	8003410 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	1e5a      	subs	r2, r3, #1
 80030ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00f      	beq.n	80030da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030bc:	3310      	adds	r3, #16
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 ff0a 	bl	8003ed8 <xTaskRemoveFromEventList>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d007      	beq.n	80030da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80030ca:	4b3d      	ldr	r3, [pc, #244]	; (80031c0 <xQueueReceive+0x1bc>)
 80030cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	f3bf 8f4f 	dsb	sy
 80030d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80030da:	f001 fe43 	bl	8004d64 <vPortExitCritical>
				return pdPASS;
 80030de:	2301      	movs	r3, #1
 80030e0:	e069      	b.n	80031b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d103      	bne.n	80030f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030e8:	f001 fe3c 	bl	8004d64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80030ec:	2300      	movs	r3, #0
 80030ee:	e062      	b.n	80031b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d106      	bne.n	8003104 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030f6:	f107 0310 	add.w	r3, r7, #16
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 ff50 	bl	8003fa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003100:	2301      	movs	r3, #1
 8003102:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003104:	f001 fe2e 	bl	8004d64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003108:	f000 fcc2 	bl	8003a90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800310c:	f001 fdfa 	bl	8004d04 <vPortEnterCritical>
 8003110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003112:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003116:	b25b      	sxtb	r3, r3
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311c:	d103      	bne.n	8003126 <xQueueReceive+0x122>
 800311e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800312c:	b25b      	sxtb	r3, r3
 800312e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003132:	d103      	bne.n	800313c <xQueueReceive+0x138>
 8003134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800313c:	f001 fe12 	bl	8004d64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003140:	1d3a      	adds	r2, r7, #4
 8003142:	f107 0310 	add.w	r3, r7, #16
 8003146:	4611      	mov	r1, r2
 8003148:	4618      	mov	r0, r3
 800314a:	f000 ff3f 	bl	8003fcc <xTaskCheckForTimeOut>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d123      	bne.n	800319c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003156:	f000 f9d3 	bl	8003500 <prvIsQueueEmpty>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d017      	beq.n	8003190 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003162:	3324      	adds	r3, #36	; 0x24
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	4611      	mov	r1, r2
 8003168:	4618      	mov	r0, r3
 800316a:	f000 fe65 	bl	8003e38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800316e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003170:	f000 f974 	bl	800345c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003174:	f000 fc9a 	bl	8003aac <xTaskResumeAll>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d189      	bne.n	8003092 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800317e:	4b10      	ldr	r3, [pc, #64]	; (80031c0 <xQueueReceive+0x1bc>)
 8003180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	f3bf 8f4f 	dsb	sy
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	e780      	b.n	8003092 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003192:	f000 f963 	bl	800345c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003196:	f000 fc89 	bl	8003aac <xTaskResumeAll>
 800319a:	e77a      	b.n	8003092 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800319c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800319e:	f000 f95d 	bl	800345c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031a2:	f000 fc83 	bl	8003aac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80031a8:	f000 f9aa 	bl	8003500 <prvIsQueueEmpty>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f43f af6f 	beq.w	8003092 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80031b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3730      	adds	r7, #48	; 0x30
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	e000ed04 	.word	0xe000ed04

080031c4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08e      	sub	sp, #56	; 0x38
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10a      	bne.n	80031f0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80031da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031de:	f383 8811 	msr	BASEPRI, r3
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	f3bf 8f4f 	dsb	sy
 80031ea:	623b      	str	r3, [r7, #32]
}
 80031ec:	bf00      	nop
 80031ee:	e7fe      	b.n	80031ee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d103      	bne.n	80031fe <xQueueReceiveFromISR+0x3a>
 80031f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <xQueueReceiveFromISR+0x3e>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <xQueueReceiveFromISR+0x40>
 8003202:	2300      	movs	r3, #0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10a      	bne.n	800321e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320c:	f383 8811 	msr	BASEPRI, r3
 8003210:	f3bf 8f6f 	isb	sy
 8003214:	f3bf 8f4f 	dsb	sy
 8003218:	61fb      	str	r3, [r7, #28]
}
 800321a:	bf00      	nop
 800321c:	e7fe      	b.n	800321c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800321e:	f001 fe53 	bl	8004ec8 <vPortValidateInterruptPriority>
	__asm volatile
 8003222:	f3ef 8211 	mrs	r2, BASEPRI
 8003226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	61ba      	str	r2, [r7, #24]
 8003238:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800323a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800323c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800323e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003246:	2b00      	cmp	r3, #0
 8003248:	d02f      	beq.n	80032aa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003258:	f000 f8da 	bl	8003410 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800325c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325e:	1e5a      	subs	r2, r3, #1
 8003260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003262:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003264:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326c:	d112      	bne.n	8003294 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800326e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d016      	beq.n	80032a4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003278:	3310      	adds	r3, #16
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fe2c 	bl	8003ed8 <xTaskRemoveFromEventList>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00e      	beq.n	80032a4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00b      	beq.n	80032a4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	e007      	b.n	80032a4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003298:	3301      	adds	r3, #1
 800329a:	b2db      	uxtb	r3, r3
 800329c:	b25a      	sxtb	r2, r3
 800329e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80032a4:	2301      	movs	r3, #1
 80032a6:	637b      	str	r3, [r7, #52]	; 0x34
 80032a8:	e001      	b.n	80032ae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80032aa:	2300      	movs	r3, #0
 80032ac:	637b      	str	r3, [r7, #52]	; 0x34
 80032ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f383 8811 	msr	BASEPRI, r3
}
 80032b8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3738      	adds	r7, #56	; 0x38
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10a      	bne.n	80032e8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80032d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d6:	f383 8811 	msr	BASEPRI, r3
 80032da:	f3bf 8f6f 	isb	sy
 80032de:	f3bf 8f4f 	dsb	sy
 80032e2:	60bb      	str	r3, [r7, #8]
}
 80032e4:	bf00      	nop
 80032e6:	e7fe      	b.n	80032e6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80032e8:	f001 fd0c 	bl	8004d04 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80032f2:	f001 fd37 	bl	8004d64 <vPortExitCritical>

	return uxReturn;
 80032f6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8003300:	b480      	push	{r7}
 8003302:	b087      	sub	sp, #28
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10a      	bne.n	8003328 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8003312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003316:	f383 8811 	msr	BASEPRI, r3
 800331a:	f3bf 8f6f 	isb	sy
 800331e:	f3bf 8f4f 	dsb	sy
 8003322:	60fb      	str	r3, [r7, #12]
}
 8003324:	bf00      	nop
 8003326:	e7fe      	b.n	8003326 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800332e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003330:	4618      	mov	r0, r3
 8003332:	371c      	adds	r7, #28
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003350:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10d      	bne.n	8003376 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d14d      	bne.n	80033fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	4618      	mov	r0, r3
 8003368:	f000 ff92 	bl	8004290 <xTaskPriorityDisinherit>
 800336c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	e043      	b.n	80033fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d119      	bne.n	80033b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6858      	ldr	r0, [r3, #4]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	461a      	mov	r2, r3
 8003386:	68b9      	ldr	r1, [r7, #8]
 8003388:	f001 fff2 	bl	8005370 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	441a      	add	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	685a      	ldr	r2, [r3, #4]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d32b      	bcc.n	80033fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	e026      	b.n	80033fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	68d8      	ldr	r0, [r3, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	461a      	mov	r2, r3
 80033ba:	68b9      	ldr	r1, [r7, #8]
 80033bc:	f001 ffd8 	bl	8005370 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	425b      	negs	r3, r3
 80033ca:	441a      	add	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d207      	bcs.n	80033ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	425b      	negs	r3, r3
 80033e6:	441a      	add	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d105      	bne.n	80033fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d002      	beq.n	80033fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003406:	697b      	ldr	r3, [r7, #20]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	2b00      	cmp	r3, #0
 8003420:	d018      	beq.n	8003454 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	441a      	add	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	429a      	cmp	r2, r3
 800343a:	d303      	bcc.n	8003444 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68d9      	ldr	r1, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	461a      	mov	r2, r3
 800344e:	6838      	ldr	r0, [r7, #0]
 8003450:	f001 ff8e 	bl	8005370 <memcpy>
	}
}
 8003454:	bf00      	nop
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003464:	f001 fc4e 	bl	8004d04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800346e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003470:	e011      	b.n	8003496 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	2b00      	cmp	r3, #0
 8003478:	d012      	beq.n	80034a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3324      	adds	r3, #36	; 0x24
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fd2a 	bl	8003ed8 <xTaskRemoveFromEventList>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800348a:	f000 fe01 	bl	8004090 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	3b01      	subs	r3, #1
 8003492:	b2db      	uxtb	r3, r3
 8003494:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800349a:	2b00      	cmp	r3, #0
 800349c:	dce9      	bgt.n	8003472 <prvUnlockQueue+0x16>
 800349e:	e000      	b.n	80034a2 <prvUnlockQueue+0x46>
					break;
 80034a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	22ff      	movs	r2, #255	; 0xff
 80034a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80034aa:	f001 fc5b 	bl	8004d64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034ae:	f001 fc29 	bl	8004d04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034ba:	e011      	b.n	80034e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d012      	beq.n	80034ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3310      	adds	r3, #16
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fd05 	bl	8003ed8 <xTaskRemoveFromEventList>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034d4:	f000 fddc 	bl	8004090 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034d8:	7bbb      	ldrb	r3, [r7, #14]
 80034da:	3b01      	subs	r3, #1
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	dce9      	bgt.n	80034bc <prvUnlockQueue+0x60>
 80034e8:	e000      	b.n	80034ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80034ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	22ff      	movs	r2, #255	; 0xff
 80034f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80034f4:	f001 fc36 	bl	8004d64 <vPortExitCritical>
}
 80034f8:	bf00      	nop
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003508:	f001 fbfc 	bl	8004d04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003510:	2b00      	cmp	r3, #0
 8003512:	d102      	bne.n	800351a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003514:	2301      	movs	r3, #1
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	e001      	b.n	800351e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800351e:	f001 fc21 	bl	8004d64 <vPortExitCritical>

	return xReturn;
 8003522:	68fb      	ldr	r3, [r7, #12]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003534:	f001 fbe6 	bl	8004d04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003540:	429a      	cmp	r2, r3
 8003542:	d102      	bne.n	800354a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003544:	2301      	movs	r3, #1
 8003546:	60fb      	str	r3, [r7, #12]
 8003548:	e001      	b.n	800354e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800354e:	f001 fc09 	bl	8004d64 <vPortExitCritical>

	return xReturn;
 8003552:	68fb      	ldr	r3, [r7, #12]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	e014      	b.n	8003596 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800356c:	4a0f      	ldr	r2, [pc, #60]	; (80035ac <vQueueAddToRegistry+0x50>)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10b      	bne.n	8003590 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003578:	490c      	ldr	r1, [pc, #48]	; (80035ac <vQueueAddToRegistry+0x50>)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003582:	4a0a      	ldr	r2, [pc, #40]	; (80035ac <vQueueAddToRegistry+0x50>)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4413      	add	r3, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800358e:	e006      	b.n	800359e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	3301      	adds	r3, #1
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2b07      	cmp	r3, #7
 800359a:	d9e7      	bls.n	800356c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	200008d4 	.word	0x200008d4

080035b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80035c0:	f001 fba0 	bl	8004d04 <vPortEnterCritical>
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035ca:	b25b      	sxtb	r3, r3
 80035cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d0:	d103      	bne.n	80035da <vQueueWaitForMessageRestricted+0x2a>
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035e0:	b25b      	sxtb	r3, r3
 80035e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e6:	d103      	bne.n	80035f0 <vQueueWaitForMessageRestricted+0x40>
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035f0:	f001 fbb8 	bl	8004d64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d106      	bne.n	800360a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	3324      	adds	r3, #36	; 0x24
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	68b9      	ldr	r1, [r7, #8]
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fc3b 	bl	8003e80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800360a:	6978      	ldr	r0, [r7, #20]
 800360c:	f7ff ff26 	bl	800345c <prvUnlockQueue>
	}
 8003610:	bf00      	nop
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08e      	sub	sp, #56	; 0x38
 800361c:	af04      	add	r7, sp, #16
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10a      	bne.n	8003642 <xTaskCreateStatic+0x2a>
	__asm volatile
 800362c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003630:	f383 8811 	msr	BASEPRI, r3
 8003634:	f3bf 8f6f 	isb	sy
 8003638:	f3bf 8f4f 	dsb	sy
 800363c:	623b      	str	r3, [r7, #32]
}
 800363e:	bf00      	nop
 8003640:	e7fe      	b.n	8003640 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10a      	bne.n	800365e <xTaskCreateStatic+0x46>
	__asm volatile
 8003648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364c:	f383 8811 	msr	BASEPRI, r3
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	61fb      	str	r3, [r7, #28]
}
 800365a:	bf00      	nop
 800365c:	e7fe      	b.n	800365c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800365e:	235c      	movs	r3, #92	; 0x5c
 8003660:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	2b5c      	cmp	r3, #92	; 0x5c
 8003666:	d00a      	beq.n	800367e <xTaskCreateStatic+0x66>
	__asm volatile
 8003668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	61bb      	str	r3, [r7, #24]
}
 800367a:	bf00      	nop
 800367c:	e7fe      	b.n	800367c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800367e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003682:	2b00      	cmp	r3, #0
 8003684:	d01e      	beq.n	80036c4 <xTaskCreateStatic+0xac>
 8003686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003688:	2b00      	cmp	r3, #0
 800368a:	d01b      	beq.n	80036c4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800368c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003694:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	2202      	movs	r2, #2
 800369a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800369e:	2300      	movs	r3, #0
 80036a0:	9303      	str	r3, [sp, #12]
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	9302      	str	r3, [sp, #8]
 80036a6:	f107 0314 	add.w	r3, r7, #20
 80036aa:	9301      	str	r3, [sp, #4]
 80036ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 f850 	bl	800375c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036be:	f000 f8dd 	bl	800387c <prvAddNewTaskToReadyList>
 80036c2:	e001      	b.n	80036c8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036c8:	697b      	ldr	r3, [r7, #20]
	}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3728      	adds	r7, #40	; 0x28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b08c      	sub	sp, #48	; 0x30
 80036d6:	af04      	add	r7, sp, #16
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	603b      	str	r3, [r7, #0]
 80036de:	4613      	mov	r3, r2
 80036e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036e2:	88fb      	ldrh	r3, [r7, #6]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4618      	mov	r0, r3
 80036e8:	f001 fc2e 	bl	8004f48 <pvPortMalloc>
 80036ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00e      	beq.n	8003712 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036f4:	205c      	movs	r0, #92	; 0x5c
 80036f6:	f001 fc27 	bl	8004f48 <pvPortMalloc>
 80036fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	631a      	str	r2, [r3, #48]	; 0x30
 8003708:	e005      	b.n	8003716 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800370a:	6978      	ldr	r0, [r7, #20]
 800370c:	f001 fce8 	bl	80050e0 <vPortFree>
 8003710:	e001      	b.n	8003716 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003712:	2300      	movs	r3, #0
 8003714:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d017      	beq.n	800374c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003724:	88fa      	ldrh	r2, [r7, #6]
 8003726:	2300      	movs	r3, #0
 8003728:	9303      	str	r3, [sp, #12]
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	9302      	str	r3, [sp, #8]
 800372e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003730:	9301      	str	r3, [sp, #4]
 8003732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 f80e 	bl	800375c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003740:	69f8      	ldr	r0, [r7, #28]
 8003742:	f000 f89b 	bl	800387c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003746:	2301      	movs	r3, #1
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	e002      	b.n	8003752 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800374c:	f04f 33ff 	mov.w	r3, #4294967295
 8003750:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003752:	69bb      	ldr	r3, [r7, #24]
	}
 8003754:	4618      	mov	r0, r3
 8003756:	3720      	adds	r7, #32
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800376a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	461a      	mov	r2, r3
 8003774:	21a5      	movs	r1, #165	; 0xa5
 8003776:	f001 fe09 	bl	800538c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800377a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003784:	3b01      	subs	r3, #1
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f023 0307 	bic.w	r3, r3, #7
 8003792:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800379e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	617b      	str	r3, [r7, #20]
}
 80037b0:	bf00      	nop
 80037b2:	e7fe      	b.n	80037b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d01f      	beq.n	80037fa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037ba:	2300      	movs	r3, #0
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	e012      	b.n	80037e6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	4413      	add	r3, r2
 80037c6:	7819      	ldrb	r1, [r3, #0]
 80037c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	4413      	add	r3, r2
 80037ce:	3334      	adds	r3, #52	; 0x34
 80037d0:	460a      	mov	r2, r1
 80037d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	4413      	add	r3, r2
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d006      	beq.n	80037ee <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	3301      	adds	r3, #1
 80037e4:	61fb      	str	r3, [r7, #28]
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	2b0f      	cmp	r3, #15
 80037ea:	d9e9      	bls.n	80037c0 <prvInitialiseNewTask+0x64>
 80037ec:	e000      	b.n	80037f0 <prvInitialiseNewTask+0x94>
			{
				break;
 80037ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80037f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037f8:	e003      	b.n	8003802 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003804:	2b37      	cmp	r3, #55	; 0x37
 8003806:	d901      	bls.n	800380c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003808:	2337      	movs	r3, #55	; 0x37
 800380a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003810:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003814:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003816:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381a:	2200      	movs	r2, #0
 800381c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003820:	3304      	adds	r3, #4
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff f882 	bl	800292c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382a:	3318      	adds	r3, #24
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff f87d 	bl	800292c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003836:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003840:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003846:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384a:	2200      	movs	r2, #0
 800384c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	68f9      	ldr	r1, [r7, #12]
 800385a:	69b8      	ldr	r0, [r7, #24]
 800385c:	f001 f928 	bl	8004ab0 <pxPortInitialiseStack>
 8003860:	4602      	mov	r2, r0
 8003862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003864:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800386c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003870:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003872:	bf00      	nop
 8003874:	3720      	adds	r7, #32
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003884:	f001 fa3e 	bl	8004d04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003888:	4b2d      	ldr	r3, [pc, #180]	; (8003940 <prvAddNewTaskToReadyList+0xc4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3301      	adds	r3, #1
 800388e:	4a2c      	ldr	r2, [pc, #176]	; (8003940 <prvAddNewTaskToReadyList+0xc4>)
 8003890:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003892:	4b2c      	ldr	r3, [pc, #176]	; (8003944 <prvAddNewTaskToReadyList+0xc8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800389a:	4a2a      	ldr	r2, [pc, #168]	; (8003944 <prvAddNewTaskToReadyList+0xc8>)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038a0:	4b27      	ldr	r3, [pc, #156]	; (8003940 <prvAddNewTaskToReadyList+0xc4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d110      	bne.n	80038ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038a8:	f000 fc16 	bl	80040d8 <prvInitialiseTaskLists>
 80038ac:	e00d      	b.n	80038ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038ae:	4b26      	ldr	r3, [pc, #152]	; (8003948 <prvAddNewTaskToReadyList+0xcc>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038b6:	4b23      	ldr	r3, [pc, #140]	; (8003944 <prvAddNewTaskToReadyList+0xc8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d802      	bhi.n	80038ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038c4:	4a1f      	ldr	r2, [pc, #124]	; (8003944 <prvAddNewTaskToReadyList+0xc8>)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038ca:	4b20      	ldr	r3, [pc, #128]	; (800394c <prvAddNewTaskToReadyList+0xd0>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	3301      	adds	r3, #1
 80038d0:	4a1e      	ldr	r2, [pc, #120]	; (800394c <prvAddNewTaskToReadyList+0xd0>)
 80038d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80038d4:	4b1d      	ldr	r3, [pc, #116]	; (800394c <prvAddNewTaskToReadyList+0xd0>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e0:	4b1b      	ldr	r3, [pc, #108]	; (8003950 <prvAddNewTaskToReadyList+0xd4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d903      	bls.n	80038f0 <prvAddNewTaskToReadyList+0x74>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	4a18      	ldr	r2, [pc, #96]	; (8003950 <prvAddNewTaskToReadyList+0xd4>)
 80038ee:	6013      	str	r3, [r2, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4a15      	ldr	r2, [pc, #84]	; (8003954 <prvAddNewTaskToReadyList+0xd8>)
 80038fe:	441a      	add	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3304      	adds	r3, #4
 8003904:	4619      	mov	r1, r3
 8003906:	4610      	mov	r0, r2
 8003908:	f7ff f81d 	bl	8002946 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800390c:	f001 fa2a 	bl	8004d64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003910:	4b0d      	ldr	r3, [pc, #52]	; (8003948 <prvAddNewTaskToReadyList+0xcc>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d00e      	beq.n	8003936 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003918:	4b0a      	ldr	r3, [pc, #40]	; (8003944 <prvAddNewTaskToReadyList+0xc8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	429a      	cmp	r2, r3
 8003924:	d207      	bcs.n	8003936 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003926:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <prvAddNewTaskToReadyList+0xdc>)
 8003928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000de8 	.word	0x20000de8
 8003944:	20000914 	.word	0x20000914
 8003948:	20000df4 	.word	0x20000df4
 800394c:	20000e04 	.word	0x20000e04
 8003950:	20000df0 	.word	0x20000df0
 8003954:	20000918 	.word	0x20000918
 8003958:	e000ed04 	.word	0xe000ed04

0800395c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d017      	beq.n	800399e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800396e:	4b13      	ldr	r3, [pc, #76]	; (80039bc <vTaskDelay+0x60>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <vTaskDelay+0x30>
	__asm volatile
 8003976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	60bb      	str	r3, [r7, #8]
}
 8003988:	bf00      	nop
 800398a:	e7fe      	b.n	800398a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800398c:	f000 f880 	bl	8003a90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003990:	2100      	movs	r1, #0
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fcea 	bl	800436c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003998:	f000 f888 	bl	8003aac <xTaskResumeAll>
 800399c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d107      	bne.n	80039b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <vTaskDelay+0x64>)
 80039a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039b4:	bf00      	nop
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	20000e10 	.word	0x20000e10
 80039c0:	e000ed04 	.word	0xe000ed04

080039c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b08a      	sub	sp, #40	; 0x28
 80039c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039d2:	463a      	mov	r2, r7
 80039d4:	1d39      	adds	r1, r7, #4
 80039d6:	f107 0308 	add.w	r3, r7, #8
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fe ff52 	bl	8002884 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039e0:	6839      	ldr	r1, [r7, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	9202      	str	r2, [sp, #8]
 80039e8:	9301      	str	r3, [sp, #4]
 80039ea:	2300      	movs	r3, #0
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	2300      	movs	r3, #0
 80039f0:	460a      	mov	r2, r1
 80039f2:	4921      	ldr	r1, [pc, #132]	; (8003a78 <vTaskStartScheduler+0xb4>)
 80039f4:	4821      	ldr	r0, [pc, #132]	; (8003a7c <vTaskStartScheduler+0xb8>)
 80039f6:	f7ff fe0f 	bl	8003618 <xTaskCreateStatic>
 80039fa:	4603      	mov	r3, r0
 80039fc:	4a20      	ldr	r2, [pc, #128]	; (8003a80 <vTaskStartScheduler+0xbc>)
 80039fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a00:	4b1f      	ldr	r3, [pc, #124]	; (8003a80 <vTaskStartScheduler+0xbc>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	e001      	b.n	8003a12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d102      	bne.n	8003a1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a18:	f000 fcfc 	bl	8004414 <xTimerCreateTimerTask>
 8003a1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d116      	bne.n	8003a52 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	613b      	str	r3, [r7, #16]
}
 8003a36:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a38:	4b12      	ldr	r3, [pc, #72]	; (8003a84 <vTaskStartScheduler+0xc0>)
 8003a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a40:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <vTaskStartScheduler+0xc4>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a46:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <vTaskStartScheduler+0xc8>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a4c:	f001 f8b8 	bl	8004bc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a50:	e00e      	b.n	8003a70 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a58:	d10a      	bne.n	8003a70 <vTaskStartScheduler+0xac>
	__asm volatile
 8003a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a5e:	f383 8811 	msr	BASEPRI, r3
 8003a62:	f3bf 8f6f 	isb	sy
 8003a66:	f3bf 8f4f 	dsb	sy
 8003a6a:	60fb      	str	r3, [r7, #12]
}
 8003a6c:	bf00      	nop
 8003a6e:	e7fe      	b.n	8003a6e <vTaskStartScheduler+0xaa>
}
 8003a70:	bf00      	nop
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	080081bc 	.word	0x080081bc
 8003a7c:	080040a9 	.word	0x080040a9
 8003a80:	20000e0c 	.word	0x20000e0c
 8003a84:	20000e08 	.word	0x20000e08
 8003a88:	20000df4 	.word	0x20000df4
 8003a8c:	20000dec 	.word	0x20000dec

08003a90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003a94:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <vTaskSuspendAll+0x18>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	4a03      	ldr	r2, [pc, #12]	; (8003aa8 <vTaskSuspendAll+0x18>)
 8003a9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003a9e:	bf00      	nop
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	20000e10 	.word	0x20000e10

08003aac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003aba:	4b42      	ldr	r3, [pc, #264]	; (8003bc4 <xTaskResumeAll+0x118>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d10a      	bne.n	8003ad8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac6:	f383 8811 	msr	BASEPRI, r3
 8003aca:	f3bf 8f6f 	isb	sy
 8003ace:	f3bf 8f4f 	dsb	sy
 8003ad2:	603b      	str	r3, [r7, #0]
}
 8003ad4:	bf00      	nop
 8003ad6:	e7fe      	b.n	8003ad6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003ad8:	f001 f914 	bl	8004d04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003adc:	4b39      	ldr	r3, [pc, #228]	; (8003bc4 <xTaskResumeAll+0x118>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	4a38      	ldr	r2, [pc, #224]	; (8003bc4 <xTaskResumeAll+0x118>)
 8003ae4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ae6:	4b37      	ldr	r3, [pc, #220]	; (8003bc4 <xTaskResumeAll+0x118>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d162      	bne.n	8003bb4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003aee:	4b36      	ldr	r3, [pc, #216]	; (8003bc8 <xTaskResumeAll+0x11c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d05e      	beq.n	8003bb4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003af6:	e02f      	b.n	8003b58 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003af8:	4b34      	ldr	r3, [pc, #208]	; (8003bcc <xTaskResumeAll+0x120>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	3318      	adds	r3, #24
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fe ff7b 	bl	8002a00 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fe ff76 	bl	8002a00 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b18:	4b2d      	ldr	r3, [pc, #180]	; (8003bd0 <xTaskResumeAll+0x124>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d903      	bls.n	8003b28 <xTaskResumeAll+0x7c>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	4a2a      	ldr	r2, [pc, #168]	; (8003bd0 <xTaskResumeAll+0x124>)
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4a27      	ldr	r2, [pc, #156]	; (8003bd4 <xTaskResumeAll+0x128>)
 8003b36:	441a      	add	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4610      	mov	r0, r2
 8003b40:	f7fe ff01 	bl	8002946 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b48:	4b23      	ldr	r3, [pc, #140]	; (8003bd8 <xTaskResumeAll+0x12c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d302      	bcc.n	8003b58 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003b52:	4b22      	ldr	r3, [pc, #136]	; (8003bdc <xTaskResumeAll+0x130>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b58:	4b1c      	ldr	r3, [pc, #112]	; (8003bcc <xTaskResumeAll+0x120>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1cb      	bne.n	8003af8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b66:	f000 fb55 	bl	8004214 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b6a:	4b1d      	ldr	r3, [pc, #116]	; (8003be0 <xTaskResumeAll+0x134>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d010      	beq.n	8003b98 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b76:	f000 f847 	bl	8003c08 <xTaskIncrementTick>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003b80:	4b16      	ldr	r3, [pc, #88]	; (8003bdc <xTaskResumeAll+0x130>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f1      	bne.n	8003b76 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003b92:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <xTaskResumeAll+0x134>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003b98:	4b10      	ldr	r3, [pc, #64]	; (8003bdc <xTaskResumeAll+0x130>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d009      	beq.n	8003bb4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <xTaskResumeAll+0x138>)
 8003ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bb4:	f001 f8d6 	bl	8004d64 <vPortExitCritical>

	return xAlreadyYielded;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000e10 	.word	0x20000e10
 8003bc8:	20000de8 	.word	0x20000de8
 8003bcc:	20000da8 	.word	0x20000da8
 8003bd0:	20000df0 	.word	0x20000df0
 8003bd4:	20000918 	.word	0x20000918
 8003bd8:	20000914 	.word	0x20000914
 8003bdc:	20000dfc 	.word	0x20000dfc
 8003be0:	20000df8 	.word	0x20000df8
 8003be4:	e000ed04 	.word	0xe000ed04

08003be8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003bee:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <xTaskGetTickCount+0x1c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003bf4:	687b      	ldr	r3, [r7, #4]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	20000dec 	.word	0x20000dec

08003c08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c12:	4b4f      	ldr	r3, [pc, #316]	; (8003d50 <xTaskIncrementTick+0x148>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f040 808f 	bne.w	8003d3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c1c:	4b4d      	ldr	r3, [pc, #308]	; (8003d54 <xTaskIncrementTick+0x14c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	3301      	adds	r3, #1
 8003c22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c24:	4a4b      	ldr	r2, [pc, #300]	; (8003d54 <xTaskIncrementTick+0x14c>)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d120      	bne.n	8003c72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c30:	4b49      	ldr	r3, [pc, #292]	; (8003d58 <xTaskIncrementTick+0x150>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <xTaskIncrementTick+0x48>
	__asm volatile
 8003c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3e:	f383 8811 	msr	BASEPRI, r3
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	603b      	str	r3, [r7, #0]
}
 8003c4c:	bf00      	nop
 8003c4e:	e7fe      	b.n	8003c4e <xTaskIncrementTick+0x46>
 8003c50:	4b41      	ldr	r3, [pc, #260]	; (8003d58 <xTaskIncrementTick+0x150>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60fb      	str	r3, [r7, #12]
 8003c56:	4b41      	ldr	r3, [pc, #260]	; (8003d5c <xTaskIncrementTick+0x154>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a3f      	ldr	r2, [pc, #252]	; (8003d58 <xTaskIncrementTick+0x150>)
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	4a3f      	ldr	r2, [pc, #252]	; (8003d5c <xTaskIncrementTick+0x154>)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	4b3e      	ldr	r3, [pc, #248]	; (8003d60 <xTaskIncrementTick+0x158>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	4a3d      	ldr	r2, [pc, #244]	; (8003d60 <xTaskIncrementTick+0x158>)
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	f000 fad1 	bl	8004214 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c72:	4b3c      	ldr	r3, [pc, #240]	; (8003d64 <xTaskIncrementTick+0x15c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d349      	bcc.n	8003d10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c7c:	4b36      	ldr	r3, [pc, #216]	; (8003d58 <xTaskIncrementTick+0x150>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d104      	bne.n	8003c90 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c86:	4b37      	ldr	r3, [pc, #220]	; (8003d64 <xTaskIncrementTick+0x15c>)
 8003c88:	f04f 32ff 	mov.w	r2, #4294967295
 8003c8c:	601a      	str	r2, [r3, #0]
					break;
 8003c8e:	e03f      	b.n	8003d10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c90:	4b31      	ldr	r3, [pc, #196]	; (8003d58 <xTaskIncrementTick+0x150>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d203      	bcs.n	8003cb0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ca8:	4a2e      	ldr	r2, [pc, #184]	; (8003d64 <xTaskIncrementTick+0x15c>)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003cae:	e02f      	b.n	8003d10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7fe fea3 	bl	8002a00 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d004      	beq.n	8003ccc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	3318      	adds	r3, #24
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fe fe9a 	bl	8002a00 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd0:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <xTaskIncrementTick+0x160>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d903      	bls.n	8003ce0 <xTaskIncrementTick+0xd8>
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	4a22      	ldr	r2, [pc, #136]	; (8003d68 <xTaskIncrementTick+0x160>)
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4a1f      	ldr	r2, [pc, #124]	; (8003d6c <xTaskIncrementTick+0x164>)
 8003cee:	441a      	add	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	f7fe fe25 	bl	8002946 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d00:	4b1b      	ldr	r3, [pc, #108]	; (8003d70 <xTaskIncrementTick+0x168>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d3b8      	bcc.n	8003c7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d0e:	e7b5      	b.n	8003c7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d10:	4b17      	ldr	r3, [pc, #92]	; (8003d70 <xTaskIncrementTick+0x168>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d16:	4915      	ldr	r1, [pc, #84]	; (8003d6c <xTaskIncrementTick+0x164>)
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d901      	bls.n	8003d2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d2c:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <xTaskIncrementTick+0x16c>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d007      	beq.n	8003d44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003d34:	2301      	movs	r3, #1
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	e004      	b.n	8003d44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d3a:	4b0f      	ldr	r3, [pc, #60]	; (8003d78 <xTaskIncrementTick+0x170>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	4a0d      	ldr	r2, [pc, #52]	; (8003d78 <xTaskIncrementTick+0x170>)
 8003d42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d44:	697b      	ldr	r3, [r7, #20]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20000e10 	.word	0x20000e10
 8003d54:	20000dec 	.word	0x20000dec
 8003d58:	20000da0 	.word	0x20000da0
 8003d5c:	20000da4 	.word	0x20000da4
 8003d60:	20000e00 	.word	0x20000e00
 8003d64:	20000e08 	.word	0x20000e08
 8003d68:	20000df0 	.word	0x20000df0
 8003d6c:	20000918 	.word	0x20000918
 8003d70:	20000914 	.word	0x20000914
 8003d74:	20000dfc 	.word	0x20000dfc
 8003d78:	20000df8 	.word	0x20000df8

08003d7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003d82:	4b28      	ldr	r3, [pc, #160]	; (8003e24 <vTaskSwitchContext+0xa8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003d8a:	4b27      	ldr	r3, [pc, #156]	; (8003e28 <vTaskSwitchContext+0xac>)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003d90:	e041      	b.n	8003e16 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003d92:	4b25      	ldr	r3, [pc, #148]	; (8003e28 <vTaskSwitchContext+0xac>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d98:	4b24      	ldr	r3, [pc, #144]	; (8003e2c <vTaskSwitchContext+0xb0>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	e010      	b.n	8003dc2 <vTaskSwitchContext+0x46>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10a      	bne.n	8003dbc <vTaskSwitchContext+0x40>
	__asm volatile
 8003da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	607b      	str	r3, [r7, #4]
}
 8003db8:	bf00      	nop
 8003dba:	e7fe      	b.n	8003dba <vTaskSwitchContext+0x3e>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	491b      	ldr	r1, [pc, #108]	; (8003e30 <vTaskSwitchContext+0xb4>)
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	440b      	add	r3, r1
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0e4      	beq.n	8003da0 <vTaskSwitchContext+0x24>
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4a13      	ldr	r2, [pc, #76]	; (8003e30 <vTaskSwitchContext+0xb4>)
 8003de2:	4413      	add	r3, r2
 8003de4:	60bb      	str	r3, [r7, #8]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	605a      	str	r2, [r3, #4]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	3308      	adds	r3, #8
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d104      	bne.n	8003e06 <vTaskSwitchContext+0x8a>
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <vTaskSwitchContext+0xb8>)
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	4a06      	ldr	r2, [pc, #24]	; (8003e2c <vTaskSwitchContext+0xb0>)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6013      	str	r3, [r2, #0]
}
 8003e16:	bf00      	nop
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	20000e10 	.word	0x20000e10
 8003e28:	20000dfc 	.word	0x20000dfc
 8003e2c:	20000df0 	.word	0x20000df0
 8003e30:	20000918 	.word	0x20000918
 8003e34:	20000914 	.word	0x20000914

08003e38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b084      	sub	sp, #16
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10a      	bne.n	8003e5e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	60fb      	str	r3, [r7, #12]
}
 8003e5a:	bf00      	nop
 8003e5c:	e7fe      	b.n	8003e5c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e5e:	4b07      	ldr	r3, [pc, #28]	; (8003e7c <vTaskPlaceOnEventList+0x44>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3318      	adds	r3, #24
 8003e64:	4619      	mov	r1, r3
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fe fd91 	bl	800298e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	6838      	ldr	r0, [r7, #0]
 8003e70:	f000 fa7c 	bl	800436c <prvAddCurrentTaskToDelayedList>
}
 8003e74:	bf00      	nop
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20000914 	.word	0x20000914

08003e80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10a      	bne.n	8003ea8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	617b      	str	r3, [r7, #20]
}
 8003ea4:	bf00      	nop
 8003ea6:	e7fe      	b.n	8003ea6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ea8:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <vTaskPlaceOnEventListRestricted+0x54>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3318      	adds	r3, #24
 8003eae:	4619      	mov	r1, r3
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f7fe fd48 	bl	8002946 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	68b8      	ldr	r0, [r7, #8]
 8003ec6:	f000 fa51 	bl	800436c <prvAddCurrentTaskToDelayedList>
	}
 8003eca:	bf00      	nop
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20000914 	.word	0x20000914

08003ed8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10a      	bne.n	8003f04 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	60fb      	str	r3, [r7, #12]
}
 8003f00:	bf00      	nop
 8003f02:	e7fe      	b.n	8003f02 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	3318      	adds	r3, #24
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fe fd79 	bl	8002a00 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f0e:	4b1e      	ldr	r3, [pc, #120]	; (8003f88 <xTaskRemoveFromEventList+0xb0>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d11d      	bne.n	8003f52 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fe fd70 	bl	8002a00 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f24:	4b19      	ldr	r3, [pc, #100]	; (8003f8c <xTaskRemoveFromEventList+0xb4>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d903      	bls.n	8003f34 <xTaskRemoveFromEventList+0x5c>
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	4a16      	ldr	r2, [pc, #88]	; (8003f8c <xTaskRemoveFromEventList+0xb4>)
 8003f32:	6013      	str	r3, [r2, #0]
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f38:	4613      	mov	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4a13      	ldr	r2, [pc, #76]	; (8003f90 <xTaskRemoveFromEventList+0xb8>)
 8003f42:	441a      	add	r2, r3
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	3304      	adds	r3, #4
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	f7fe fcfb 	bl	8002946 <vListInsertEnd>
 8003f50:	e005      	b.n	8003f5e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	3318      	adds	r3, #24
 8003f56:	4619      	mov	r1, r3
 8003f58:	480e      	ldr	r0, [pc, #56]	; (8003f94 <xTaskRemoveFromEventList+0xbc>)
 8003f5a:	f7fe fcf4 	bl	8002946 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f62:	4b0d      	ldr	r3, [pc, #52]	; (8003f98 <xTaskRemoveFromEventList+0xc0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d905      	bls.n	8003f78 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f70:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <xTaskRemoveFromEventList+0xc4>)
 8003f72:	2201      	movs	r2, #1
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	e001      	b.n	8003f7c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f7c:	697b      	ldr	r3, [r7, #20]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20000e10 	.word	0x20000e10
 8003f8c:	20000df0 	.word	0x20000df0
 8003f90:	20000918 	.word	0x20000918
 8003f94:	20000da8 	.word	0x20000da8
 8003f98:	20000914 	.word	0x20000914
 8003f9c:	20000dfc 	.word	0x20000dfc

08003fa0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003fa8:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <vTaskInternalSetTimeOutState+0x24>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003fb0:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <vTaskInternalSetTimeOutState+0x28>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	605a      	str	r2, [r3, #4]
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	20000e00 	.word	0x20000e00
 8003fc8:	20000dec 	.word	0x20000dec

08003fcc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b088      	sub	sp, #32
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10a      	bne.n	8003ff2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe0:	f383 8811 	msr	BASEPRI, r3
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	f3bf 8f4f 	dsb	sy
 8003fec:	613b      	str	r3, [r7, #16]
}
 8003fee:	bf00      	nop
 8003ff0:	e7fe      	b.n	8003ff0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10a      	bne.n	800400e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	60fb      	str	r3, [r7, #12]
}
 800400a:	bf00      	nop
 800400c:	e7fe      	b.n	800400c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800400e:	f000 fe79 	bl	8004d04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004012:	4b1d      	ldr	r3, [pc, #116]	; (8004088 <xTaskCheckForTimeOut+0xbc>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402a:	d102      	bne.n	8004032 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800402c:	2300      	movs	r3, #0
 800402e:	61fb      	str	r3, [r7, #28]
 8004030:	e023      	b.n	800407a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	4b15      	ldr	r3, [pc, #84]	; (800408c <xTaskCheckForTimeOut+0xc0>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d007      	beq.n	800404e <xTaskCheckForTimeOut+0x82>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	429a      	cmp	r2, r3
 8004046:	d302      	bcc.n	800404e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004048:	2301      	movs	r3, #1
 800404a:	61fb      	str	r3, [r7, #28]
 800404c:	e015      	b.n	800407a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	429a      	cmp	r2, r3
 8004056:	d20b      	bcs.n	8004070 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	1ad2      	subs	r2, r2, r3
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7ff ff9b 	bl	8003fa0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800406a:	2300      	movs	r3, #0
 800406c:	61fb      	str	r3, [r7, #28]
 800406e:	e004      	b.n	800407a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004076:	2301      	movs	r3, #1
 8004078:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800407a:	f000 fe73 	bl	8004d64 <vPortExitCritical>

	return xReturn;
 800407e:	69fb      	ldr	r3, [r7, #28]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3720      	adds	r7, #32
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	20000dec 	.word	0x20000dec
 800408c:	20000e00 	.word	0x20000e00

08004090 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004094:	4b03      	ldr	r3, [pc, #12]	; (80040a4 <vTaskMissedYield+0x14>)
 8004096:	2201      	movs	r2, #1
 8004098:	601a      	str	r2, [r3, #0]
}
 800409a:	bf00      	nop
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	20000dfc 	.word	0x20000dfc

080040a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040b0:	f000 f852 	bl	8004158 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040b4:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <prvIdleTask+0x28>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d9f9      	bls.n	80040b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80040bc:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <prvIdleTask+0x2c>)
 80040be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040cc:	e7f0      	b.n	80040b0 <prvIdleTask+0x8>
 80040ce:	bf00      	nop
 80040d0:	20000918 	.word	0x20000918
 80040d4:	e000ed04 	.word	0xe000ed04

080040d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040de:	2300      	movs	r3, #0
 80040e0:	607b      	str	r3, [r7, #4]
 80040e2:	e00c      	b.n	80040fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	4613      	mov	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4413      	add	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4a12      	ldr	r2, [pc, #72]	; (8004138 <prvInitialiseTaskLists+0x60>)
 80040f0:	4413      	add	r3, r2
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fe fbfa 	bl	80028ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	3301      	adds	r3, #1
 80040fc:	607b      	str	r3, [r7, #4]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b37      	cmp	r3, #55	; 0x37
 8004102:	d9ef      	bls.n	80040e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004104:	480d      	ldr	r0, [pc, #52]	; (800413c <prvInitialiseTaskLists+0x64>)
 8004106:	f7fe fbf1 	bl	80028ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800410a:	480d      	ldr	r0, [pc, #52]	; (8004140 <prvInitialiseTaskLists+0x68>)
 800410c:	f7fe fbee 	bl	80028ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004110:	480c      	ldr	r0, [pc, #48]	; (8004144 <prvInitialiseTaskLists+0x6c>)
 8004112:	f7fe fbeb 	bl	80028ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004116:	480c      	ldr	r0, [pc, #48]	; (8004148 <prvInitialiseTaskLists+0x70>)
 8004118:	f7fe fbe8 	bl	80028ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800411c:	480b      	ldr	r0, [pc, #44]	; (800414c <prvInitialiseTaskLists+0x74>)
 800411e:	f7fe fbe5 	bl	80028ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004122:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <prvInitialiseTaskLists+0x78>)
 8004124:	4a05      	ldr	r2, [pc, #20]	; (800413c <prvInitialiseTaskLists+0x64>)
 8004126:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004128:	4b0a      	ldr	r3, [pc, #40]	; (8004154 <prvInitialiseTaskLists+0x7c>)
 800412a:	4a05      	ldr	r2, [pc, #20]	; (8004140 <prvInitialiseTaskLists+0x68>)
 800412c:	601a      	str	r2, [r3, #0]
}
 800412e:	bf00      	nop
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20000918 	.word	0x20000918
 800413c:	20000d78 	.word	0x20000d78
 8004140:	20000d8c 	.word	0x20000d8c
 8004144:	20000da8 	.word	0x20000da8
 8004148:	20000dbc 	.word	0x20000dbc
 800414c:	20000dd4 	.word	0x20000dd4
 8004150:	20000da0 	.word	0x20000da0
 8004154:	20000da4 	.word	0x20000da4

08004158 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800415e:	e019      	b.n	8004194 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004160:	f000 fdd0 	bl	8004d04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004164:	4b10      	ldr	r3, [pc, #64]	; (80041a8 <prvCheckTasksWaitingTermination+0x50>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3304      	adds	r3, #4
 8004170:	4618      	mov	r0, r3
 8004172:	f7fe fc45 	bl	8002a00 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004176:	4b0d      	ldr	r3, [pc, #52]	; (80041ac <prvCheckTasksWaitingTermination+0x54>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3b01      	subs	r3, #1
 800417c:	4a0b      	ldr	r2, [pc, #44]	; (80041ac <prvCheckTasksWaitingTermination+0x54>)
 800417e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004180:	4b0b      	ldr	r3, [pc, #44]	; (80041b0 <prvCheckTasksWaitingTermination+0x58>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3b01      	subs	r3, #1
 8004186:	4a0a      	ldr	r2, [pc, #40]	; (80041b0 <prvCheckTasksWaitingTermination+0x58>)
 8004188:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800418a:	f000 fdeb 	bl	8004d64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f810 	bl	80041b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004194:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <prvCheckTasksWaitingTermination+0x58>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1e1      	bne.n	8004160 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800419c:	bf00      	nop
 800419e:	bf00      	nop
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20000dbc 	.word	0x20000dbc
 80041ac:	20000de8 	.word	0x20000de8
 80041b0:	20000dd0 	.word	0x20000dd0

080041b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d108      	bne.n	80041d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 ff88 	bl	80050e0 <vPortFree>
				vPortFree( pxTCB );
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 ff85 	bl	80050e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041d6:	e018      	b.n	800420a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d103      	bne.n	80041ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 ff7c 	bl	80050e0 <vPortFree>
	}
 80041e8:	e00f      	b.n	800420a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d00a      	beq.n	800420a <prvDeleteTCB+0x56>
	__asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	60fb      	str	r3, [r7, #12]
}
 8004206:	bf00      	nop
 8004208:	e7fe      	b.n	8004208 <prvDeleteTCB+0x54>
	}
 800420a:	bf00      	nop
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
	...

08004214 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800421a:	4b0c      	ldr	r3, [pc, #48]	; (800424c <prvResetNextTaskUnblockTime+0x38>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d104      	bne.n	800422e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004224:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <prvResetNextTaskUnblockTime+0x3c>)
 8004226:	f04f 32ff 	mov.w	r2, #4294967295
 800422a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800422c:	e008      	b.n	8004240 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800422e:	4b07      	ldr	r3, [pc, #28]	; (800424c <prvResetNextTaskUnblockTime+0x38>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	4a04      	ldr	r2, [pc, #16]	; (8004250 <prvResetNextTaskUnblockTime+0x3c>)
 800423e:	6013      	str	r3, [r2, #0]
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	20000da0 	.word	0x20000da0
 8004250:	20000e08 	.word	0x20000e08

08004254 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800425a:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <xTaskGetSchedulerState+0x34>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d102      	bne.n	8004268 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004262:	2301      	movs	r3, #1
 8004264:	607b      	str	r3, [r7, #4]
 8004266:	e008      	b.n	800427a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004268:	4b08      	ldr	r3, [pc, #32]	; (800428c <xTaskGetSchedulerState+0x38>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d102      	bne.n	8004276 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004270:	2302      	movs	r3, #2
 8004272:	607b      	str	r3, [r7, #4]
 8004274:	e001      	b.n	800427a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004276:	2300      	movs	r3, #0
 8004278:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800427a:	687b      	ldr	r3, [r7, #4]
	}
 800427c:	4618      	mov	r0, r3
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	20000df4 	.word	0x20000df4
 800428c:	20000e10 	.word	0x20000e10

08004290 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800429c:	2300      	movs	r3, #0
 800429e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d056      	beq.n	8004354 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80042a6:	4b2e      	ldr	r3, [pc, #184]	; (8004360 <xTaskPriorityDisinherit+0xd0>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d00a      	beq.n	80042c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	60fb      	str	r3, [r7, #12]
}
 80042c2:	bf00      	nop
 80042c4:	e7fe      	b.n	80042c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10a      	bne.n	80042e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	60bb      	str	r3, [r7, #8]
}
 80042e0:	bf00      	nop
 80042e2:	e7fe      	b.n	80042e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e8:	1e5a      	subs	r2, r3, #1
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d02c      	beq.n	8004354 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d128      	bne.n	8004354 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	3304      	adds	r3, #4
 8004306:	4618      	mov	r0, r3
 8004308:	f7fe fb7a 	bl	8002a00 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004324:	4b0f      	ldr	r3, [pc, #60]	; (8004364 <xTaskPriorityDisinherit+0xd4>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	429a      	cmp	r2, r3
 800432a:	d903      	bls.n	8004334 <xTaskPriorityDisinherit+0xa4>
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	4a0c      	ldr	r2, [pc, #48]	; (8004364 <xTaskPriorityDisinherit+0xd4>)
 8004332:	6013      	str	r3, [r2, #0]
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004338:	4613      	mov	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4a09      	ldr	r2, [pc, #36]	; (8004368 <xTaskPriorityDisinherit+0xd8>)
 8004342:	441a      	add	r2, r3
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	3304      	adds	r3, #4
 8004348:	4619      	mov	r1, r3
 800434a:	4610      	mov	r0, r2
 800434c:	f7fe fafb 	bl	8002946 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004350:	2301      	movs	r3, #1
 8004352:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004354:	697b      	ldr	r3, [r7, #20]
	}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000914 	.word	0x20000914
 8004364:	20000df0 	.word	0x20000df0
 8004368:	20000918 	.word	0x20000918

0800436c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004376:	4b21      	ldr	r3, [pc, #132]	; (80043fc <prvAddCurrentTaskToDelayedList+0x90>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800437c:	4b20      	ldr	r3, [pc, #128]	; (8004400 <prvAddCurrentTaskToDelayedList+0x94>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	3304      	adds	r3, #4
 8004382:	4618      	mov	r0, r3
 8004384:	f7fe fb3c 	bl	8002a00 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438e:	d10a      	bne.n	80043a6 <prvAddCurrentTaskToDelayedList+0x3a>
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004396:	4b1a      	ldr	r3, [pc, #104]	; (8004400 <prvAddCurrentTaskToDelayedList+0x94>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3304      	adds	r3, #4
 800439c:	4619      	mov	r1, r3
 800439e:	4819      	ldr	r0, [pc, #100]	; (8004404 <prvAddCurrentTaskToDelayedList+0x98>)
 80043a0:	f7fe fad1 	bl	8002946 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80043a4:	e026      	b.n	80043f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4413      	add	r3, r2
 80043ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80043ae:	4b14      	ldr	r3, [pc, #80]	; (8004400 <prvAddCurrentTaskToDelayedList+0x94>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d209      	bcs.n	80043d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043be:	4b12      	ldr	r3, [pc, #72]	; (8004408 <prvAddCurrentTaskToDelayedList+0x9c>)
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	4b0f      	ldr	r3, [pc, #60]	; (8004400 <prvAddCurrentTaskToDelayedList+0x94>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4619      	mov	r1, r3
 80043ca:	4610      	mov	r0, r2
 80043cc:	f7fe fadf 	bl	800298e <vListInsert>
}
 80043d0:	e010      	b.n	80043f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043d2:	4b0e      	ldr	r3, [pc, #56]	; (800440c <prvAddCurrentTaskToDelayedList+0xa0>)
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	4b0a      	ldr	r3, [pc, #40]	; (8004400 <prvAddCurrentTaskToDelayedList+0x94>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	3304      	adds	r3, #4
 80043dc:	4619      	mov	r1, r3
 80043de:	4610      	mov	r0, r2
 80043e0:	f7fe fad5 	bl	800298e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80043e4:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <prvAddCurrentTaskToDelayedList+0xa4>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d202      	bcs.n	80043f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80043ee:	4a08      	ldr	r2, [pc, #32]	; (8004410 <prvAddCurrentTaskToDelayedList+0xa4>)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	6013      	str	r3, [r2, #0]
}
 80043f4:	bf00      	nop
 80043f6:	3710      	adds	r7, #16
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	20000dec 	.word	0x20000dec
 8004400:	20000914 	.word	0x20000914
 8004404:	20000dd4 	.word	0x20000dd4
 8004408:	20000da4 	.word	0x20000da4
 800440c:	20000da0 	.word	0x20000da0
 8004410:	20000e08 	.word	0x20000e08

08004414 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08a      	sub	sp, #40	; 0x28
 8004418:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800441a:	2300      	movs	r3, #0
 800441c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800441e:	f000 fb07 	bl	8004a30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004422:	4b1c      	ldr	r3, [pc, #112]	; (8004494 <xTimerCreateTimerTask+0x80>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d021      	beq.n	800446e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800442a:	2300      	movs	r3, #0
 800442c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800442e:	2300      	movs	r3, #0
 8004430:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004432:	1d3a      	adds	r2, r7, #4
 8004434:	f107 0108 	add.w	r1, r7, #8
 8004438:	f107 030c 	add.w	r3, r7, #12
 800443c:	4618      	mov	r0, r3
 800443e:	f7fe fa3b 	bl	80028b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	9202      	str	r2, [sp, #8]
 800444a:	9301      	str	r3, [sp, #4]
 800444c:	2302      	movs	r3, #2
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	2300      	movs	r3, #0
 8004452:	460a      	mov	r2, r1
 8004454:	4910      	ldr	r1, [pc, #64]	; (8004498 <xTimerCreateTimerTask+0x84>)
 8004456:	4811      	ldr	r0, [pc, #68]	; (800449c <xTimerCreateTimerTask+0x88>)
 8004458:	f7ff f8de 	bl	8003618 <xTaskCreateStatic>
 800445c:	4603      	mov	r3, r0
 800445e:	4a10      	ldr	r2, [pc, #64]	; (80044a0 <xTimerCreateTimerTask+0x8c>)
 8004460:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004462:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <xTimerCreateTimerTask+0x8c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800446a:	2301      	movs	r3, #1
 800446c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10a      	bne.n	800448a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	613b      	str	r3, [r7, #16]
}
 8004486:	bf00      	nop
 8004488:	e7fe      	b.n	8004488 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800448a:	697b      	ldr	r3, [r7, #20]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3718      	adds	r7, #24
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	20000e44 	.word	0x20000e44
 8004498:	080081c4 	.word	0x080081c4
 800449c:	080045d9 	.word	0x080045d9
 80044a0:	20000e48 	.word	0x20000e48

080044a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	; 0x28
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10a      	bne.n	80044d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80044bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	623b      	str	r3, [r7, #32]
}
 80044ce:	bf00      	nop
 80044d0:	e7fe      	b.n	80044d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80044d2:	4b1a      	ldr	r3, [pc, #104]	; (800453c <xTimerGenericCommand+0x98>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d02a      	beq.n	8004530 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b05      	cmp	r3, #5
 80044ea:	dc18      	bgt.n	800451e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80044ec:	f7ff feb2 	bl	8004254 <xTaskGetSchedulerState>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d109      	bne.n	800450a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80044f6:	4b11      	ldr	r3, [pc, #68]	; (800453c <xTimerGenericCommand+0x98>)
 80044f8:	6818      	ldr	r0, [r3, #0]
 80044fa:	f107 0110 	add.w	r1, r7, #16
 80044fe:	2300      	movs	r3, #0
 8004500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004502:	f7fe fbe5 	bl	8002cd0 <xQueueGenericSend>
 8004506:	6278      	str	r0, [r7, #36]	; 0x24
 8004508:	e012      	b.n	8004530 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800450a:	4b0c      	ldr	r3, [pc, #48]	; (800453c <xTimerGenericCommand+0x98>)
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	f107 0110 	add.w	r1, r7, #16
 8004512:	2300      	movs	r3, #0
 8004514:	2200      	movs	r2, #0
 8004516:	f7fe fbdb 	bl	8002cd0 <xQueueGenericSend>
 800451a:	6278      	str	r0, [r7, #36]	; 0x24
 800451c:	e008      	b.n	8004530 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800451e:	4b07      	ldr	r3, [pc, #28]	; (800453c <xTimerGenericCommand+0x98>)
 8004520:	6818      	ldr	r0, [r3, #0]
 8004522:	f107 0110 	add.w	r1, r7, #16
 8004526:	2300      	movs	r3, #0
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	f7fe fccf 	bl	8002ecc <xQueueGenericSendFromISR>
 800452e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004532:	4618      	mov	r0, r3
 8004534:	3728      	adds	r7, #40	; 0x28
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000e44 	.word	0x20000e44

08004540 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af02      	add	r7, sp, #8
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800454a:	4b22      	ldr	r3, [pc, #136]	; (80045d4 <prvProcessExpiredTimer+0x94>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	3304      	adds	r3, #4
 8004558:	4618      	mov	r0, r3
 800455a:	f7fe fa51 	bl	8002a00 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	d022      	beq.n	80045b2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	699a      	ldr	r2, [r3, #24]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	18d1      	adds	r1, r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	6978      	ldr	r0, [r7, #20]
 800457a:	f000 f8d1 	bl	8004720 <prvInsertTimerInActiveList>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d01f      	beq.n	80045c4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004584:	2300      	movs	r3, #0
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	2300      	movs	r3, #0
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	2100      	movs	r1, #0
 800458e:	6978      	ldr	r0, [r7, #20]
 8004590:	f7ff ff88 	bl	80044a4 <xTimerGenericCommand>
 8004594:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d113      	bne.n	80045c4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800459c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a0:	f383 8811 	msr	BASEPRI, r3
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	f3bf 8f4f 	dsb	sy
 80045ac:	60fb      	str	r3, [r7, #12]
}
 80045ae:	bf00      	nop
 80045b0:	e7fe      	b.n	80045b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045b8:	f023 0301 	bic.w	r3, r3, #1
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	6978      	ldr	r0, [r7, #20]
 80045ca:	4798      	blx	r3
}
 80045cc:	bf00      	nop
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20000e3c 	.word	0x20000e3c

080045d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045e0:	f107 0308 	add.w	r3, r7, #8
 80045e4:	4618      	mov	r0, r3
 80045e6:	f000 f857 	bl	8004698 <prvGetNextExpireTime>
 80045ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4619      	mov	r1, r3
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 f803 	bl	80045fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80045f6:	f000 f8d5 	bl	80047a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80045fa:	e7f1      	b.n	80045e0 <prvTimerTask+0x8>

080045fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004606:	f7ff fa43 	bl	8003a90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800460a:	f107 0308 	add.w	r3, r7, #8
 800460e:	4618      	mov	r0, r3
 8004610:	f000 f866 	bl	80046e0 <prvSampleTimeNow>
 8004614:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d130      	bne.n	800467e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10a      	bne.n	8004638 <prvProcessTimerOrBlockTask+0x3c>
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	429a      	cmp	r2, r3
 8004628:	d806      	bhi.n	8004638 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800462a:	f7ff fa3f 	bl	8003aac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800462e:	68f9      	ldr	r1, [r7, #12]
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff ff85 	bl	8004540 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004636:	e024      	b.n	8004682 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d008      	beq.n	8004650 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800463e:	4b13      	ldr	r3, [pc, #76]	; (800468c <prvProcessTimerOrBlockTask+0x90>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <prvProcessTimerOrBlockTask+0x50>
 8004648:	2301      	movs	r3, #1
 800464a:	e000      	b.n	800464e <prvProcessTimerOrBlockTask+0x52>
 800464c:	2300      	movs	r3, #0
 800464e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004650:	4b0f      	ldr	r3, [pc, #60]	; (8004690 <prvProcessTimerOrBlockTask+0x94>)
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	4619      	mov	r1, r3
 800465e:	f7fe ffa7 	bl	80035b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004662:	f7ff fa23 	bl	8003aac <xTaskResumeAll>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10a      	bne.n	8004682 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800466c:	4b09      	ldr	r3, [pc, #36]	; (8004694 <prvProcessTimerOrBlockTask+0x98>)
 800466e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	f3bf 8f4f 	dsb	sy
 8004678:	f3bf 8f6f 	isb	sy
}
 800467c:	e001      	b.n	8004682 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800467e:	f7ff fa15 	bl	8003aac <xTaskResumeAll>
}
 8004682:	bf00      	nop
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000e40 	.word	0x20000e40
 8004690:	20000e44 	.word	0x20000e44
 8004694:	e000ed04 	.word	0xe000ed04

08004698 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80046a0:	4b0e      	ldr	r3, [pc, #56]	; (80046dc <prvGetNextExpireTime+0x44>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <prvGetNextExpireTime+0x16>
 80046aa:	2201      	movs	r2, #1
 80046ac:	e000      	b.n	80046b0 <prvGetNextExpireTime+0x18>
 80046ae:	2200      	movs	r2, #0
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d105      	bne.n	80046c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046bc:	4b07      	ldr	r3, [pc, #28]	; (80046dc <prvGetNextExpireTime+0x44>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	e001      	b.n	80046cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80046cc:	68fb      	ldr	r3, [r7, #12]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	20000e3c 	.word	0x20000e3c

080046e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80046e8:	f7ff fa7e 	bl	8003be8 <xTaskGetTickCount>
 80046ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80046ee:	4b0b      	ldr	r3, [pc, #44]	; (800471c <prvSampleTimeNow+0x3c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d205      	bcs.n	8004704 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80046f8:	f000 f936 	bl	8004968 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	e002      	b.n	800470a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800470a:	4a04      	ldr	r2, [pc, #16]	; (800471c <prvSampleTimeNow+0x3c>)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004710:	68fb      	ldr	r3, [r7, #12]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000e4c 	.word	0x20000e4c

08004720 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
 800472c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	429a      	cmp	r2, r3
 8004744:	d812      	bhi.n	800476c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	1ad2      	subs	r2, r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	429a      	cmp	r2, r3
 8004752:	d302      	bcc.n	800475a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004754:	2301      	movs	r3, #1
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	e01b      	b.n	8004792 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800475a:	4b10      	ldr	r3, [pc, #64]	; (800479c <prvInsertTimerInActiveList+0x7c>)
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	3304      	adds	r3, #4
 8004762:	4619      	mov	r1, r3
 8004764:	4610      	mov	r0, r2
 8004766:	f7fe f912 	bl	800298e <vListInsert>
 800476a:	e012      	b.n	8004792 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	429a      	cmp	r2, r3
 8004772:	d206      	bcs.n	8004782 <prvInsertTimerInActiveList+0x62>
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	429a      	cmp	r2, r3
 800477a:	d302      	bcc.n	8004782 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800477c:	2301      	movs	r3, #1
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	e007      	b.n	8004792 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004782:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <prvInsertTimerInActiveList+0x80>)
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3304      	adds	r3, #4
 800478a:	4619      	mov	r1, r3
 800478c:	4610      	mov	r0, r2
 800478e:	f7fe f8fe 	bl	800298e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004792:	697b      	ldr	r3, [r7, #20]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	20000e40 	.word	0x20000e40
 80047a0:	20000e3c 	.word	0x20000e3c

080047a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b08e      	sub	sp, #56	; 0x38
 80047a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80047aa:	e0ca      	b.n	8004942 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	da18      	bge.n	80047e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80047b2:	1d3b      	adds	r3, r7, #4
 80047b4:	3304      	adds	r3, #4
 80047b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80047b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10a      	bne.n	80047d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80047be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	61fb      	str	r3, [r7, #28]
}
 80047d0:	bf00      	nop
 80047d2:	e7fe      	b.n	80047d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80047d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047da:	6850      	ldr	r0, [r2, #4]
 80047dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047de:	6892      	ldr	r2, [r2, #8]
 80047e0:	4611      	mov	r1, r2
 80047e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f2c0 80aa 	blt.w	8004940 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d004      	beq.n	8004802 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fa:	3304      	adds	r3, #4
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fe f8ff 	bl	8002a00 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004802:	463b      	mov	r3, r7
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff ff6b 	bl	80046e0 <prvSampleTimeNow>
 800480a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b09      	cmp	r3, #9
 8004810:	f200 8097 	bhi.w	8004942 <prvProcessReceivedCommands+0x19e>
 8004814:	a201      	add	r2, pc, #4	; (adr r2, 800481c <prvProcessReceivedCommands+0x78>)
 8004816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481a:	bf00      	nop
 800481c:	08004845 	.word	0x08004845
 8004820:	08004845 	.word	0x08004845
 8004824:	08004845 	.word	0x08004845
 8004828:	080048b9 	.word	0x080048b9
 800482c:	080048cd 	.word	0x080048cd
 8004830:	08004917 	.word	0x08004917
 8004834:	08004845 	.word	0x08004845
 8004838:	08004845 	.word	0x08004845
 800483c:	080048b9 	.word	0x080048b9
 8004840:	080048cd 	.word	0x080048cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800484a:	f043 0301 	orr.w	r3, r3, #1
 800484e:	b2da      	uxtb	r2, r3
 8004850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	18d1      	adds	r1, r2, r3
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004864:	f7ff ff5c 	bl	8004720 <prvInsertTimerInActiveList>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d069      	beq.n	8004942 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800486e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004874:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004878:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	d05e      	beq.n	8004942 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	441a      	add	r2, r3
 800488c:	2300      	movs	r3, #0
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	2300      	movs	r3, #0
 8004892:	2100      	movs	r1, #0
 8004894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004896:	f7ff fe05 	bl	80044a4 <xTimerGenericCommand>
 800489a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d14f      	bne.n	8004942 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	61bb      	str	r3, [r7, #24]
}
 80048b4:	bf00      	nop
 80048b6:	e7fe      	b.n	80048b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048be:	f023 0301 	bic.w	r3, r3, #1
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80048ca:	e03a      	b.n	8004942 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048d2:	f043 0301 	orr.w	r3, r3, #1
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10a      	bne.n	8004902 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80048ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	617b      	str	r3, [r7, #20]
}
 80048fe:	bf00      	nop
 8004900:	e7fe      	b.n	8004900 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004904:	699a      	ldr	r2, [r3, #24]
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	18d1      	adds	r1, r2, r3
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800490e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004910:	f7ff ff06 	bl	8004720 <prvInsertTimerInActiveList>
					break;
 8004914:	e015      	b.n	8004942 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d103      	bne.n	800492c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004924:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004926:	f000 fbdb 	bl	80050e0 <vPortFree>
 800492a:	e00a      	b.n	8004942 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800492c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800492e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004932:	f023 0301 	bic.w	r3, r3, #1
 8004936:	b2da      	uxtb	r2, r3
 8004938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800493e:	e000      	b.n	8004942 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004940:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004942:	4b08      	ldr	r3, [pc, #32]	; (8004964 <prvProcessReceivedCommands+0x1c0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	1d39      	adds	r1, r7, #4
 8004948:	2200      	movs	r2, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f7fe fb5a 	bl	8003004 <xQueueReceive>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	f47f af2a 	bne.w	80047ac <prvProcessReceivedCommands+0x8>
	}
}
 8004958:	bf00      	nop
 800495a:	bf00      	nop
 800495c:	3730      	adds	r7, #48	; 0x30
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	20000e44 	.word	0x20000e44

08004968 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b088      	sub	sp, #32
 800496c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800496e:	e048      	b.n	8004a02 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004970:	4b2d      	ldr	r3, [pc, #180]	; (8004a28 <prvSwitchTimerLists+0xc0>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800497a:	4b2b      	ldr	r3, [pc, #172]	; (8004a28 <prvSwitchTimerLists+0xc0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3304      	adds	r3, #4
 8004988:	4618      	mov	r0, r3
 800498a:	f7fe f839 	bl	8002a00 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d02e      	beq.n	8004a02 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4413      	add	r3, r2
 80049ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d90e      	bls.n	80049d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049c2:	4b19      	ldr	r3, [pc, #100]	; (8004a28 <prvSwitchTimerLists+0xc0>)
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	3304      	adds	r3, #4
 80049ca:	4619      	mov	r1, r3
 80049cc:	4610      	mov	r0, r2
 80049ce:	f7fd ffde 	bl	800298e <vListInsert>
 80049d2:	e016      	b.n	8004a02 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049d4:	2300      	movs	r3, #0
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	2300      	movs	r3, #0
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	2100      	movs	r1, #0
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f7ff fd60 	bl	80044a4 <xTimerGenericCommand>
 80049e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	603b      	str	r3, [r7, #0]
}
 80049fe:	bf00      	nop
 8004a00:	e7fe      	b.n	8004a00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a02:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <prvSwitchTimerLists+0xc0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1b1      	bne.n	8004970 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a0c:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <prvSwitchTimerLists+0xc0>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a12:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <prvSwitchTimerLists+0xc4>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a04      	ldr	r2, [pc, #16]	; (8004a28 <prvSwitchTimerLists+0xc0>)
 8004a18:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a1a:	4a04      	ldr	r2, [pc, #16]	; (8004a2c <prvSwitchTimerLists+0xc4>)
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	6013      	str	r3, [r2, #0]
}
 8004a20:	bf00      	nop
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	20000e3c 	.word	0x20000e3c
 8004a2c:	20000e40 	.word	0x20000e40

08004a30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a36:	f000 f965 	bl	8004d04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a3a:	4b15      	ldr	r3, [pc, #84]	; (8004a90 <prvCheckForValidListAndQueue+0x60>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d120      	bne.n	8004a84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a42:	4814      	ldr	r0, [pc, #80]	; (8004a94 <prvCheckForValidListAndQueue+0x64>)
 8004a44:	f7fd ff52 	bl	80028ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a48:	4813      	ldr	r0, [pc, #76]	; (8004a98 <prvCheckForValidListAndQueue+0x68>)
 8004a4a:	f7fd ff4f 	bl	80028ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a4e:	4b13      	ldr	r3, [pc, #76]	; (8004a9c <prvCheckForValidListAndQueue+0x6c>)
 8004a50:	4a10      	ldr	r2, [pc, #64]	; (8004a94 <prvCheckForValidListAndQueue+0x64>)
 8004a52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a54:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <prvCheckForValidListAndQueue+0x70>)
 8004a56:	4a10      	ldr	r2, [pc, #64]	; (8004a98 <prvCheckForValidListAndQueue+0x68>)
 8004a58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	4b11      	ldr	r3, [pc, #68]	; (8004aa4 <prvCheckForValidListAndQueue+0x74>)
 8004a60:	4a11      	ldr	r2, [pc, #68]	; (8004aa8 <prvCheckForValidListAndQueue+0x78>)
 8004a62:	2110      	movs	r1, #16
 8004a64:	200a      	movs	r0, #10
 8004a66:	f7fe f85d 	bl	8002b24 <xQueueGenericCreateStatic>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	4a08      	ldr	r2, [pc, #32]	; (8004a90 <prvCheckForValidListAndQueue+0x60>)
 8004a6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a70:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <prvCheckForValidListAndQueue+0x60>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d005      	beq.n	8004a84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a78:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <prvCheckForValidListAndQueue+0x60>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	490b      	ldr	r1, [pc, #44]	; (8004aac <prvCheckForValidListAndQueue+0x7c>)
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fe fd6c 	bl	800355c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a84:	f000 f96e 	bl	8004d64 <vPortExitCritical>
}
 8004a88:	bf00      	nop
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20000e44 	.word	0x20000e44
 8004a94:	20000e14 	.word	0x20000e14
 8004a98:	20000e28 	.word	0x20000e28
 8004a9c:	20000e3c 	.word	0x20000e3c
 8004aa0:	20000e40 	.word	0x20000e40
 8004aa4:	20000ef0 	.word	0x20000ef0
 8004aa8:	20000e50 	.word	0x20000e50
 8004aac:	080081cc 	.word	0x080081cc

08004ab0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	3b04      	subs	r3, #4
 8004ac0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ac8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3b04      	subs	r3, #4
 8004ace:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f023 0201 	bic.w	r2, r3, #1
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3b04      	subs	r3, #4
 8004ade:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004ae0:	4a0c      	ldr	r2, [pc, #48]	; (8004b14 <pxPortInitialiseStack+0x64>)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	3b14      	subs	r3, #20
 8004aea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	3b04      	subs	r3, #4
 8004af6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f06f 0202 	mvn.w	r2, #2
 8004afe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3b20      	subs	r3, #32
 8004b04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b06:	68fb      	ldr	r3, [r7, #12]
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	08004b19 	.word	0x08004b19

08004b18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b22:	4b12      	ldr	r3, [pc, #72]	; (8004b6c <prvTaskExitError+0x54>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2a:	d00a      	beq.n	8004b42 <prvTaskExitError+0x2a>
	__asm volatile
 8004b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	60fb      	str	r3, [r7, #12]
}
 8004b3e:	bf00      	nop
 8004b40:	e7fe      	b.n	8004b40 <prvTaskExitError+0x28>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	60bb      	str	r3, [r7, #8]
}
 8004b54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b56:	bf00      	nop
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0fc      	beq.n	8004b58 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004b5e:	bf00      	nop
 8004b60:	bf00      	nop
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	2000000c 	.word	0x2000000c

08004b70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004b70:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <pxCurrentTCBConst2>)
 8004b72:	6819      	ldr	r1, [r3, #0]
 8004b74:	6808      	ldr	r0, [r1, #0]
 8004b76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b7a:	f380 8809 	msr	PSP, r0
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f04f 0000 	mov.w	r0, #0
 8004b86:	f380 8811 	msr	BASEPRI, r0
 8004b8a:	4770      	bx	lr
 8004b8c:	f3af 8000 	nop.w

08004b90 <pxCurrentTCBConst2>:
 8004b90:	20000914 	.word	0x20000914
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004b94:	bf00      	nop
 8004b96:	bf00      	nop

08004b98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004b98:	4808      	ldr	r0, [pc, #32]	; (8004bbc <prvPortStartFirstTask+0x24>)
 8004b9a:	6800      	ldr	r0, [r0, #0]
 8004b9c:	6800      	ldr	r0, [r0, #0]
 8004b9e:	f380 8808 	msr	MSP, r0
 8004ba2:	f04f 0000 	mov.w	r0, #0
 8004ba6:	f380 8814 	msr	CONTROL, r0
 8004baa:	b662      	cpsie	i
 8004bac:	b661      	cpsie	f
 8004bae:	f3bf 8f4f 	dsb	sy
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	df00      	svc	0
 8004bb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004bba:	bf00      	nop
 8004bbc:	e000ed08 	.word	0xe000ed08

08004bc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004bc6:	4b46      	ldr	r3, [pc, #280]	; (8004ce0 <xPortStartScheduler+0x120>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a46      	ldr	r2, [pc, #280]	; (8004ce4 <xPortStartScheduler+0x124>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d10a      	bne.n	8004be6 <xPortStartScheduler+0x26>
	__asm volatile
 8004bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	613b      	str	r3, [r7, #16]
}
 8004be2:	bf00      	nop
 8004be4:	e7fe      	b.n	8004be4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004be6:	4b3e      	ldr	r3, [pc, #248]	; (8004ce0 <xPortStartScheduler+0x120>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a3f      	ldr	r2, [pc, #252]	; (8004ce8 <xPortStartScheduler+0x128>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d10a      	bne.n	8004c06 <xPortStartScheduler+0x46>
	__asm volatile
 8004bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	60fb      	str	r3, [r7, #12]
}
 8004c02:	bf00      	nop
 8004c04:	e7fe      	b.n	8004c04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c06:	4b39      	ldr	r3, [pc, #228]	; (8004cec <xPortStartScheduler+0x12c>)
 8004c08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	22ff      	movs	r2, #255	; 0xff
 8004c16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c20:	78fb      	ldrb	r3, [r7, #3]
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	4b31      	ldr	r3, [pc, #196]	; (8004cf0 <xPortStartScheduler+0x130>)
 8004c2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c2e:	4b31      	ldr	r3, [pc, #196]	; (8004cf4 <xPortStartScheduler+0x134>)
 8004c30:	2207      	movs	r2, #7
 8004c32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c34:	e009      	b.n	8004c4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004c36:	4b2f      	ldr	r3, [pc, #188]	; (8004cf4 <xPortStartScheduler+0x134>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	4a2d      	ldr	r2, [pc, #180]	; (8004cf4 <xPortStartScheduler+0x134>)
 8004c3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c4a:	78fb      	ldrb	r3, [r7, #3]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c52:	2b80      	cmp	r3, #128	; 0x80
 8004c54:	d0ef      	beq.n	8004c36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c56:	4b27      	ldr	r3, [pc, #156]	; (8004cf4 <xPortStartScheduler+0x134>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f1c3 0307 	rsb	r3, r3, #7
 8004c5e:	2b04      	cmp	r3, #4
 8004c60:	d00a      	beq.n	8004c78 <xPortStartScheduler+0xb8>
	__asm volatile
 8004c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c66:	f383 8811 	msr	BASEPRI, r3
 8004c6a:	f3bf 8f6f 	isb	sy
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	60bb      	str	r3, [r7, #8]
}
 8004c74:	bf00      	nop
 8004c76:	e7fe      	b.n	8004c76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c78:	4b1e      	ldr	r3, [pc, #120]	; (8004cf4 <xPortStartScheduler+0x134>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	021b      	lsls	r3, r3, #8
 8004c7e:	4a1d      	ldr	r2, [pc, #116]	; (8004cf4 <xPortStartScheduler+0x134>)
 8004c80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c82:	4b1c      	ldr	r3, [pc, #112]	; (8004cf4 <xPortStartScheduler+0x134>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c8a:	4a1a      	ldr	r2, [pc, #104]	; (8004cf4 <xPortStartScheduler+0x134>)
 8004c8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	b2da      	uxtb	r2, r3
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c96:	4b18      	ldr	r3, [pc, #96]	; (8004cf8 <xPortStartScheduler+0x138>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a17      	ldr	r2, [pc, #92]	; (8004cf8 <xPortStartScheduler+0x138>)
 8004c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ca0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ca2:	4b15      	ldr	r3, [pc, #84]	; (8004cf8 <xPortStartScheduler+0x138>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a14      	ldr	r2, [pc, #80]	; (8004cf8 <xPortStartScheduler+0x138>)
 8004ca8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004cac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004cae:	f000 f8dd 	bl	8004e6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004cb2:	4b12      	ldr	r3, [pc, #72]	; (8004cfc <xPortStartScheduler+0x13c>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004cb8:	f000 f8fc 	bl	8004eb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004cbc:	4b10      	ldr	r3, [pc, #64]	; (8004d00 <xPortStartScheduler+0x140>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a0f      	ldr	r2, [pc, #60]	; (8004d00 <xPortStartScheduler+0x140>)
 8004cc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004cc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004cc8:	f7ff ff66 	bl	8004b98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ccc:	f7ff f856 	bl	8003d7c <vTaskSwitchContext>
	prvTaskExitError();
 8004cd0:	f7ff ff22 	bl	8004b18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	e000ed00 	.word	0xe000ed00
 8004ce4:	410fc271 	.word	0x410fc271
 8004ce8:	410fc270 	.word	0x410fc270
 8004cec:	e000e400 	.word	0xe000e400
 8004cf0:	20000f40 	.word	0x20000f40
 8004cf4:	20000f44 	.word	0x20000f44
 8004cf8:	e000ed20 	.word	0xe000ed20
 8004cfc:	2000000c 	.word	0x2000000c
 8004d00:	e000ef34 	.word	0xe000ef34

08004d04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
	__asm volatile
 8004d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	607b      	str	r3, [r7, #4]
}
 8004d1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d1e:	4b0f      	ldr	r3, [pc, #60]	; (8004d5c <vPortEnterCritical+0x58>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	3301      	adds	r3, #1
 8004d24:	4a0d      	ldr	r2, [pc, #52]	; (8004d5c <vPortEnterCritical+0x58>)
 8004d26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d28:	4b0c      	ldr	r3, [pc, #48]	; (8004d5c <vPortEnterCritical+0x58>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d10f      	bne.n	8004d50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d30:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <vPortEnterCritical+0x5c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <vPortEnterCritical+0x4c>
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	603b      	str	r3, [r7, #0]
}
 8004d4c:	bf00      	nop
 8004d4e:	e7fe      	b.n	8004d4e <vPortEnterCritical+0x4a>
	}
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	2000000c 	.word	0x2000000c
 8004d60:	e000ed04 	.word	0xe000ed04

08004d64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d6a:	4b12      	ldr	r3, [pc, #72]	; (8004db4 <vPortExitCritical+0x50>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10a      	bne.n	8004d88 <vPortExitCritical+0x24>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	607b      	str	r3, [r7, #4]
}
 8004d84:	bf00      	nop
 8004d86:	e7fe      	b.n	8004d86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d88:	4b0a      	ldr	r3, [pc, #40]	; (8004db4 <vPortExitCritical+0x50>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	4a09      	ldr	r2, [pc, #36]	; (8004db4 <vPortExitCritical+0x50>)
 8004d90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d92:	4b08      	ldr	r3, [pc, #32]	; (8004db4 <vPortExitCritical+0x50>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d105      	bne.n	8004da6 <vPortExitCritical+0x42>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	f383 8811 	msr	BASEPRI, r3
}
 8004da4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	2000000c 	.word	0x2000000c
	...

08004dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004dc0:	f3ef 8009 	mrs	r0, PSP
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	4b15      	ldr	r3, [pc, #84]	; (8004e20 <pxCurrentTCBConst>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	f01e 0f10 	tst.w	lr, #16
 8004dd0:	bf08      	it	eq
 8004dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dda:	6010      	str	r0, [r2, #0]
 8004ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004de0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004de4:	f380 8811 	msr	BASEPRI, r0
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f7fe ffc4 	bl	8003d7c <vTaskSwitchContext>
 8004df4:	f04f 0000 	mov.w	r0, #0
 8004df8:	f380 8811 	msr	BASEPRI, r0
 8004dfc:	bc09      	pop	{r0, r3}
 8004dfe:	6819      	ldr	r1, [r3, #0]
 8004e00:	6808      	ldr	r0, [r1, #0]
 8004e02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e06:	f01e 0f10 	tst.w	lr, #16
 8004e0a:	bf08      	it	eq
 8004e0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e10:	f380 8809 	msr	PSP, r0
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	f3af 8000 	nop.w

08004e20 <pxCurrentTCBConst>:
 8004e20:	20000914 	.word	0x20000914
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop

08004e28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	607b      	str	r3, [r7, #4]
}
 8004e40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e42:	f7fe fee1 	bl	8003c08 <xTaskIncrementTick>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e4c:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <xPortSysTickHandler+0x40>)
 8004e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	2300      	movs	r3, #0
 8004e56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	f383 8811 	msr	BASEPRI, r3
}
 8004e5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e60:	bf00      	nop
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	e000ed04 	.word	0xe000ed04

08004e6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e70:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <vPortSetupTimerInterrupt+0x34>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e76:	4b0b      	ldr	r3, [pc, #44]	; (8004ea4 <vPortSetupTimerInterrupt+0x38>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ea8 <vPortSetupTimerInterrupt+0x3c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a0a      	ldr	r2, [pc, #40]	; (8004eac <vPortSetupTimerInterrupt+0x40>)
 8004e82:	fba2 2303 	umull	r2, r3, r2, r3
 8004e86:	099b      	lsrs	r3, r3, #6
 8004e88:	4a09      	ldr	r2, [pc, #36]	; (8004eb0 <vPortSetupTimerInterrupt+0x44>)
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e8e:	4b04      	ldr	r3, [pc, #16]	; (8004ea0 <vPortSetupTimerInterrupt+0x34>)
 8004e90:	2207      	movs	r2, #7
 8004e92:	601a      	str	r2, [r3, #0]
}
 8004e94:	bf00      	nop
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	e000e010 	.word	0xe000e010
 8004ea4:	e000e018 	.word	0xe000e018
 8004ea8:	20000000 	.word	0x20000000
 8004eac:	10624dd3 	.word	0x10624dd3
 8004eb0:	e000e014 	.word	0xe000e014

08004eb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004eb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ec4 <vPortEnableVFP+0x10>
 8004eb8:	6801      	ldr	r1, [r0, #0]
 8004eba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004ebe:	6001      	str	r1, [r0, #0]
 8004ec0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ec2:	bf00      	nop
 8004ec4:	e000ed88 	.word	0xe000ed88

08004ec8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004ece:	f3ef 8305 	mrs	r3, IPSR
 8004ed2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b0f      	cmp	r3, #15
 8004ed8:	d914      	bls.n	8004f04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004eda:	4a17      	ldr	r2, [pc, #92]	; (8004f38 <vPortValidateInterruptPriority+0x70>)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4413      	add	r3, r2
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ee4:	4b15      	ldr	r3, [pc, #84]	; (8004f3c <vPortValidateInterruptPriority+0x74>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	7afa      	ldrb	r2, [r7, #11]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d20a      	bcs.n	8004f04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	607b      	str	r3, [r7, #4]
}
 8004f00:	bf00      	nop
 8004f02:	e7fe      	b.n	8004f02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f04:	4b0e      	ldr	r3, [pc, #56]	; (8004f40 <vPortValidateInterruptPriority+0x78>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f0c:	4b0d      	ldr	r3, [pc, #52]	; (8004f44 <vPortValidateInterruptPriority+0x7c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d90a      	bls.n	8004f2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	603b      	str	r3, [r7, #0]
}
 8004f26:	bf00      	nop
 8004f28:	e7fe      	b.n	8004f28 <vPortValidateInterruptPriority+0x60>
	}
 8004f2a:	bf00      	nop
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	e000e3f0 	.word	0xe000e3f0
 8004f3c:	20000f40 	.word	0x20000f40
 8004f40:	e000ed0c 	.word	0xe000ed0c
 8004f44:	20000f44 	.word	0x20000f44

08004f48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08a      	sub	sp, #40	; 0x28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f50:	2300      	movs	r3, #0
 8004f52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004f54:	f7fe fd9c 	bl	8003a90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f58:	4b5b      	ldr	r3, [pc, #364]	; (80050c8 <pvPortMalloc+0x180>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f60:	f000 f920 	bl	80051a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f64:	4b59      	ldr	r3, [pc, #356]	; (80050cc <pvPortMalloc+0x184>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f040 8093 	bne.w	8005098 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d01d      	beq.n	8004fb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004f78:	2208      	movs	r2, #8
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d014      	beq.n	8004fb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f023 0307 	bic.w	r3, r3, #7
 8004f90:	3308      	adds	r3, #8
 8004f92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <pvPortMalloc+0x6c>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	617b      	str	r3, [r7, #20]
}
 8004fb0:	bf00      	nop
 8004fb2:	e7fe      	b.n	8004fb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d06e      	beq.n	8005098 <pvPortMalloc+0x150>
 8004fba:	4b45      	ldr	r3, [pc, #276]	; (80050d0 <pvPortMalloc+0x188>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d869      	bhi.n	8005098 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004fc4:	4b43      	ldr	r3, [pc, #268]	; (80050d4 <pvPortMalloc+0x18c>)
 8004fc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004fc8:	4b42      	ldr	r3, [pc, #264]	; (80050d4 <pvPortMalloc+0x18c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fce:	e004      	b.n	8004fda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d903      	bls.n	8004fec <pvPortMalloc+0xa4>
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1f1      	bne.n	8004fd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004fec:	4b36      	ldr	r3, [pc, #216]	; (80050c8 <pvPortMalloc+0x180>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d050      	beq.n	8005098 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ff6:	6a3b      	ldr	r3, [r7, #32]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2208      	movs	r2, #8
 8004ffc:	4413      	add	r3, r2
 8004ffe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	1ad2      	subs	r2, r2, r3
 8005010:	2308      	movs	r3, #8
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	429a      	cmp	r2, r3
 8005016:	d91f      	bls.n	8005058 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4413      	add	r3, r2
 800501e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <pvPortMalloc+0xf8>
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	613b      	str	r3, [r7, #16]
}
 800503c:	bf00      	nop
 800503e:	e7fe      	b.n	800503e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	1ad2      	subs	r2, r2, r3
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005052:	69b8      	ldr	r0, [r7, #24]
 8005054:	f000 f908 	bl	8005268 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005058:	4b1d      	ldr	r3, [pc, #116]	; (80050d0 <pvPortMalloc+0x188>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	4a1b      	ldr	r2, [pc, #108]	; (80050d0 <pvPortMalloc+0x188>)
 8005064:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005066:	4b1a      	ldr	r3, [pc, #104]	; (80050d0 <pvPortMalloc+0x188>)
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	4b1b      	ldr	r3, [pc, #108]	; (80050d8 <pvPortMalloc+0x190>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	429a      	cmp	r2, r3
 8005070:	d203      	bcs.n	800507a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005072:	4b17      	ldr	r3, [pc, #92]	; (80050d0 <pvPortMalloc+0x188>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a18      	ldr	r2, [pc, #96]	; (80050d8 <pvPortMalloc+0x190>)
 8005078:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	4b13      	ldr	r3, [pc, #76]	; (80050cc <pvPortMalloc+0x184>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	431a      	orrs	r2, r3
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800508e:	4b13      	ldr	r3, [pc, #76]	; (80050dc <pvPortMalloc+0x194>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3301      	adds	r3, #1
 8005094:	4a11      	ldr	r2, [pc, #68]	; (80050dc <pvPortMalloc+0x194>)
 8005096:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005098:	f7fe fd08 	bl	8003aac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <pvPortMalloc+0x174>
	__asm volatile
 80050a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	60fb      	str	r3, [r7, #12]
}
 80050b8:	bf00      	nop
 80050ba:	e7fe      	b.n	80050ba <pvPortMalloc+0x172>
	return pvReturn;
 80050bc:	69fb      	ldr	r3, [r7, #28]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3728      	adds	r7, #40	; 0x28
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20004b50 	.word	0x20004b50
 80050cc:	20004b64 	.word	0x20004b64
 80050d0:	20004b54 	.word	0x20004b54
 80050d4:	20004b48 	.word	0x20004b48
 80050d8:	20004b58 	.word	0x20004b58
 80050dc:	20004b5c 	.word	0x20004b5c

080050e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d04d      	beq.n	800518e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050f2:	2308      	movs	r3, #8
 80050f4:	425b      	negs	r3, r3
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4413      	add	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	4b24      	ldr	r3, [pc, #144]	; (8005198 <vPortFree+0xb8>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4013      	ands	r3, r2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10a      	bne.n	8005124 <vPortFree+0x44>
	__asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	60fb      	str	r3, [r7, #12]
}
 8005120:	bf00      	nop
 8005122:	e7fe      	b.n	8005122 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <vPortFree+0x62>
	__asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	60bb      	str	r3, [r7, #8]
}
 800513e:	bf00      	nop
 8005140:	e7fe      	b.n	8005140 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	4b14      	ldr	r3, [pc, #80]	; (8005198 <vPortFree+0xb8>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4013      	ands	r3, r2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01e      	beq.n	800518e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d11a      	bne.n	800518e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	4b0e      	ldr	r3, [pc, #56]	; (8005198 <vPortFree+0xb8>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	43db      	mvns	r3, r3
 8005162:	401a      	ands	r2, r3
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005168:	f7fe fc92 	bl	8003a90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	4b0a      	ldr	r3, [pc, #40]	; (800519c <vPortFree+0xbc>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4413      	add	r3, r2
 8005176:	4a09      	ldr	r2, [pc, #36]	; (800519c <vPortFree+0xbc>)
 8005178:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800517a:	6938      	ldr	r0, [r7, #16]
 800517c:	f000 f874 	bl	8005268 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005180:	4b07      	ldr	r3, [pc, #28]	; (80051a0 <vPortFree+0xc0>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3301      	adds	r3, #1
 8005186:	4a06      	ldr	r2, [pc, #24]	; (80051a0 <vPortFree+0xc0>)
 8005188:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800518a:	f7fe fc8f 	bl	8003aac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800518e:	bf00      	nop
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	20004b64 	.word	0x20004b64
 800519c:	20004b54 	.word	0x20004b54
 80051a0:	20004b60 	.word	0x20004b60

080051a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80051ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051b0:	4b27      	ldr	r3, [pc, #156]	; (8005250 <prvHeapInit+0xac>)
 80051b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00c      	beq.n	80051d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	3307      	adds	r3, #7
 80051c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f023 0307 	bic.w	r3, r3, #7
 80051ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80051cc:	68ba      	ldr	r2, [r7, #8]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	4a1f      	ldr	r2, [pc, #124]	; (8005250 <prvHeapInit+0xac>)
 80051d4:	4413      	add	r3, r2
 80051d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051dc:	4a1d      	ldr	r2, [pc, #116]	; (8005254 <prvHeapInit+0xb0>)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80051e2:	4b1c      	ldr	r3, [pc, #112]	; (8005254 <prvHeapInit+0xb0>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	4413      	add	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80051f0:	2208      	movs	r2, #8
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	1a9b      	subs	r3, r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0307 	bic.w	r3, r3, #7
 80051fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4a15      	ldr	r2, [pc, #84]	; (8005258 <prvHeapInit+0xb4>)
 8005204:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005206:	4b14      	ldr	r3, [pc, #80]	; (8005258 <prvHeapInit+0xb4>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2200      	movs	r2, #0
 800520c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800520e:	4b12      	ldr	r3, [pc, #72]	; (8005258 <prvHeapInit+0xb4>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	1ad2      	subs	r2, r2, r3
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005224:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <prvHeapInit+0xb4>)
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	4a0a      	ldr	r2, [pc, #40]	; (800525c <prvHeapInit+0xb8>)
 8005232:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	4a09      	ldr	r2, [pc, #36]	; (8005260 <prvHeapInit+0xbc>)
 800523a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800523c:	4b09      	ldr	r3, [pc, #36]	; (8005264 <prvHeapInit+0xc0>)
 800523e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005242:	601a      	str	r2, [r3, #0]
}
 8005244:	bf00      	nop
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	20000f48 	.word	0x20000f48
 8005254:	20004b48 	.word	0x20004b48
 8005258:	20004b50 	.word	0x20004b50
 800525c:	20004b58 	.word	0x20004b58
 8005260:	20004b54 	.word	0x20004b54
 8005264:	20004b64 	.word	0x20004b64

08005268 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005270:	4b28      	ldr	r3, [pc, #160]	; (8005314 <prvInsertBlockIntoFreeList+0xac>)
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	e002      	b.n	800527c <prvInsertBlockIntoFreeList+0x14>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	429a      	cmp	r2, r3
 8005284:	d8f7      	bhi.n	8005276 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	4413      	add	r3, r2
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	429a      	cmp	r2, r3
 8005296:	d108      	bne.n	80052aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	441a      	add	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	441a      	add	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d118      	bne.n	80052f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	4b15      	ldr	r3, [pc, #84]	; (8005318 <prvInsertBlockIntoFreeList+0xb0>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d00d      	beq.n	80052e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	441a      	add	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	e008      	b.n	80052f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80052e6:	4b0c      	ldr	r3, [pc, #48]	; (8005318 <prvInsertBlockIntoFreeList+0xb0>)
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	e003      	b.n	80052f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d002      	beq.n	8005306 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005306:	bf00      	nop
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	20004b48 	.word	0x20004b48
 8005318:	20004b50 	.word	0x20004b50

0800531c <__errno>:
 800531c:	4b01      	ldr	r3, [pc, #4]	; (8005324 <__errno+0x8>)
 800531e:	6818      	ldr	r0, [r3, #0]
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	20000010 	.word	0x20000010

08005328 <__libc_init_array>:
 8005328:	b570      	push	{r4, r5, r6, lr}
 800532a:	4d0d      	ldr	r5, [pc, #52]	; (8005360 <__libc_init_array+0x38>)
 800532c:	4c0d      	ldr	r4, [pc, #52]	; (8005364 <__libc_init_array+0x3c>)
 800532e:	1b64      	subs	r4, r4, r5
 8005330:	10a4      	asrs	r4, r4, #2
 8005332:	2600      	movs	r6, #0
 8005334:	42a6      	cmp	r6, r4
 8005336:	d109      	bne.n	800534c <__libc_init_array+0x24>
 8005338:	4d0b      	ldr	r5, [pc, #44]	; (8005368 <__libc_init_array+0x40>)
 800533a:	4c0c      	ldr	r4, [pc, #48]	; (800536c <__libc_init_array+0x44>)
 800533c:	f002 ff02 	bl	8008144 <_init>
 8005340:	1b64      	subs	r4, r4, r5
 8005342:	10a4      	asrs	r4, r4, #2
 8005344:	2600      	movs	r6, #0
 8005346:	42a6      	cmp	r6, r4
 8005348:	d105      	bne.n	8005356 <__libc_init_array+0x2e>
 800534a:	bd70      	pop	{r4, r5, r6, pc}
 800534c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005350:	4798      	blx	r3
 8005352:	3601      	adds	r6, #1
 8005354:	e7ee      	b.n	8005334 <__libc_init_array+0xc>
 8005356:	f855 3b04 	ldr.w	r3, [r5], #4
 800535a:	4798      	blx	r3
 800535c:	3601      	adds	r6, #1
 800535e:	e7f2      	b.n	8005346 <__libc_init_array+0x1e>
 8005360:	0800866c 	.word	0x0800866c
 8005364:	0800866c 	.word	0x0800866c
 8005368:	0800866c 	.word	0x0800866c
 800536c:	08008670 	.word	0x08008670

08005370 <memcpy>:
 8005370:	440a      	add	r2, r1
 8005372:	4291      	cmp	r1, r2
 8005374:	f100 33ff 	add.w	r3, r0, #4294967295
 8005378:	d100      	bne.n	800537c <memcpy+0xc>
 800537a:	4770      	bx	lr
 800537c:	b510      	push	{r4, lr}
 800537e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005382:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005386:	4291      	cmp	r1, r2
 8005388:	d1f9      	bne.n	800537e <memcpy+0xe>
 800538a:	bd10      	pop	{r4, pc}

0800538c <memset>:
 800538c:	4402      	add	r2, r0
 800538e:	4603      	mov	r3, r0
 8005390:	4293      	cmp	r3, r2
 8005392:	d100      	bne.n	8005396 <memset+0xa>
 8005394:	4770      	bx	lr
 8005396:	f803 1b01 	strb.w	r1, [r3], #1
 800539a:	e7f9      	b.n	8005390 <memset+0x4>

0800539c <__cvt>:
 800539c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053a0:	ec55 4b10 	vmov	r4, r5, d0
 80053a4:	2d00      	cmp	r5, #0
 80053a6:	460e      	mov	r6, r1
 80053a8:	4619      	mov	r1, r3
 80053aa:	462b      	mov	r3, r5
 80053ac:	bfbb      	ittet	lt
 80053ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80053b2:	461d      	movlt	r5, r3
 80053b4:	2300      	movge	r3, #0
 80053b6:	232d      	movlt	r3, #45	; 0x2d
 80053b8:	700b      	strb	r3, [r1, #0]
 80053ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80053c0:	4691      	mov	r9, r2
 80053c2:	f023 0820 	bic.w	r8, r3, #32
 80053c6:	bfbc      	itt	lt
 80053c8:	4622      	movlt	r2, r4
 80053ca:	4614      	movlt	r4, r2
 80053cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80053d0:	d005      	beq.n	80053de <__cvt+0x42>
 80053d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80053d6:	d100      	bne.n	80053da <__cvt+0x3e>
 80053d8:	3601      	adds	r6, #1
 80053da:	2102      	movs	r1, #2
 80053dc:	e000      	b.n	80053e0 <__cvt+0x44>
 80053de:	2103      	movs	r1, #3
 80053e0:	ab03      	add	r3, sp, #12
 80053e2:	9301      	str	r3, [sp, #4]
 80053e4:	ab02      	add	r3, sp, #8
 80053e6:	9300      	str	r3, [sp, #0]
 80053e8:	ec45 4b10 	vmov	d0, r4, r5
 80053ec:	4653      	mov	r3, sl
 80053ee:	4632      	mov	r2, r6
 80053f0:	f000 fcea 	bl	8005dc8 <_dtoa_r>
 80053f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80053f8:	4607      	mov	r7, r0
 80053fa:	d102      	bne.n	8005402 <__cvt+0x66>
 80053fc:	f019 0f01 	tst.w	r9, #1
 8005400:	d022      	beq.n	8005448 <__cvt+0xac>
 8005402:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005406:	eb07 0906 	add.w	r9, r7, r6
 800540a:	d110      	bne.n	800542e <__cvt+0x92>
 800540c:	783b      	ldrb	r3, [r7, #0]
 800540e:	2b30      	cmp	r3, #48	; 0x30
 8005410:	d10a      	bne.n	8005428 <__cvt+0x8c>
 8005412:	2200      	movs	r2, #0
 8005414:	2300      	movs	r3, #0
 8005416:	4620      	mov	r0, r4
 8005418:	4629      	mov	r1, r5
 800541a:	f7fb fb5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800541e:	b918      	cbnz	r0, 8005428 <__cvt+0x8c>
 8005420:	f1c6 0601 	rsb	r6, r6, #1
 8005424:	f8ca 6000 	str.w	r6, [sl]
 8005428:	f8da 3000 	ldr.w	r3, [sl]
 800542c:	4499      	add	r9, r3
 800542e:	2200      	movs	r2, #0
 8005430:	2300      	movs	r3, #0
 8005432:	4620      	mov	r0, r4
 8005434:	4629      	mov	r1, r5
 8005436:	f7fb fb4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800543a:	b108      	cbz	r0, 8005440 <__cvt+0xa4>
 800543c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005440:	2230      	movs	r2, #48	; 0x30
 8005442:	9b03      	ldr	r3, [sp, #12]
 8005444:	454b      	cmp	r3, r9
 8005446:	d307      	bcc.n	8005458 <__cvt+0xbc>
 8005448:	9b03      	ldr	r3, [sp, #12]
 800544a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800544c:	1bdb      	subs	r3, r3, r7
 800544e:	4638      	mov	r0, r7
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	b004      	add	sp, #16
 8005454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005458:	1c59      	adds	r1, r3, #1
 800545a:	9103      	str	r1, [sp, #12]
 800545c:	701a      	strb	r2, [r3, #0]
 800545e:	e7f0      	b.n	8005442 <__cvt+0xa6>

08005460 <__exponent>:
 8005460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005462:	4603      	mov	r3, r0
 8005464:	2900      	cmp	r1, #0
 8005466:	bfb8      	it	lt
 8005468:	4249      	neglt	r1, r1
 800546a:	f803 2b02 	strb.w	r2, [r3], #2
 800546e:	bfb4      	ite	lt
 8005470:	222d      	movlt	r2, #45	; 0x2d
 8005472:	222b      	movge	r2, #43	; 0x2b
 8005474:	2909      	cmp	r1, #9
 8005476:	7042      	strb	r2, [r0, #1]
 8005478:	dd2a      	ble.n	80054d0 <__exponent+0x70>
 800547a:	f10d 0407 	add.w	r4, sp, #7
 800547e:	46a4      	mov	ip, r4
 8005480:	270a      	movs	r7, #10
 8005482:	46a6      	mov	lr, r4
 8005484:	460a      	mov	r2, r1
 8005486:	fb91 f6f7 	sdiv	r6, r1, r7
 800548a:	fb07 1516 	mls	r5, r7, r6, r1
 800548e:	3530      	adds	r5, #48	; 0x30
 8005490:	2a63      	cmp	r2, #99	; 0x63
 8005492:	f104 34ff 	add.w	r4, r4, #4294967295
 8005496:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800549a:	4631      	mov	r1, r6
 800549c:	dcf1      	bgt.n	8005482 <__exponent+0x22>
 800549e:	3130      	adds	r1, #48	; 0x30
 80054a0:	f1ae 0502 	sub.w	r5, lr, #2
 80054a4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80054a8:	1c44      	adds	r4, r0, #1
 80054aa:	4629      	mov	r1, r5
 80054ac:	4561      	cmp	r1, ip
 80054ae:	d30a      	bcc.n	80054c6 <__exponent+0x66>
 80054b0:	f10d 0209 	add.w	r2, sp, #9
 80054b4:	eba2 020e 	sub.w	r2, r2, lr
 80054b8:	4565      	cmp	r5, ip
 80054ba:	bf88      	it	hi
 80054bc:	2200      	movhi	r2, #0
 80054be:	4413      	add	r3, r2
 80054c0:	1a18      	subs	r0, r3, r0
 80054c2:	b003      	add	sp, #12
 80054c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054ca:	f804 2f01 	strb.w	r2, [r4, #1]!
 80054ce:	e7ed      	b.n	80054ac <__exponent+0x4c>
 80054d0:	2330      	movs	r3, #48	; 0x30
 80054d2:	3130      	adds	r1, #48	; 0x30
 80054d4:	7083      	strb	r3, [r0, #2]
 80054d6:	70c1      	strb	r1, [r0, #3]
 80054d8:	1d03      	adds	r3, r0, #4
 80054da:	e7f1      	b.n	80054c0 <__exponent+0x60>

080054dc <_printf_float>:
 80054dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e0:	ed2d 8b02 	vpush	{d8}
 80054e4:	b08d      	sub	sp, #52	; 0x34
 80054e6:	460c      	mov	r4, r1
 80054e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80054ec:	4616      	mov	r6, r2
 80054ee:	461f      	mov	r7, r3
 80054f0:	4605      	mov	r5, r0
 80054f2:	f001 fa57 	bl	80069a4 <_localeconv_r>
 80054f6:	f8d0 a000 	ldr.w	sl, [r0]
 80054fa:	4650      	mov	r0, sl
 80054fc:	f7fa fe70 	bl	80001e0 <strlen>
 8005500:	2300      	movs	r3, #0
 8005502:	930a      	str	r3, [sp, #40]	; 0x28
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	9305      	str	r3, [sp, #20]
 8005508:	f8d8 3000 	ldr.w	r3, [r8]
 800550c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005510:	3307      	adds	r3, #7
 8005512:	f023 0307 	bic.w	r3, r3, #7
 8005516:	f103 0208 	add.w	r2, r3, #8
 800551a:	f8c8 2000 	str.w	r2, [r8]
 800551e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005522:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005526:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800552a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800552e:	9307      	str	r3, [sp, #28]
 8005530:	f8cd 8018 	str.w	r8, [sp, #24]
 8005534:	ee08 0a10 	vmov	s16, r0
 8005538:	4b9f      	ldr	r3, [pc, #636]	; (80057b8 <_printf_float+0x2dc>)
 800553a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800553e:	f04f 32ff 	mov.w	r2, #4294967295
 8005542:	f7fb fafb 	bl	8000b3c <__aeabi_dcmpun>
 8005546:	bb88      	cbnz	r0, 80055ac <_printf_float+0xd0>
 8005548:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800554c:	4b9a      	ldr	r3, [pc, #616]	; (80057b8 <_printf_float+0x2dc>)
 800554e:	f04f 32ff 	mov.w	r2, #4294967295
 8005552:	f7fb fad5 	bl	8000b00 <__aeabi_dcmple>
 8005556:	bb48      	cbnz	r0, 80055ac <_printf_float+0xd0>
 8005558:	2200      	movs	r2, #0
 800555a:	2300      	movs	r3, #0
 800555c:	4640      	mov	r0, r8
 800555e:	4649      	mov	r1, r9
 8005560:	f7fb fac4 	bl	8000aec <__aeabi_dcmplt>
 8005564:	b110      	cbz	r0, 800556c <_printf_float+0x90>
 8005566:	232d      	movs	r3, #45	; 0x2d
 8005568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800556c:	4b93      	ldr	r3, [pc, #588]	; (80057bc <_printf_float+0x2e0>)
 800556e:	4894      	ldr	r0, [pc, #592]	; (80057c0 <_printf_float+0x2e4>)
 8005570:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005574:	bf94      	ite	ls
 8005576:	4698      	movls	r8, r3
 8005578:	4680      	movhi	r8, r0
 800557a:	2303      	movs	r3, #3
 800557c:	6123      	str	r3, [r4, #16]
 800557e:	9b05      	ldr	r3, [sp, #20]
 8005580:	f023 0204 	bic.w	r2, r3, #4
 8005584:	6022      	str	r2, [r4, #0]
 8005586:	f04f 0900 	mov.w	r9, #0
 800558a:	9700      	str	r7, [sp, #0]
 800558c:	4633      	mov	r3, r6
 800558e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005590:	4621      	mov	r1, r4
 8005592:	4628      	mov	r0, r5
 8005594:	f000 f9d8 	bl	8005948 <_printf_common>
 8005598:	3001      	adds	r0, #1
 800559a:	f040 8090 	bne.w	80056be <_printf_float+0x1e2>
 800559e:	f04f 30ff 	mov.w	r0, #4294967295
 80055a2:	b00d      	add	sp, #52	; 0x34
 80055a4:	ecbd 8b02 	vpop	{d8}
 80055a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ac:	4642      	mov	r2, r8
 80055ae:	464b      	mov	r3, r9
 80055b0:	4640      	mov	r0, r8
 80055b2:	4649      	mov	r1, r9
 80055b4:	f7fb fac2 	bl	8000b3c <__aeabi_dcmpun>
 80055b8:	b140      	cbz	r0, 80055cc <_printf_float+0xf0>
 80055ba:	464b      	mov	r3, r9
 80055bc:	2b00      	cmp	r3, #0
 80055be:	bfbc      	itt	lt
 80055c0:	232d      	movlt	r3, #45	; 0x2d
 80055c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80055c6:	487f      	ldr	r0, [pc, #508]	; (80057c4 <_printf_float+0x2e8>)
 80055c8:	4b7f      	ldr	r3, [pc, #508]	; (80057c8 <_printf_float+0x2ec>)
 80055ca:	e7d1      	b.n	8005570 <_printf_float+0x94>
 80055cc:	6863      	ldr	r3, [r4, #4]
 80055ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80055d2:	9206      	str	r2, [sp, #24]
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	d13f      	bne.n	8005658 <_printf_float+0x17c>
 80055d8:	2306      	movs	r3, #6
 80055da:	6063      	str	r3, [r4, #4]
 80055dc:	9b05      	ldr	r3, [sp, #20]
 80055de:	6861      	ldr	r1, [r4, #4]
 80055e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80055e4:	2300      	movs	r3, #0
 80055e6:	9303      	str	r3, [sp, #12]
 80055e8:	ab0a      	add	r3, sp, #40	; 0x28
 80055ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80055ee:	ab09      	add	r3, sp, #36	; 0x24
 80055f0:	ec49 8b10 	vmov	d0, r8, r9
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	6022      	str	r2, [r4, #0]
 80055f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80055fc:	4628      	mov	r0, r5
 80055fe:	f7ff fecd 	bl	800539c <__cvt>
 8005602:	9b06      	ldr	r3, [sp, #24]
 8005604:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005606:	2b47      	cmp	r3, #71	; 0x47
 8005608:	4680      	mov	r8, r0
 800560a:	d108      	bne.n	800561e <_printf_float+0x142>
 800560c:	1cc8      	adds	r0, r1, #3
 800560e:	db02      	blt.n	8005616 <_printf_float+0x13a>
 8005610:	6863      	ldr	r3, [r4, #4]
 8005612:	4299      	cmp	r1, r3
 8005614:	dd41      	ble.n	800569a <_printf_float+0x1be>
 8005616:	f1ab 0b02 	sub.w	fp, fp, #2
 800561a:	fa5f fb8b 	uxtb.w	fp, fp
 800561e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005622:	d820      	bhi.n	8005666 <_printf_float+0x18a>
 8005624:	3901      	subs	r1, #1
 8005626:	465a      	mov	r2, fp
 8005628:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800562c:	9109      	str	r1, [sp, #36]	; 0x24
 800562e:	f7ff ff17 	bl	8005460 <__exponent>
 8005632:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005634:	1813      	adds	r3, r2, r0
 8005636:	2a01      	cmp	r2, #1
 8005638:	4681      	mov	r9, r0
 800563a:	6123      	str	r3, [r4, #16]
 800563c:	dc02      	bgt.n	8005644 <_printf_float+0x168>
 800563e:	6822      	ldr	r2, [r4, #0]
 8005640:	07d2      	lsls	r2, r2, #31
 8005642:	d501      	bpl.n	8005648 <_printf_float+0x16c>
 8005644:	3301      	adds	r3, #1
 8005646:	6123      	str	r3, [r4, #16]
 8005648:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800564c:	2b00      	cmp	r3, #0
 800564e:	d09c      	beq.n	800558a <_printf_float+0xae>
 8005650:	232d      	movs	r3, #45	; 0x2d
 8005652:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005656:	e798      	b.n	800558a <_printf_float+0xae>
 8005658:	9a06      	ldr	r2, [sp, #24]
 800565a:	2a47      	cmp	r2, #71	; 0x47
 800565c:	d1be      	bne.n	80055dc <_printf_float+0x100>
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1bc      	bne.n	80055dc <_printf_float+0x100>
 8005662:	2301      	movs	r3, #1
 8005664:	e7b9      	b.n	80055da <_printf_float+0xfe>
 8005666:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800566a:	d118      	bne.n	800569e <_printf_float+0x1c2>
 800566c:	2900      	cmp	r1, #0
 800566e:	6863      	ldr	r3, [r4, #4]
 8005670:	dd0b      	ble.n	800568a <_printf_float+0x1ae>
 8005672:	6121      	str	r1, [r4, #16]
 8005674:	b913      	cbnz	r3, 800567c <_printf_float+0x1a0>
 8005676:	6822      	ldr	r2, [r4, #0]
 8005678:	07d0      	lsls	r0, r2, #31
 800567a:	d502      	bpl.n	8005682 <_printf_float+0x1a6>
 800567c:	3301      	adds	r3, #1
 800567e:	440b      	add	r3, r1
 8005680:	6123      	str	r3, [r4, #16]
 8005682:	65a1      	str	r1, [r4, #88]	; 0x58
 8005684:	f04f 0900 	mov.w	r9, #0
 8005688:	e7de      	b.n	8005648 <_printf_float+0x16c>
 800568a:	b913      	cbnz	r3, 8005692 <_printf_float+0x1b6>
 800568c:	6822      	ldr	r2, [r4, #0]
 800568e:	07d2      	lsls	r2, r2, #31
 8005690:	d501      	bpl.n	8005696 <_printf_float+0x1ba>
 8005692:	3302      	adds	r3, #2
 8005694:	e7f4      	b.n	8005680 <_printf_float+0x1a4>
 8005696:	2301      	movs	r3, #1
 8005698:	e7f2      	b.n	8005680 <_printf_float+0x1a4>
 800569a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800569e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056a0:	4299      	cmp	r1, r3
 80056a2:	db05      	blt.n	80056b0 <_printf_float+0x1d4>
 80056a4:	6823      	ldr	r3, [r4, #0]
 80056a6:	6121      	str	r1, [r4, #16]
 80056a8:	07d8      	lsls	r0, r3, #31
 80056aa:	d5ea      	bpl.n	8005682 <_printf_float+0x1a6>
 80056ac:	1c4b      	adds	r3, r1, #1
 80056ae:	e7e7      	b.n	8005680 <_printf_float+0x1a4>
 80056b0:	2900      	cmp	r1, #0
 80056b2:	bfd4      	ite	le
 80056b4:	f1c1 0202 	rsble	r2, r1, #2
 80056b8:	2201      	movgt	r2, #1
 80056ba:	4413      	add	r3, r2
 80056bc:	e7e0      	b.n	8005680 <_printf_float+0x1a4>
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	055a      	lsls	r2, r3, #21
 80056c2:	d407      	bmi.n	80056d4 <_printf_float+0x1f8>
 80056c4:	6923      	ldr	r3, [r4, #16]
 80056c6:	4642      	mov	r2, r8
 80056c8:	4631      	mov	r1, r6
 80056ca:	4628      	mov	r0, r5
 80056cc:	47b8      	blx	r7
 80056ce:	3001      	adds	r0, #1
 80056d0:	d12c      	bne.n	800572c <_printf_float+0x250>
 80056d2:	e764      	b.n	800559e <_printf_float+0xc2>
 80056d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056d8:	f240 80e0 	bls.w	800589c <_printf_float+0x3c0>
 80056dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056e0:	2200      	movs	r2, #0
 80056e2:	2300      	movs	r3, #0
 80056e4:	f7fb f9f8 	bl	8000ad8 <__aeabi_dcmpeq>
 80056e8:	2800      	cmp	r0, #0
 80056ea:	d034      	beq.n	8005756 <_printf_float+0x27a>
 80056ec:	4a37      	ldr	r2, [pc, #220]	; (80057cc <_printf_float+0x2f0>)
 80056ee:	2301      	movs	r3, #1
 80056f0:	4631      	mov	r1, r6
 80056f2:	4628      	mov	r0, r5
 80056f4:	47b8      	blx	r7
 80056f6:	3001      	adds	r0, #1
 80056f8:	f43f af51 	beq.w	800559e <_printf_float+0xc2>
 80056fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005700:	429a      	cmp	r2, r3
 8005702:	db02      	blt.n	800570a <_printf_float+0x22e>
 8005704:	6823      	ldr	r3, [r4, #0]
 8005706:	07d8      	lsls	r0, r3, #31
 8005708:	d510      	bpl.n	800572c <_printf_float+0x250>
 800570a:	ee18 3a10 	vmov	r3, s16
 800570e:	4652      	mov	r2, sl
 8005710:	4631      	mov	r1, r6
 8005712:	4628      	mov	r0, r5
 8005714:	47b8      	blx	r7
 8005716:	3001      	adds	r0, #1
 8005718:	f43f af41 	beq.w	800559e <_printf_float+0xc2>
 800571c:	f04f 0800 	mov.w	r8, #0
 8005720:	f104 091a 	add.w	r9, r4, #26
 8005724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005726:	3b01      	subs	r3, #1
 8005728:	4543      	cmp	r3, r8
 800572a:	dc09      	bgt.n	8005740 <_printf_float+0x264>
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	079b      	lsls	r3, r3, #30
 8005730:	f100 8105 	bmi.w	800593e <_printf_float+0x462>
 8005734:	68e0      	ldr	r0, [r4, #12]
 8005736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005738:	4298      	cmp	r0, r3
 800573a:	bfb8      	it	lt
 800573c:	4618      	movlt	r0, r3
 800573e:	e730      	b.n	80055a2 <_printf_float+0xc6>
 8005740:	2301      	movs	r3, #1
 8005742:	464a      	mov	r2, r9
 8005744:	4631      	mov	r1, r6
 8005746:	4628      	mov	r0, r5
 8005748:	47b8      	blx	r7
 800574a:	3001      	adds	r0, #1
 800574c:	f43f af27 	beq.w	800559e <_printf_float+0xc2>
 8005750:	f108 0801 	add.w	r8, r8, #1
 8005754:	e7e6      	b.n	8005724 <_printf_float+0x248>
 8005756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005758:	2b00      	cmp	r3, #0
 800575a:	dc39      	bgt.n	80057d0 <_printf_float+0x2f4>
 800575c:	4a1b      	ldr	r2, [pc, #108]	; (80057cc <_printf_float+0x2f0>)
 800575e:	2301      	movs	r3, #1
 8005760:	4631      	mov	r1, r6
 8005762:	4628      	mov	r0, r5
 8005764:	47b8      	blx	r7
 8005766:	3001      	adds	r0, #1
 8005768:	f43f af19 	beq.w	800559e <_printf_float+0xc2>
 800576c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005770:	4313      	orrs	r3, r2
 8005772:	d102      	bne.n	800577a <_printf_float+0x29e>
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	07d9      	lsls	r1, r3, #31
 8005778:	d5d8      	bpl.n	800572c <_printf_float+0x250>
 800577a:	ee18 3a10 	vmov	r3, s16
 800577e:	4652      	mov	r2, sl
 8005780:	4631      	mov	r1, r6
 8005782:	4628      	mov	r0, r5
 8005784:	47b8      	blx	r7
 8005786:	3001      	adds	r0, #1
 8005788:	f43f af09 	beq.w	800559e <_printf_float+0xc2>
 800578c:	f04f 0900 	mov.w	r9, #0
 8005790:	f104 0a1a 	add.w	sl, r4, #26
 8005794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005796:	425b      	negs	r3, r3
 8005798:	454b      	cmp	r3, r9
 800579a:	dc01      	bgt.n	80057a0 <_printf_float+0x2c4>
 800579c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800579e:	e792      	b.n	80056c6 <_printf_float+0x1ea>
 80057a0:	2301      	movs	r3, #1
 80057a2:	4652      	mov	r2, sl
 80057a4:	4631      	mov	r1, r6
 80057a6:	4628      	mov	r0, r5
 80057a8:	47b8      	blx	r7
 80057aa:	3001      	adds	r0, #1
 80057ac:	f43f aef7 	beq.w	800559e <_printf_float+0xc2>
 80057b0:	f109 0901 	add.w	r9, r9, #1
 80057b4:	e7ee      	b.n	8005794 <_printf_float+0x2b8>
 80057b6:	bf00      	nop
 80057b8:	7fefffff 	.word	0x7fefffff
 80057bc:	08008290 	.word	0x08008290
 80057c0:	08008294 	.word	0x08008294
 80057c4:	0800829c 	.word	0x0800829c
 80057c8:	08008298 	.word	0x08008298
 80057cc:	080082a0 	.word	0x080082a0
 80057d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057d4:	429a      	cmp	r2, r3
 80057d6:	bfa8      	it	ge
 80057d8:	461a      	movge	r2, r3
 80057da:	2a00      	cmp	r2, #0
 80057dc:	4691      	mov	r9, r2
 80057de:	dc37      	bgt.n	8005850 <_printf_float+0x374>
 80057e0:	f04f 0b00 	mov.w	fp, #0
 80057e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057e8:	f104 021a 	add.w	r2, r4, #26
 80057ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057ee:	9305      	str	r3, [sp, #20]
 80057f0:	eba3 0309 	sub.w	r3, r3, r9
 80057f4:	455b      	cmp	r3, fp
 80057f6:	dc33      	bgt.n	8005860 <_printf_float+0x384>
 80057f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057fc:	429a      	cmp	r2, r3
 80057fe:	db3b      	blt.n	8005878 <_printf_float+0x39c>
 8005800:	6823      	ldr	r3, [r4, #0]
 8005802:	07da      	lsls	r2, r3, #31
 8005804:	d438      	bmi.n	8005878 <_printf_float+0x39c>
 8005806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005808:	9a05      	ldr	r2, [sp, #20]
 800580a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800580c:	1a9a      	subs	r2, r3, r2
 800580e:	eba3 0901 	sub.w	r9, r3, r1
 8005812:	4591      	cmp	r9, r2
 8005814:	bfa8      	it	ge
 8005816:	4691      	movge	r9, r2
 8005818:	f1b9 0f00 	cmp.w	r9, #0
 800581c:	dc35      	bgt.n	800588a <_printf_float+0x3ae>
 800581e:	f04f 0800 	mov.w	r8, #0
 8005822:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005826:	f104 0a1a 	add.w	sl, r4, #26
 800582a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800582e:	1a9b      	subs	r3, r3, r2
 8005830:	eba3 0309 	sub.w	r3, r3, r9
 8005834:	4543      	cmp	r3, r8
 8005836:	f77f af79 	ble.w	800572c <_printf_float+0x250>
 800583a:	2301      	movs	r3, #1
 800583c:	4652      	mov	r2, sl
 800583e:	4631      	mov	r1, r6
 8005840:	4628      	mov	r0, r5
 8005842:	47b8      	blx	r7
 8005844:	3001      	adds	r0, #1
 8005846:	f43f aeaa 	beq.w	800559e <_printf_float+0xc2>
 800584a:	f108 0801 	add.w	r8, r8, #1
 800584e:	e7ec      	b.n	800582a <_printf_float+0x34e>
 8005850:	4613      	mov	r3, r2
 8005852:	4631      	mov	r1, r6
 8005854:	4642      	mov	r2, r8
 8005856:	4628      	mov	r0, r5
 8005858:	47b8      	blx	r7
 800585a:	3001      	adds	r0, #1
 800585c:	d1c0      	bne.n	80057e0 <_printf_float+0x304>
 800585e:	e69e      	b.n	800559e <_printf_float+0xc2>
 8005860:	2301      	movs	r3, #1
 8005862:	4631      	mov	r1, r6
 8005864:	4628      	mov	r0, r5
 8005866:	9205      	str	r2, [sp, #20]
 8005868:	47b8      	blx	r7
 800586a:	3001      	adds	r0, #1
 800586c:	f43f ae97 	beq.w	800559e <_printf_float+0xc2>
 8005870:	9a05      	ldr	r2, [sp, #20]
 8005872:	f10b 0b01 	add.w	fp, fp, #1
 8005876:	e7b9      	b.n	80057ec <_printf_float+0x310>
 8005878:	ee18 3a10 	vmov	r3, s16
 800587c:	4652      	mov	r2, sl
 800587e:	4631      	mov	r1, r6
 8005880:	4628      	mov	r0, r5
 8005882:	47b8      	blx	r7
 8005884:	3001      	adds	r0, #1
 8005886:	d1be      	bne.n	8005806 <_printf_float+0x32a>
 8005888:	e689      	b.n	800559e <_printf_float+0xc2>
 800588a:	9a05      	ldr	r2, [sp, #20]
 800588c:	464b      	mov	r3, r9
 800588e:	4442      	add	r2, r8
 8005890:	4631      	mov	r1, r6
 8005892:	4628      	mov	r0, r5
 8005894:	47b8      	blx	r7
 8005896:	3001      	adds	r0, #1
 8005898:	d1c1      	bne.n	800581e <_printf_float+0x342>
 800589a:	e680      	b.n	800559e <_printf_float+0xc2>
 800589c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800589e:	2a01      	cmp	r2, #1
 80058a0:	dc01      	bgt.n	80058a6 <_printf_float+0x3ca>
 80058a2:	07db      	lsls	r3, r3, #31
 80058a4:	d538      	bpl.n	8005918 <_printf_float+0x43c>
 80058a6:	2301      	movs	r3, #1
 80058a8:	4642      	mov	r2, r8
 80058aa:	4631      	mov	r1, r6
 80058ac:	4628      	mov	r0, r5
 80058ae:	47b8      	blx	r7
 80058b0:	3001      	adds	r0, #1
 80058b2:	f43f ae74 	beq.w	800559e <_printf_float+0xc2>
 80058b6:	ee18 3a10 	vmov	r3, s16
 80058ba:	4652      	mov	r2, sl
 80058bc:	4631      	mov	r1, r6
 80058be:	4628      	mov	r0, r5
 80058c0:	47b8      	blx	r7
 80058c2:	3001      	adds	r0, #1
 80058c4:	f43f ae6b 	beq.w	800559e <_printf_float+0xc2>
 80058c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80058cc:	2200      	movs	r2, #0
 80058ce:	2300      	movs	r3, #0
 80058d0:	f7fb f902 	bl	8000ad8 <__aeabi_dcmpeq>
 80058d4:	b9d8      	cbnz	r0, 800590e <_printf_float+0x432>
 80058d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058d8:	f108 0201 	add.w	r2, r8, #1
 80058dc:	3b01      	subs	r3, #1
 80058de:	4631      	mov	r1, r6
 80058e0:	4628      	mov	r0, r5
 80058e2:	47b8      	blx	r7
 80058e4:	3001      	adds	r0, #1
 80058e6:	d10e      	bne.n	8005906 <_printf_float+0x42a>
 80058e8:	e659      	b.n	800559e <_printf_float+0xc2>
 80058ea:	2301      	movs	r3, #1
 80058ec:	4652      	mov	r2, sl
 80058ee:	4631      	mov	r1, r6
 80058f0:	4628      	mov	r0, r5
 80058f2:	47b8      	blx	r7
 80058f4:	3001      	adds	r0, #1
 80058f6:	f43f ae52 	beq.w	800559e <_printf_float+0xc2>
 80058fa:	f108 0801 	add.w	r8, r8, #1
 80058fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005900:	3b01      	subs	r3, #1
 8005902:	4543      	cmp	r3, r8
 8005904:	dcf1      	bgt.n	80058ea <_printf_float+0x40e>
 8005906:	464b      	mov	r3, r9
 8005908:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800590c:	e6dc      	b.n	80056c8 <_printf_float+0x1ec>
 800590e:	f04f 0800 	mov.w	r8, #0
 8005912:	f104 0a1a 	add.w	sl, r4, #26
 8005916:	e7f2      	b.n	80058fe <_printf_float+0x422>
 8005918:	2301      	movs	r3, #1
 800591a:	4642      	mov	r2, r8
 800591c:	e7df      	b.n	80058de <_printf_float+0x402>
 800591e:	2301      	movs	r3, #1
 8005920:	464a      	mov	r2, r9
 8005922:	4631      	mov	r1, r6
 8005924:	4628      	mov	r0, r5
 8005926:	47b8      	blx	r7
 8005928:	3001      	adds	r0, #1
 800592a:	f43f ae38 	beq.w	800559e <_printf_float+0xc2>
 800592e:	f108 0801 	add.w	r8, r8, #1
 8005932:	68e3      	ldr	r3, [r4, #12]
 8005934:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005936:	1a5b      	subs	r3, r3, r1
 8005938:	4543      	cmp	r3, r8
 800593a:	dcf0      	bgt.n	800591e <_printf_float+0x442>
 800593c:	e6fa      	b.n	8005734 <_printf_float+0x258>
 800593e:	f04f 0800 	mov.w	r8, #0
 8005942:	f104 0919 	add.w	r9, r4, #25
 8005946:	e7f4      	b.n	8005932 <_printf_float+0x456>

08005948 <_printf_common>:
 8005948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800594c:	4616      	mov	r6, r2
 800594e:	4699      	mov	r9, r3
 8005950:	688a      	ldr	r2, [r1, #8]
 8005952:	690b      	ldr	r3, [r1, #16]
 8005954:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005958:	4293      	cmp	r3, r2
 800595a:	bfb8      	it	lt
 800595c:	4613      	movlt	r3, r2
 800595e:	6033      	str	r3, [r6, #0]
 8005960:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005964:	4607      	mov	r7, r0
 8005966:	460c      	mov	r4, r1
 8005968:	b10a      	cbz	r2, 800596e <_printf_common+0x26>
 800596a:	3301      	adds	r3, #1
 800596c:	6033      	str	r3, [r6, #0]
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	0699      	lsls	r1, r3, #26
 8005972:	bf42      	ittt	mi
 8005974:	6833      	ldrmi	r3, [r6, #0]
 8005976:	3302      	addmi	r3, #2
 8005978:	6033      	strmi	r3, [r6, #0]
 800597a:	6825      	ldr	r5, [r4, #0]
 800597c:	f015 0506 	ands.w	r5, r5, #6
 8005980:	d106      	bne.n	8005990 <_printf_common+0x48>
 8005982:	f104 0a19 	add.w	sl, r4, #25
 8005986:	68e3      	ldr	r3, [r4, #12]
 8005988:	6832      	ldr	r2, [r6, #0]
 800598a:	1a9b      	subs	r3, r3, r2
 800598c:	42ab      	cmp	r3, r5
 800598e:	dc26      	bgt.n	80059de <_printf_common+0x96>
 8005990:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005994:	1e13      	subs	r3, r2, #0
 8005996:	6822      	ldr	r2, [r4, #0]
 8005998:	bf18      	it	ne
 800599a:	2301      	movne	r3, #1
 800599c:	0692      	lsls	r2, r2, #26
 800599e:	d42b      	bmi.n	80059f8 <_printf_common+0xb0>
 80059a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059a4:	4649      	mov	r1, r9
 80059a6:	4638      	mov	r0, r7
 80059a8:	47c0      	blx	r8
 80059aa:	3001      	adds	r0, #1
 80059ac:	d01e      	beq.n	80059ec <_printf_common+0xa4>
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	68e5      	ldr	r5, [r4, #12]
 80059b2:	6832      	ldr	r2, [r6, #0]
 80059b4:	f003 0306 	and.w	r3, r3, #6
 80059b8:	2b04      	cmp	r3, #4
 80059ba:	bf08      	it	eq
 80059bc:	1aad      	subeq	r5, r5, r2
 80059be:	68a3      	ldr	r3, [r4, #8]
 80059c0:	6922      	ldr	r2, [r4, #16]
 80059c2:	bf0c      	ite	eq
 80059c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059c8:	2500      	movne	r5, #0
 80059ca:	4293      	cmp	r3, r2
 80059cc:	bfc4      	itt	gt
 80059ce:	1a9b      	subgt	r3, r3, r2
 80059d0:	18ed      	addgt	r5, r5, r3
 80059d2:	2600      	movs	r6, #0
 80059d4:	341a      	adds	r4, #26
 80059d6:	42b5      	cmp	r5, r6
 80059d8:	d11a      	bne.n	8005a10 <_printf_common+0xc8>
 80059da:	2000      	movs	r0, #0
 80059dc:	e008      	b.n	80059f0 <_printf_common+0xa8>
 80059de:	2301      	movs	r3, #1
 80059e0:	4652      	mov	r2, sl
 80059e2:	4649      	mov	r1, r9
 80059e4:	4638      	mov	r0, r7
 80059e6:	47c0      	blx	r8
 80059e8:	3001      	adds	r0, #1
 80059ea:	d103      	bne.n	80059f4 <_printf_common+0xac>
 80059ec:	f04f 30ff 	mov.w	r0, #4294967295
 80059f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f4:	3501      	adds	r5, #1
 80059f6:	e7c6      	b.n	8005986 <_printf_common+0x3e>
 80059f8:	18e1      	adds	r1, r4, r3
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	2030      	movs	r0, #48	; 0x30
 80059fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a02:	4422      	add	r2, r4
 8005a04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a0c:	3302      	adds	r3, #2
 8005a0e:	e7c7      	b.n	80059a0 <_printf_common+0x58>
 8005a10:	2301      	movs	r3, #1
 8005a12:	4622      	mov	r2, r4
 8005a14:	4649      	mov	r1, r9
 8005a16:	4638      	mov	r0, r7
 8005a18:	47c0      	blx	r8
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	d0e6      	beq.n	80059ec <_printf_common+0xa4>
 8005a1e:	3601      	adds	r6, #1
 8005a20:	e7d9      	b.n	80059d6 <_printf_common+0x8e>
	...

08005a24 <_printf_i>:
 8005a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a28:	7e0f      	ldrb	r7, [r1, #24]
 8005a2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a2c:	2f78      	cmp	r7, #120	; 0x78
 8005a2e:	4691      	mov	r9, r2
 8005a30:	4680      	mov	r8, r0
 8005a32:	460c      	mov	r4, r1
 8005a34:	469a      	mov	sl, r3
 8005a36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a3a:	d807      	bhi.n	8005a4c <_printf_i+0x28>
 8005a3c:	2f62      	cmp	r7, #98	; 0x62
 8005a3e:	d80a      	bhi.n	8005a56 <_printf_i+0x32>
 8005a40:	2f00      	cmp	r7, #0
 8005a42:	f000 80d8 	beq.w	8005bf6 <_printf_i+0x1d2>
 8005a46:	2f58      	cmp	r7, #88	; 0x58
 8005a48:	f000 80a3 	beq.w	8005b92 <_printf_i+0x16e>
 8005a4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a54:	e03a      	b.n	8005acc <_printf_i+0xa8>
 8005a56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a5a:	2b15      	cmp	r3, #21
 8005a5c:	d8f6      	bhi.n	8005a4c <_printf_i+0x28>
 8005a5e:	a101      	add	r1, pc, #4	; (adr r1, 8005a64 <_printf_i+0x40>)
 8005a60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a64:	08005abd 	.word	0x08005abd
 8005a68:	08005ad1 	.word	0x08005ad1
 8005a6c:	08005a4d 	.word	0x08005a4d
 8005a70:	08005a4d 	.word	0x08005a4d
 8005a74:	08005a4d 	.word	0x08005a4d
 8005a78:	08005a4d 	.word	0x08005a4d
 8005a7c:	08005ad1 	.word	0x08005ad1
 8005a80:	08005a4d 	.word	0x08005a4d
 8005a84:	08005a4d 	.word	0x08005a4d
 8005a88:	08005a4d 	.word	0x08005a4d
 8005a8c:	08005a4d 	.word	0x08005a4d
 8005a90:	08005bdd 	.word	0x08005bdd
 8005a94:	08005b01 	.word	0x08005b01
 8005a98:	08005bbf 	.word	0x08005bbf
 8005a9c:	08005a4d 	.word	0x08005a4d
 8005aa0:	08005a4d 	.word	0x08005a4d
 8005aa4:	08005bff 	.word	0x08005bff
 8005aa8:	08005a4d 	.word	0x08005a4d
 8005aac:	08005b01 	.word	0x08005b01
 8005ab0:	08005a4d 	.word	0x08005a4d
 8005ab4:	08005a4d 	.word	0x08005a4d
 8005ab8:	08005bc7 	.word	0x08005bc7
 8005abc:	682b      	ldr	r3, [r5, #0]
 8005abe:	1d1a      	adds	r2, r3, #4
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	602a      	str	r2, [r5, #0]
 8005ac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ac8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005acc:	2301      	movs	r3, #1
 8005ace:	e0a3      	b.n	8005c18 <_printf_i+0x1f4>
 8005ad0:	6820      	ldr	r0, [r4, #0]
 8005ad2:	6829      	ldr	r1, [r5, #0]
 8005ad4:	0606      	lsls	r6, r0, #24
 8005ad6:	f101 0304 	add.w	r3, r1, #4
 8005ada:	d50a      	bpl.n	8005af2 <_printf_i+0xce>
 8005adc:	680e      	ldr	r6, [r1, #0]
 8005ade:	602b      	str	r3, [r5, #0]
 8005ae0:	2e00      	cmp	r6, #0
 8005ae2:	da03      	bge.n	8005aec <_printf_i+0xc8>
 8005ae4:	232d      	movs	r3, #45	; 0x2d
 8005ae6:	4276      	negs	r6, r6
 8005ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aec:	485e      	ldr	r0, [pc, #376]	; (8005c68 <_printf_i+0x244>)
 8005aee:	230a      	movs	r3, #10
 8005af0:	e019      	b.n	8005b26 <_printf_i+0x102>
 8005af2:	680e      	ldr	r6, [r1, #0]
 8005af4:	602b      	str	r3, [r5, #0]
 8005af6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005afa:	bf18      	it	ne
 8005afc:	b236      	sxthne	r6, r6
 8005afe:	e7ef      	b.n	8005ae0 <_printf_i+0xbc>
 8005b00:	682b      	ldr	r3, [r5, #0]
 8005b02:	6820      	ldr	r0, [r4, #0]
 8005b04:	1d19      	adds	r1, r3, #4
 8005b06:	6029      	str	r1, [r5, #0]
 8005b08:	0601      	lsls	r1, r0, #24
 8005b0a:	d501      	bpl.n	8005b10 <_printf_i+0xec>
 8005b0c:	681e      	ldr	r6, [r3, #0]
 8005b0e:	e002      	b.n	8005b16 <_printf_i+0xf2>
 8005b10:	0646      	lsls	r6, r0, #25
 8005b12:	d5fb      	bpl.n	8005b0c <_printf_i+0xe8>
 8005b14:	881e      	ldrh	r6, [r3, #0]
 8005b16:	4854      	ldr	r0, [pc, #336]	; (8005c68 <_printf_i+0x244>)
 8005b18:	2f6f      	cmp	r7, #111	; 0x6f
 8005b1a:	bf0c      	ite	eq
 8005b1c:	2308      	moveq	r3, #8
 8005b1e:	230a      	movne	r3, #10
 8005b20:	2100      	movs	r1, #0
 8005b22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b26:	6865      	ldr	r5, [r4, #4]
 8005b28:	60a5      	str	r5, [r4, #8]
 8005b2a:	2d00      	cmp	r5, #0
 8005b2c:	bfa2      	ittt	ge
 8005b2e:	6821      	ldrge	r1, [r4, #0]
 8005b30:	f021 0104 	bicge.w	r1, r1, #4
 8005b34:	6021      	strge	r1, [r4, #0]
 8005b36:	b90e      	cbnz	r6, 8005b3c <_printf_i+0x118>
 8005b38:	2d00      	cmp	r5, #0
 8005b3a:	d04d      	beq.n	8005bd8 <_printf_i+0x1b4>
 8005b3c:	4615      	mov	r5, r2
 8005b3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b42:	fb03 6711 	mls	r7, r3, r1, r6
 8005b46:	5dc7      	ldrb	r7, [r0, r7]
 8005b48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b4c:	4637      	mov	r7, r6
 8005b4e:	42bb      	cmp	r3, r7
 8005b50:	460e      	mov	r6, r1
 8005b52:	d9f4      	bls.n	8005b3e <_printf_i+0x11a>
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d10b      	bne.n	8005b70 <_printf_i+0x14c>
 8005b58:	6823      	ldr	r3, [r4, #0]
 8005b5a:	07de      	lsls	r6, r3, #31
 8005b5c:	d508      	bpl.n	8005b70 <_printf_i+0x14c>
 8005b5e:	6923      	ldr	r3, [r4, #16]
 8005b60:	6861      	ldr	r1, [r4, #4]
 8005b62:	4299      	cmp	r1, r3
 8005b64:	bfde      	ittt	le
 8005b66:	2330      	movle	r3, #48	; 0x30
 8005b68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b70:	1b52      	subs	r2, r2, r5
 8005b72:	6122      	str	r2, [r4, #16]
 8005b74:	f8cd a000 	str.w	sl, [sp]
 8005b78:	464b      	mov	r3, r9
 8005b7a:	aa03      	add	r2, sp, #12
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	4640      	mov	r0, r8
 8005b80:	f7ff fee2 	bl	8005948 <_printf_common>
 8005b84:	3001      	adds	r0, #1
 8005b86:	d14c      	bne.n	8005c22 <_printf_i+0x1fe>
 8005b88:	f04f 30ff 	mov.w	r0, #4294967295
 8005b8c:	b004      	add	sp, #16
 8005b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b92:	4835      	ldr	r0, [pc, #212]	; (8005c68 <_printf_i+0x244>)
 8005b94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005b98:	6829      	ldr	r1, [r5, #0]
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ba0:	6029      	str	r1, [r5, #0]
 8005ba2:	061d      	lsls	r5, r3, #24
 8005ba4:	d514      	bpl.n	8005bd0 <_printf_i+0x1ac>
 8005ba6:	07df      	lsls	r7, r3, #31
 8005ba8:	bf44      	itt	mi
 8005baa:	f043 0320 	orrmi.w	r3, r3, #32
 8005bae:	6023      	strmi	r3, [r4, #0]
 8005bb0:	b91e      	cbnz	r6, 8005bba <_printf_i+0x196>
 8005bb2:	6823      	ldr	r3, [r4, #0]
 8005bb4:	f023 0320 	bic.w	r3, r3, #32
 8005bb8:	6023      	str	r3, [r4, #0]
 8005bba:	2310      	movs	r3, #16
 8005bbc:	e7b0      	b.n	8005b20 <_printf_i+0xfc>
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	f043 0320 	orr.w	r3, r3, #32
 8005bc4:	6023      	str	r3, [r4, #0]
 8005bc6:	2378      	movs	r3, #120	; 0x78
 8005bc8:	4828      	ldr	r0, [pc, #160]	; (8005c6c <_printf_i+0x248>)
 8005bca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005bce:	e7e3      	b.n	8005b98 <_printf_i+0x174>
 8005bd0:	0659      	lsls	r1, r3, #25
 8005bd2:	bf48      	it	mi
 8005bd4:	b2b6      	uxthmi	r6, r6
 8005bd6:	e7e6      	b.n	8005ba6 <_printf_i+0x182>
 8005bd8:	4615      	mov	r5, r2
 8005bda:	e7bb      	b.n	8005b54 <_printf_i+0x130>
 8005bdc:	682b      	ldr	r3, [r5, #0]
 8005bde:	6826      	ldr	r6, [r4, #0]
 8005be0:	6961      	ldr	r1, [r4, #20]
 8005be2:	1d18      	adds	r0, r3, #4
 8005be4:	6028      	str	r0, [r5, #0]
 8005be6:	0635      	lsls	r5, r6, #24
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	d501      	bpl.n	8005bf0 <_printf_i+0x1cc>
 8005bec:	6019      	str	r1, [r3, #0]
 8005bee:	e002      	b.n	8005bf6 <_printf_i+0x1d2>
 8005bf0:	0670      	lsls	r0, r6, #25
 8005bf2:	d5fb      	bpl.n	8005bec <_printf_i+0x1c8>
 8005bf4:	8019      	strh	r1, [r3, #0]
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	6123      	str	r3, [r4, #16]
 8005bfa:	4615      	mov	r5, r2
 8005bfc:	e7ba      	b.n	8005b74 <_printf_i+0x150>
 8005bfe:	682b      	ldr	r3, [r5, #0]
 8005c00:	1d1a      	adds	r2, r3, #4
 8005c02:	602a      	str	r2, [r5, #0]
 8005c04:	681d      	ldr	r5, [r3, #0]
 8005c06:	6862      	ldr	r2, [r4, #4]
 8005c08:	2100      	movs	r1, #0
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	f7fa faf0 	bl	80001f0 <memchr>
 8005c10:	b108      	cbz	r0, 8005c16 <_printf_i+0x1f2>
 8005c12:	1b40      	subs	r0, r0, r5
 8005c14:	6060      	str	r0, [r4, #4]
 8005c16:	6863      	ldr	r3, [r4, #4]
 8005c18:	6123      	str	r3, [r4, #16]
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c20:	e7a8      	b.n	8005b74 <_printf_i+0x150>
 8005c22:	6923      	ldr	r3, [r4, #16]
 8005c24:	462a      	mov	r2, r5
 8005c26:	4649      	mov	r1, r9
 8005c28:	4640      	mov	r0, r8
 8005c2a:	47d0      	blx	sl
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	d0ab      	beq.n	8005b88 <_printf_i+0x164>
 8005c30:	6823      	ldr	r3, [r4, #0]
 8005c32:	079b      	lsls	r3, r3, #30
 8005c34:	d413      	bmi.n	8005c5e <_printf_i+0x23a>
 8005c36:	68e0      	ldr	r0, [r4, #12]
 8005c38:	9b03      	ldr	r3, [sp, #12]
 8005c3a:	4298      	cmp	r0, r3
 8005c3c:	bfb8      	it	lt
 8005c3e:	4618      	movlt	r0, r3
 8005c40:	e7a4      	b.n	8005b8c <_printf_i+0x168>
 8005c42:	2301      	movs	r3, #1
 8005c44:	4632      	mov	r2, r6
 8005c46:	4649      	mov	r1, r9
 8005c48:	4640      	mov	r0, r8
 8005c4a:	47d0      	blx	sl
 8005c4c:	3001      	adds	r0, #1
 8005c4e:	d09b      	beq.n	8005b88 <_printf_i+0x164>
 8005c50:	3501      	adds	r5, #1
 8005c52:	68e3      	ldr	r3, [r4, #12]
 8005c54:	9903      	ldr	r1, [sp, #12]
 8005c56:	1a5b      	subs	r3, r3, r1
 8005c58:	42ab      	cmp	r3, r5
 8005c5a:	dcf2      	bgt.n	8005c42 <_printf_i+0x21e>
 8005c5c:	e7eb      	b.n	8005c36 <_printf_i+0x212>
 8005c5e:	2500      	movs	r5, #0
 8005c60:	f104 0619 	add.w	r6, r4, #25
 8005c64:	e7f5      	b.n	8005c52 <_printf_i+0x22e>
 8005c66:	bf00      	nop
 8005c68:	080082a2 	.word	0x080082a2
 8005c6c:	080082b3 	.word	0x080082b3

08005c70 <_vsiprintf_r>:
 8005c70:	b500      	push	{lr}
 8005c72:	b09b      	sub	sp, #108	; 0x6c
 8005c74:	9100      	str	r1, [sp, #0]
 8005c76:	9104      	str	r1, [sp, #16]
 8005c78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c7c:	9105      	str	r1, [sp, #20]
 8005c7e:	9102      	str	r1, [sp, #8]
 8005c80:	4905      	ldr	r1, [pc, #20]	; (8005c98 <_vsiprintf_r+0x28>)
 8005c82:	9103      	str	r1, [sp, #12]
 8005c84:	4669      	mov	r1, sp
 8005c86:	f001 fb6f 	bl	8007368 <_svfiprintf_r>
 8005c8a:	9b00      	ldr	r3, [sp, #0]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	701a      	strb	r2, [r3, #0]
 8005c90:	b01b      	add	sp, #108	; 0x6c
 8005c92:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c96:	bf00      	nop
 8005c98:	ffff0208 	.word	0xffff0208

08005c9c <vsiprintf>:
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	460a      	mov	r2, r1
 8005ca0:	4601      	mov	r1, r0
 8005ca2:	4802      	ldr	r0, [pc, #8]	; (8005cac <vsiprintf+0x10>)
 8005ca4:	6800      	ldr	r0, [r0, #0]
 8005ca6:	f7ff bfe3 	b.w	8005c70 <_vsiprintf_r>
 8005caa:	bf00      	nop
 8005cac:	20000010 	.word	0x20000010

08005cb0 <quorem>:
 8005cb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb4:	6903      	ldr	r3, [r0, #16]
 8005cb6:	690c      	ldr	r4, [r1, #16]
 8005cb8:	42a3      	cmp	r3, r4
 8005cba:	4607      	mov	r7, r0
 8005cbc:	f2c0 8081 	blt.w	8005dc2 <quorem+0x112>
 8005cc0:	3c01      	subs	r4, #1
 8005cc2:	f101 0814 	add.w	r8, r1, #20
 8005cc6:	f100 0514 	add.w	r5, r0, #20
 8005cca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cce:	9301      	str	r3, [sp, #4]
 8005cd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cd8:	3301      	adds	r3, #1
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005ce0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005ce4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005ce8:	d331      	bcc.n	8005d4e <quorem+0x9e>
 8005cea:	f04f 0e00 	mov.w	lr, #0
 8005cee:	4640      	mov	r0, r8
 8005cf0:	46ac      	mov	ip, r5
 8005cf2:	46f2      	mov	sl, lr
 8005cf4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005cf8:	b293      	uxth	r3, r2
 8005cfa:	fb06 e303 	mla	r3, r6, r3, lr
 8005cfe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	ebaa 0303 	sub.w	r3, sl, r3
 8005d08:	f8dc a000 	ldr.w	sl, [ip]
 8005d0c:	0c12      	lsrs	r2, r2, #16
 8005d0e:	fa13 f38a 	uxtah	r3, r3, sl
 8005d12:	fb06 e202 	mla	r2, r6, r2, lr
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	9b00      	ldr	r3, [sp, #0]
 8005d1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005d1e:	b292      	uxth	r2, r2
 8005d20:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005d24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d28:	f8bd 3000 	ldrh.w	r3, [sp]
 8005d2c:	4581      	cmp	r9, r0
 8005d2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d32:	f84c 3b04 	str.w	r3, [ip], #4
 8005d36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005d3a:	d2db      	bcs.n	8005cf4 <quorem+0x44>
 8005d3c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d40:	b92b      	cbnz	r3, 8005d4e <quorem+0x9e>
 8005d42:	9b01      	ldr	r3, [sp, #4]
 8005d44:	3b04      	subs	r3, #4
 8005d46:	429d      	cmp	r5, r3
 8005d48:	461a      	mov	r2, r3
 8005d4a:	d32e      	bcc.n	8005daa <quorem+0xfa>
 8005d4c:	613c      	str	r4, [r7, #16]
 8005d4e:	4638      	mov	r0, r7
 8005d50:	f001 f8b6 	bl	8006ec0 <__mcmp>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	db24      	blt.n	8005da2 <quorem+0xf2>
 8005d58:	3601      	adds	r6, #1
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	f04f 0c00 	mov.w	ip, #0
 8005d60:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d64:	f8d0 e000 	ldr.w	lr, [r0]
 8005d68:	b293      	uxth	r3, r2
 8005d6a:	ebac 0303 	sub.w	r3, ip, r3
 8005d6e:	0c12      	lsrs	r2, r2, #16
 8005d70:	fa13 f38e 	uxtah	r3, r3, lr
 8005d74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d82:	45c1      	cmp	r9, r8
 8005d84:	f840 3b04 	str.w	r3, [r0], #4
 8005d88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d8c:	d2e8      	bcs.n	8005d60 <quorem+0xb0>
 8005d8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d96:	b922      	cbnz	r2, 8005da2 <quorem+0xf2>
 8005d98:	3b04      	subs	r3, #4
 8005d9a:	429d      	cmp	r5, r3
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	d30a      	bcc.n	8005db6 <quorem+0x106>
 8005da0:	613c      	str	r4, [r7, #16]
 8005da2:	4630      	mov	r0, r6
 8005da4:	b003      	add	sp, #12
 8005da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005daa:	6812      	ldr	r2, [r2, #0]
 8005dac:	3b04      	subs	r3, #4
 8005dae:	2a00      	cmp	r2, #0
 8005db0:	d1cc      	bne.n	8005d4c <quorem+0x9c>
 8005db2:	3c01      	subs	r4, #1
 8005db4:	e7c7      	b.n	8005d46 <quorem+0x96>
 8005db6:	6812      	ldr	r2, [r2, #0]
 8005db8:	3b04      	subs	r3, #4
 8005dba:	2a00      	cmp	r2, #0
 8005dbc:	d1f0      	bne.n	8005da0 <quorem+0xf0>
 8005dbe:	3c01      	subs	r4, #1
 8005dc0:	e7eb      	b.n	8005d9a <quorem+0xea>
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	e7ee      	b.n	8005da4 <quorem+0xf4>
	...

08005dc8 <_dtoa_r>:
 8005dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dcc:	ed2d 8b04 	vpush	{d8-d9}
 8005dd0:	ec57 6b10 	vmov	r6, r7, d0
 8005dd4:	b093      	sub	sp, #76	; 0x4c
 8005dd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005dd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005ddc:	9106      	str	r1, [sp, #24]
 8005dde:	ee10 aa10 	vmov	sl, s0
 8005de2:	4604      	mov	r4, r0
 8005de4:	9209      	str	r2, [sp, #36]	; 0x24
 8005de6:	930c      	str	r3, [sp, #48]	; 0x30
 8005de8:	46bb      	mov	fp, r7
 8005dea:	b975      	cbnz	r5, 8005e0a <_dtoa_r+0x42>
 8005dec:	2010      	movs	r0, #16
 8005dee:	f000 fddd 	bl	80069ac <malloc>
 8005df2:	4602      	mov	r2, r0
 8005df4:	6260      	str	r0, [r4, #36]	; 0x24
 8005df6:	b920      	cbnz	r0, 8005e02 <_dtoa_r+0x3a>
 8005df8:	4ba7      	ldr	r3, [pc, #668]	; (8006098 <_dtoa_r+0x2d0>)
 8005dfa:	21ea      	movs	r1, #234	; 0xea
 8005dfc:	48a7      	ldr	r0, [pc, #668]	; (800609c <_dtoa_r+0x2d4>)
 8005dfe:	f001 fbc3 	bl	8007588 <__assert_func>
 8005e02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005e06:	6005      	str	r5, [r0, #0]
 8005e08:	60c5      	str	r5, [r0, #12]
 8005e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e0c:	6819      	ldr	r1, [r3, #0]
 8005e0e:	b151      	cbz	r1, 8005e26 <_dtoa_r+0x5e>
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	604a      	str	r2, [r1, #4]
 8005e14:	2301      	movs	r3, #1
 8005e16:	4093      	lsls	r3, r2
 8005e18:	608b      	str	r3, [r1, #8]
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f000 fe0e 	bl	8006a3c <_Bfree>
 8005e20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e22:	2200      	movs	r2, #0
 8005e24:	601a      	str	r2, [r3, #0]
 8005e26:	1e3b      	subs	r3, r7, #0
 8005e28:	bfaa      	itet	ge
 8005e2a:	2300      	movge	r3, #0
 8005e2c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005e30:	f8c8 3000 	strge.w	r3, [r8]
 8005e34:	4b9a      	ldr	r3, [pc, #616]	; (80060a0 <_dtoa_r+0x2d8>)
 8005e36:	bfbc      	itt	lt
 8005e38:	2201      	movlt	r2, #1
 8005e3a:	f8c8 2000 	strlt.w	r2, [r8]
 8005e3e:	ea33 030b 	bics.w	r3, r3, fp
 8005e42:	d11b      	bne.n	8005e7c <_dtoa_r+0xb4>
 8005e44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e46:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e4a:	6013      	str	r3, [r2, #0]
 8005e4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e50:	4333      	orrs	r3, r6
 8005e52:	f000 8592 	beq.w	800697a <_dtoa_r+0xbb2>
 8005e56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e58:	b963      	cbnz	r3, 8005e74 <_dtoa_r+0xac>
 8005e5a:	4b92      	ldr	r3, [pc, #584]	; (80060a4 <_dtoa_r+0x2dc>)
 8005e5c:	e022      	b.n	8005ea4 <_dtoa_r+0xdc>
 8005e5e:	4b92      	ldr	r3, [pc, #584]	; (80060a8 <_dtoa_r+0x2e0>)
 8005e60:	9301      	str	r3, [sp, #4]
 8005e62:	3308      	adds	r3, #8
 8005e64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e66:	6013      	str	r3, [r2, #0]
 8005e68:	9801      	ldr	r0, [sp, #4]
 8005e6a:	b013      	add	sp, #76	; 0x4c
 8005e6c:	ecbd 8b04 	vpop	{d8-d9}
 8005e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e74:	4b8b      	ldr	r3, [pc, #556]	; (80060a4 <_dtoa_r+0x2dc>)
 8005e76:	9301      	str	r3, [sp, #4]
 8005e78:	3303      	adds	r3, #3
 8005e7a:	e7f3      	b.n	8005e64 <_dtoa_r+0x9c>
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2300      	movs	r3, #0
 8005e80:	4650      	mov	r0, sl
 8005e82:	4659      	mov	r1, fp
 8005e84:	f7fa fe28 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e88:	ec4b ab19 	vmov	d9, sl, fp
 8005e8c:	4680      	mov	r8, r0
 8005e8e:	b158      	cbz	r0, 8005ea8 <_dtoa_r+0xe0>
 8005e90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e92:	2301      	movs	r3, #1
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f000 856b 	beq.w	8006974 <_dtoa_r+0xbac>
 8005e9e:	4883      	ldr	r0, [pc, #524]	; (80060ac <_dtoa_r+0x2e4>)
 8005ea0:	6018      	str	r0, [r3, #0]
 8005ea2:	1e43      	subs	r3, r0, #1
 8005ea4:	9301      	str	r3, [sp, #4]
 8005ea6:	e7df      	b.n	8005e68 <_dtoa_r+0xa0>
 8005ea8:	ec4b ab10 	vmov	d0, sl, fp
 8005eac:	aa10      	add	r2, sp, #64	; 0x40
 8005eae:	a911      	add	r1, sp, #68	; 0x44
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f001 f8ab 	bl	800700c <__d2b>
 8005eb6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005eba:	ee08 0a10 	vmov	s16, r0
 8005ebe:	2d00      	cmp	r5, #0
 8005ec0:	f000 8084 	beq.w	8005fcc <_dtoa_r+0x204>
 8005ec4:	ee19 3a90 	vmov	r3, s19
 8005ec8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ecc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005ed0:	4656      	mov	r6, sl
 8005ed2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005ed6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005eda:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005ede:	4b74      	ldr	r3, [pc, #464]	; (80060b0 <_dtoa_r+0x2e8>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	4630      	mov	r0, r6
 8005ee4:	4639      	mov	r1, r7
 8005ee6:	f7fa f9d7 	bl	8000298 <__aeabi_dsub>
 8005eea:	a365      	add	r3, pc, #404	; (adr r3, 8006080 <_dtoa_r+0x2b8>)
 8005eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef0:	f7fa fb8a 	bl	8000608 <__aeabi_dmul>
 8005ef4:	a364      	add	r3, pc, #400	; (adr r3, 8006088 <_dtoa_r+0x2c0>)
 8005ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efa:	f7fa f9cf 	bl	800029c <__adddf3>
 8005efe:	4606      	mov	r6, r0
 8005f00:	4628      	mov	r0, r5
 8005f02:	460f      	mov	r7, r1
 8005f04:	f7fa fb16 	bl	8000534 <__aeabi_i2d>
 8005f08:	a361      	add	r3, pc, #388	; (adr r3, 8006090 <_dtoa_r+0x2c8>)
 8005f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0e:	f7fa fb7b 	bl	8000608 <__aeabi_dmul>
 8005f12:	4602      	mov	r2, r0
 8005f14:	460b      	mov	r3, r1
 8005f16:	4630      	mov	r0, r6
 8005f18:	4639      	mov	r1, r7
 8005f1a:	f7fa f9bf 	bl	800029c <__adddf3>
 8005f1e:	4606      	mov	r6, r0
 8005f20:	460f      	mov	r7, r1
 8005f22:	f7fa fe21 	bl	8000b68 <__aeabi_d2iz>
 8005f26:	2200      	movs	r2, #0
 8005f28:	9000      	str	r0, [sp, #0]
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	4639      	mov	r1, r7
 8005f30:	f7fa fddc 	bl	8000aec <__aeabi_dcmplt>
 8005f34:	b150      	cbz	r0, 8005f4c <_dtoa_r+0x184>
 8005f36:	9800      	ldr	r0, [sp, #0]
 8005f38:	f7fa fafc 	bl	8000534 <__aeabi_i2d>
 8005f3c:	4632      	mov	r2, r6
 8005f3e:	463b      	mov	r3, r7
 8005f40:	f7fa fdca 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f44:	b910      	cbnz	r0, 8005f4c <_dtoa_r+0x184>
 8005f46:	9b00      	ldr	r3, [sp, #0]
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	9b00      	ldr	r3, [sp, #0]
 8005f4e:	2b16      	cmp	r3, #22
 8005f50:	d85a      	bhi.n	8006008 <_dtoa_r+0x240>
 8005f52:	9a00      	ldr	r2, [sp, #0]
 8005f54:	4b57      	ldr	r3, [pc, #348]	; (80060b4 <_dtoa_r+0x2ec>)
 8005f56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5e:	ec51 0b19 	vmov	r0, r1, d9
 8005f62:	f7fa fdc3 	bl	8000aec <__aeabi_dcmplt>
 8005f66:	2800      	cmp	r0, #0
 8005f68:	d050      	beq.n	800600c <_dtoa_r+0x244>
 8005f6a:	9b00      	ldr	r3, [sp, #0]
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	2300      	movs	r3, #0
 8005f72:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f76:	1b5d      	subs	r5, r3, r5
 8005f78:	1e6b      	subs	r3, r5, #1
 8005f7a:	9305      	str	r3, [sp, #20]
 8005f7c:	bf45      	ittet	mi
 8005f7e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005f82:	9304      	strmi	r3, [sp, #16]
 8005f84:	2300      	movpl	r3, #0
 8005f86:	2300      	movmi	r3, #0
 8005f88:	bf4c      	ite	mi
 8005f8a:	9305      	strmi	r3, [sp, #20]
 8005f8c:	9304      	strpl	r3, [sp, #16]
 8005f8e:	9b00      	ldr	r3, [sp, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	db3d      	blt.n	8006010 <_dtoa_r+0x248>
 8005f94:	9b05      	ldr	r3, [sp, #20]
 8005f96:	9a00      	ldr	r2, [sp, #0]
 8005f98:	920a      	str	r2, [sp, #40]	; 0x28
 8005f9a:	4413      	add	r3, r2
 8005f9c:	9305      	str	r3, [sp, #20]
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	9307      	str	r3, [sp, #28]
 8005fa2:	9b06      	ldr	r3, [sp, #24]
 8005fa4:	2b09      	cmp	r3, #9
 8005fa6:	f200 8089 	bhi.w	80060bc <_dtoa_r+0x2f4>
 8005faa:	2b05      	cmp	r3, #5
 8005fac:	bfc4      	itt	gt
 8005fae:	3b04      	subgt	r3, #4
 8005fb0:	9306      	strgt	r3, [sp, #24]
 8005fb2:	9b06      	ldr	r3, [sp, #24]
 8005fb4:	f1a3 0302 	sub.w	r3, r3, #2
 8005fb8:	bfcc      	ite	gt
 8005fba:	2500      	movgt	r5, #0
 8005fbc:	2501      	movle	r5, #1
 8005fbe:	2b03      	cmp	r3, #3
 8005fc0:	f200 8087 	bhi.w	80060d2 <_dtoa_r+0x30a>
 8005fc4:	e8df f003 	tbb	[pc, r3]
 8005fc8:	59383a2d 	.word	0x59383a2d
 8005fcc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005fd0:	441d      	add	r5, r3
 8005fd2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005fd6:	2b20      	cmp	r3, #32
 8005fd8:	bfc1      	itttt	gt
 8005fda:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005fde:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005fe2:	fa0b f303 	lslgt.w	r3, fp, r3
 8005fe6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005fea:	bfda      	itte	le
 8005fec:	f1c3 0320 	rsble	r3, r3, #32
 8005ff0:	fa06 f003 	lslle.w	r0, r6, r3
 8005ff4:	4318      	orrgt	r0, r3
 8005ff6:	f7fa fa8d 	bl	8000514 <__aeabi_ui2d>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	4606      	mov	r6, r0
 8005ffe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006002:	3d01      	subs	r5, #1
 8006004:	930e      	str	r3, [sp, #56]	; 0x38
 8006006:	e76a      	b.n	8005ede <_dtoa_r+0x116>
 8006008:	2301      	movs	r3, #1
 800600a:	e7b2      	b.n	8005f72 <_dtoa_r+0x1aa>
 800600c:	900b      	str	r0, [sp, #44]	; 0x2c
 800600e:	e7b1      	b.n	8005f74 <_dtoa_r+0x1ac>
 8006010:	9b04      	ldr	r3, [sp, #16]
 8006012:	9a00      	ldr	r2, [sp, #0]
 8006014:	1a9b      	subs	r3, r3, r2
 8006016:	9304      	str	r3, [sp, #16]
 8006018:	4253      	negs	r3, r2
 800601a:	9307      	str	r3, [sp, #28]
 800601c:	2300      	movs	r3, #0
 800601e:	930a      	str	r3, [sp, #40]	; 0x28
 8006020:	e7bf      	b.n	8005fa2 <_dtoa_r+0x1da>
 8006022:	2300      	movs	r3, #0
 8006024:	9308      	str	r3, [sp, #32]
 8006026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006028:	2b00      	cmp	r3, #0
 800602a:	dc55      	bgt.n	80060d8 <_dtoa_r+0x310>
 800602c:	2301      	movs	r3, #1
 800602e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006032:	461a      	mov	r2, r3
 8006034:	9209      	str	r2, [sp, #36]	; 0x24
 8006036:	e00c      	b.n	8006052 <_dtoa_r+0x28a>
 8006038:	2301      	movs	r3, #1
 800603a:	e7f3      	b.n	8006024 <_dtoa_r+0x25c>
 800603c:	2300      	movs	r3, #0
 800603e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006040:	9308      	str	r3, [sp, #32]
 8006042:	9b00      	ldr	r3, [sp, #0]
 8006044:	4413      	add	r3, r2
 8006046:	9302      	str	r3, [sp, #8]
 8006048:	3301      	adds	r3, #1
 800604a:	2b01      	cmp	r3, #1
 800604c:	9303      	str	r3, [sp, #12]
 800604e:	bfb8      	it	lt
 8006050:	2301      	movlt	r3, #1
 8006052:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006054:	2200      	movs	r2, #0
 8006056:	6042      	str	r2, [r0, #4]
 8006058:	2204      	movs	r2, #4
 800605a:	f102 0614 	add.w	r6, r2, #20
 800605e:	429e      	cmp	r6, r3
 8006060:	6841      	ldr	r1, [r0, #4]
 8006062:	d93d      	bls.n	80060e0 <_dtoa_r+0x318>
 8006064:	4620      	mov	r0, r4
 8006066:	f000 fca9 	bl	80069bc <_Balloc>
 800606a:	9001      	str	r0, [sp, #4]
 800606c:	2800      	cmp	r0, #0
 800606e:	d13b      	bne.n	80060e8 <_dtoa_r+0x320>
 8006070:	4b11      	ldr	r3, [pc, #68]	; (80060b8 <_dtoa_r+0x2f0>)
 8006072:	4602      	mov	r2, r0
 8006074:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006078:	e6c0      	b.n	8005dfc <_dtoa_r+0x34>
 800607a:	2301      	movs	r3, #1
 800607c:	e7df      	b.n	800603e <_dtoa_r+0x276>
 800607e:	bf00      	nop
 8006080:	636f4361 	.word	0x636f4361
 8006084:	3fd287a7 	.word	0x3fd287a7
 8006088:	8b60c8b3 	.word	0x8b60c8b3
 800608c:	3fc68a28 	.word	0x3fc68a28
 8006090:	509f79fb 	.word	0x509f79fb
 8006094:	3fd34413 	.word	0x3fd34413
 8006098:	080082d1 	.word	0x080082d1
 800609c:	080082e8 	.word	0x080082e8
 80060a0:	7ff00000 	.word	0x7ff00000
 80060a4:	080082cd 	.word	0x080082cd
 80060a8:	080082c4 	.word	0x080082c4
 80060ac:	080082a1 	.word	0x080082a1
 80060b0:	3ff80000 	.word	0x3ff80000
 80060b4:	080083d8 	.word	0x080083d8
 80060b8:	08008343 	.word	0x08008343
 80060bc:	2501      	movs	r5, #1
 80060be:	2300      	movs	r3, #0
 80060c0:	9306      	str	r3, [sp, #24]
 80060c2:	9508      	str	r5, [sp, #32]
 80060c4:	f04f 33ff 	mov.w	r3, #4294967295
 80060c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060cc:	2200      	movs	r2, #0
 80060ce:	2312      	movs	r3, #18
 80060d0:	e7b0      	b.n	8006034 <_dtoa_r+0x26c>
 80060d2:	2301      	movs	r3, #1
 80060d4:	9308      	str	r3, [sp, #32]
 80060d6:	e7f5      	b.n	80060c4 <_dtoa_r+0x2fc>
 80060d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060de:	e7b8      	b.n	8006052 <_dtoa_r+0x28a>
 80060e0:	3101      	adds	r1, #1
 80060e2:	6041      	str	r1, [r0, #4]
 80060e4:	0052      	lsls	r2, r2, #1
 80060e6:	e7b8      	b.n	800605a <_dtoa_r+0x292>
 80060e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060ea:	9a01      	ldr	r2, [sp, #4]
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	9b03      	ldr	r3, [sp, #12]
 80060f0:	2b0e      	cmp	r3, #14
 80060f2:	f200 809d 	bhi.w	8006230 <_dtoa_r+0x468>
 80060f6:	2d00      	cmp	r5, #0
 80060f8:	f000 809a 	beq.w	8006230 <_dtoa_r+0x468>
 80060fc:	9b00      	ldr	r3, [sp, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	dd32      	ble.n	8006168 <_dtoa_r+0x3a0>
 8006102:	4ab7      	ldr	r2, [pc, #732]	; (80063e0 <_dtoa_r+0x618>)
 8006104:	f003 030f 	and.w	r3, r3, #15
 8006108:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800610c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006110:	9b00      	ldr	r3, [sp, #0]
 8006112:	05d8      	lsls	r0, r3, #23
 8006114:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006118:	d516      	bpl.n	8006148 <_dtoa_r+0x380>
 800611a:	4bb2      	ldr	r3, [pc, #712]	; (80063e4 <_dtoa_r+0x61c>)
 800611c:	ec51 0b19 	vmov	r0, r1, d9
 8006120:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006124:	f7fa fb9a 	bl	800085c <__aeabi_ddiv>
 8006128:	f007 070f 	and.w	r7, r7, #15
 800612c:	4682      	mov	sl, r0
 800612e:	468b      	mov	fp, r1
 8006130:	2503      	movs	r5, #3
 8006132:	4eac      	ldr	r6, [pc, #688]	; (80063e4 <_dtoa_r+0x61c>)
 8006134:	b957      	cbnz	r7, 800614c <_dtoa_r+0x384>
 8006136:	4642      	mov	r2, r8
 8006138:	464b      	mov	r3, r9
 800613a:	4650      	mov	r0, sl
 800613c:	4659      	mov	r1, fp
 800613e:	f7fa fb8d 	bl	800085c <__aeabi_ddiv>
 8006142:	4682      	mov	sl, r0
 8006144:	468b      	mov	fp, r1
 8006146:	e028      	b.n	800619a <_dtoa_r+0x3d2>
 8006148:	2502      	movs	r5, #2
 800614a:	e7f2      	b.n	8006132 <_dtoa_r+0x36a>
 800614c:	07f9      	lsls	r1, r7, #31
 800614e:	d508      	bpl.n	8006162 <_dtoa_r+0x39a>
 8006150:	4640      	mov	r0, r8
 8006152:	4649      	mov	r1, r9
 8006154:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006158:	f7fa fa56 	bl	8000608 <__aeabi_dmul>
 800615c:	3501      	adds	r5, #1
 800615e:	4680      	mov	r8, r0
 8006160:	4689      	mov	r9, r1
 8006162:	107f      	asrs	r7, r7, #1
 8006164:	3608      	adds	r6, #8
 8006166:	e7e5      	b.n	8006134 <_dtoa_r+0x36c>
 8006168:	f000 809b 	beq.w	80062a2 <_dtoa_r+0x4da>
 800616c:	9b00      	ldr	r3, [sp, #0]
 800616e:	4f9d      	ldr	r7, [pc, #628]	; (80063e4 <_dtoa_r+0x61c>)
 8006170:	425e      	negs	r6, r3
 8006172:	4b9b      	ldr	r3, [pc, #620]	; (80063e0 <_dtoa_r+0x618>)
 8006174:	f006 020f 	and.w	r2, r6, #15
 8006178:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800617c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006180:	ec51 0b19 	vmov	r0, r1, d9
 8006184:	f7fa fa40 	bl	8000608 <__aeabi_dmul>
 8006188:	1136      	asrs	r6, r6, #4
 800618a:	4682      	mov	sl, r0
 800618c:	468b      	mov	fp, r1
 800618e:	2300      	movs	r3, #0
 8006190:	2502      	movs	r5, #2
 8006192:	2e00      	cmp	r6, #0
 8006194:	d17a      	bne.n	800628c <_dtoa_r+0x4c4>
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1d3      	bne.n	8006142 <_dtoa_r+0x37a>
 800619a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800619c:	2b00      	cmp	r3, #0
 800619e:	f000 8082 	beq.w	80062a6 <_dtoa_r+0x4de>
 80061a2:	4b91      	ldr	r3, [pc, #580]	; (80063e8 <_dtoa_r+0x620>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	4650      	mov	r0, sl
 80061a8:	4659      	mov	r1, fp
 80061aa:	f7fa fc9f 	bl	8000aec <__aeabi_dcmplt>
 80061ae:	2800      	cmp	r0, #0
 80061b0:	d079      	beq.n	80062a6 <_dtoa_r+0x4de>
 80061b2:	9b03      	ldr	r3, [sp, #12]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d076      	beq.n	80062a6 <_dtoa_r+0x4de>
 80061b8:	9b02      	ldr	r3, [sp, #8]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	dd36      	ble.n	800622c <_dtoa_r+0x464>
 80061be:	9b00      	ldr	r3, [sp, #0]
 80061c0:	4650      	mov	r0, sl
 80061c2:	4659      	mov	r1, fp
 80061c4:	1e5f      	subs	r7, r3, #1
 80061c6:	2200      	movs	r2, #0
 80061c8:	4b88      	ldr	r3, [pc, #544]	; (80063ec <_dtoa_r+0x624>)
 80061ca:	f7fa fa1d 	bl	8000608 <__aeabi_dmul>
 80061ce:	9e02      	ldr	r6, [sp, #8]
 80061d0:	4682      	mov	sl, r0
 80061d2:	468b      	mov	fp, r1
 80061d4:	3501      	adds	r5, #1
 80061d6:	4628      	mov	r0, r5
 80061d8:	f7fa f9ac 	bl	8000534 <__aeabi_i2d>
 80061dc:	4652      	mov	r2, sl
 80061de:	465b      	mov	r3, fp
 80061e0:	f7fa fa12 	bl	8000608 <__aeabi_dmul>
 80061e4:	4b82      	ldr	r3, [pc, #520]	; (80063f0 <_dtoa_r+0x628>)
 80061e6:	2200      	movs	r2, #0
 80061e8:	f7fa f858 	bl	800029c <__adddf3>
 80061ec:	46d0      	mov	r8, sl
 80061ee:	46d9      	mov	r9, fp
 80061f0:	4682      	mov	sl, r0
 80061f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80061f6:	2e00      	cmp	r6, #0
 80061f8:	d158      	bne.n	80062ac <_dtoa_r+0x4e4>
 80061fa:	4b7e      	ldr	r3, [pc, #504]	; (80063f4 <_dtoa_r+0x62c>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	4640      	mov	r0, r8
 8006200:	4649      	mov	r1, r9
 8006202:	f7fa f849 	bl	8000298 <__aeabi_dsub>
 8006206:	4652      	mov	r2, sl
 8006208:	465b      	mov	r3, fp
 800620a:	4680      	mov	r8, r0
 800620c:	4689      	mov	r9, r1
 800620e:	f7fa fc8b 	bl	8000b28 <__aeabi_dcmpgt>
 8006212:	2800      	cmp	r0, #0
 8006214:	f040 8295 	bne.w	8006742 <_dtoa_r+0x97a>
 8006218:	4652      	mov	r2, sl
 800621a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800621e:	4640      	mov	r0, r8
 8006220:	4649      	mov	r1, r9
 8006222:	f7fa fc63 	bl	8000aec <__aeabi_dcmplt>
 8006226:	2800      	cmp	r0, #0
 8006228:	f040 8289 	bne.w	800673e <_dtoa_r+0x976>
 800622c:	ec5b ab19 	vmov	sl, fp, d9
 8006230:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006232:	2b00      	cmp	r3, #0
 8006234:	f2c0 8148 	blt.w	80064c8 <_dtoa_r+0x700>
 8006238:	9a00      	ldr	r2, [sp, #0]
 800623a:	2a0e      	cmp	r2, #14
 800623c:	f300 8144 	bgt.w	80064c8 <_dtoa_r+0x700>
 8006240:	4b67      	ldr	r3, [pc, #412]	; (80063e0 <_dtoa_r+0x618>)
 8006242:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006246:	e9d3 8900 	ldrd	r8, r9, [r3]
 800624a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800624c:	2b00      	cmp	r3, #0
 800624e:	f280 80d5 	bge.w	80063fc <_dtoa_r+0x634>
 8006252:	9b03      	ldr	r3, [sp, #12]
 8006254:	2b00      	cmp	r3, #0
 8006256:	f300 80d1 	bgt.w	80063fc <_dtoa_r+0x634>
 800625a:	f040 826f 	bne.w	800673c <_dtoa_r+0x974>
 800625e:	4b65      	ldr	r3, [pc, #404]	; (80063f4 <_dtoa_r+0x62c>)
 8006260:	2200      	movs	r2, #0
 8006262:	4640      	mov	r0, r8
 8006264:	4649      	mov	r1, r9
 8006266:	f7fa f9cf 	bl	8000608 <__aeabi_dmul>
 800626a:	4652      	mov	r2, sl
 800626c:	465b      	mov	r3, fp
 800626e:	f7fa fc51 	bl	8000b14 <__aeabi_dcmpge>
 8006272:	9e03      	ldr	r6, [sp, #12]
 8006274:	4637      	mov	r7, r6
 8006276:	2800      	cmp	r0, #0
 8006278:	f040 8245 	bne.w	8006706 <_dtoa_r+0x93e>
 800627c:	9d01      	ldr	r5, [sp, #4]
 800627e:	2331      	movs	r3, #49	; 0x31
 8006280:	f805 3b01 	strb.w	r3, [r5], #1
 8006284:	9b00      	ldr	r3, [sp, #0]
 8006286:	3301      	adds	r3, #1
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	e240      	b.n	800670e <_dtoa_r+0x946>
 800628c:	07f2      	lsls	r2, r6, #31
 800628e:	d505      	bpl.n	800629c <_dtoa_r+0x4d4>
 8006290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006294:	f7fa f9b8 	bl	8000608 <__aeabi_dmul>
 8006298:	3501      	adds	r5, #1
 800629a:	2301      	movs	r3, #1
 800629c:	1076      	asrs	r6, r6, #1
 800629e:	3708      	adds	r7, #8
 80062a0:	e777      	b.n	8006192 <_dtoa_r+0x3ca>
 80062a2:	2502      	movs	r5, #2
 80062a4:	e779      	b.n	800619a <_dtoa_r+0x3d2>
 80062a6:	9f00      	ldr	r7, [sp, #0]
 80062a8:	9e03      	ldr	r6, [sp, #12]
 80062aa:	e794      	b.n	80061d6 <_dtoa_r+0x40e>
 80062ac:	9901      	ldr	r1, [sp, #4]
 80062ae:	4b4c      	ldr	r3, [pc, #304]	; (80063e0 <_dtoa_r+0x618>)
 80062b0:	4431      	add	r1, r6
 80062b2:	910d      	str	r1, [sp, #52]	; 0x34
 80062b4:	9908      	ldr	r1, [sp, #32]
 80062b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80062ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80062be:	2900      	cmp	r1, #0
 80062c0:	d043      	beq.n	800634a <_dtoa_r+0x582>
 80062c2:	494d      	ldr	r1, [pc, #308]	; (80063f8 <_dtoa_r+0x630>)
 80062c4:	2000      	movs	r0, #0
 80062c6:	f7fa fac9 	bl	800085c <__aeabi_ddiv>
 80062ca:	4652      	mov	r2, sl
 80062cc:	465b      	mov	r3, fp
 80062ce:	f7f9 ffe3 	bl	8000298 <__aeabi_dsub>
 80062d2:	9d01      	ldr	r5, [sp, #4]
 80062d4:	4682      	mov	sl, r0
 80062d6:	468b      	mov	fp, r1
 80062d8:	4649      	mov	r1, r9
 80062da:	4640      	mov	r0, r8
 80062dc:	f7fa fc44 	bl	8000b68 <__aeabi_d2iz>
 80062e0:	4606      	mov	r6, r0
 80062e2:	f7fa f927 	bl	8000534 <__aeabi_i2d>
 80062e6:	4602      	mov	r2, r0
 80062e8:	460b      	mov	r3, r1
 80062ea:	4640      	mov	r0, r8
 80062ec:	4649      	mov	r1, r9
 80062ee:	f7f9 ffd3 	bl	8000298 <__aeabi_dsub>
 80062f2:	3630      	adds	r6, #48	; 0x30
 80062f4:	f805 6b01 	strb.w	r6, [r5], #1
 80062f8:	4652      	mov	r2, sl
 80062fa:	465b      	mov	r3, fp
 80062fc:	4680      	mov	r8, r0
 80062fe:	4689      	mov	r9, r1
 8006300:	f7fa fbf4 	bl	8000aec <__aeabi_dcmplt>
 8006304:	2800      	cmp	r0, #0
 8006306:	d163      	bne.n	80063d0 <_dtoa_r+0x608>
 8006308:	4642      	mov	r2, r8
 800630a:	464b      	mov	r3, r9
 800630c:	4936      	ldr	r1, [pc, #216]	; (80063e8 <_dtoa_r+0x620>)
 800630e:	2000      	movs	r0, #0
 8006310:	f7f9 ffc2 	bl	8000298 <__aeabi_dsub>
 8006314:	4652      	mov	r2, sl
 8006316:	465b      	mov	r3, fp
 8006318:	f7fa fbe8 	bl	8000aec <__aeabi_dcmplt>
 800631c:	2800      	cmp	r0, #0
 800631e:	f040 80b5 	bne.w	800648c <_dtoa_r+0x6c4>
 8006322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006324:	429d      	cmp	r5, r3
 8006326:	d081      	beq.n	800622c <_dtoa_r+0x464>
 8006328:	4b30      	ldr	r3, [pc, #192]	; (80063ec <_dtoa_r+0x624>)
 800632a:	2200      	movs	r2, #0
 800632c:	4650      	mov	r0, sl
 800632e:	4659      	mov	r1, fp
 8006330:	f7fa f96a 	bl	8000608 <__aeabi_dmul>
 8006334:	4b2d      	ldr	r3, [pc, #180]	; (80063ec <_dtoa_r+0x624>)
 8006336:	4682      	mov	sl, r0
 8006338:	468b      	mov	fp, r1
 800633a:	4640      	mov	r0, r8
 800633c:	4649      	mov	r1, r9
 800633e:	2200      	movs	r2, #0
 8006340:	f7fa f962 	bl	8000608 <__aeabi_dmul>
 8006344:	4680      	mov	r8, r0
 8006346:	4689      	mov	r9, r1
 8006348:	e7c6      	b.n	80062d8 <_dtoa_r+0x510>
 800634a:	4650      	mov	r0, sl
 800634c:	4659      	mov	r1, fp
 800634e:	f7fa f95b 	bl	8000608 <__aeabi_dmul>
 8006352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006354:	9d01      	ldr	r5, [sp, #4]
 8006356:	930f      	str	r3, [sp, #60]	; 0x3c
 8006358:	4682      	mov	sl, r0
 800635a:	468b      	mov	fp, r1
 800635c:	4649      	mov	r1, r9
 800635e:	4640      	mov	r0, r8
 8006360:	f7fa fc02 	bl	8000b68 <__aeabi_d2iz>
 8006364:	4606      	mov	r6, r0
 8006366:	f7fa f8e5 	bl	8000534 <__aeabi_i2d>
 800636a:	3630      	adds	r6, #48	; 0x30
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	4640      	mov	r0, r8
 8006372:	4649      	mov	r1, r9
 8006374:	f7f9 ff90 	bl	8000298 <__aeabi_dsub>
 8006378:	f805 6b01 	strb.w	r6, [r5], #1
 800637c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800637e:	429d      	cmp	r5, r3
 8006380:	4680      	mov	r8, r0
 8006382:	4689      	mov	r9, r1
 8006384:	f04f 0200 	mov.w	r2, #0
 8006388:	d124      	bne.n	80063d4 <_dtoa_r+0x60c>
 800638a:	4b1b      	ldr	r3, [pc, #108]	; (80063f8 <_dtoa_r+0x630>)
 800638c:	4650      	mov	r0, sl
 800638e:	4659      	mov	r1, fp
 8006390:	f7f9 ff84 	bl	800029c <__adddf3>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	4640      	mov	r0, r8
 800639a:	4649      	mov	r1, r9
 800639c:	f7fa fbc4 	bl	8000b28 <__aeabi_dcmpgt>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d173      	bne.n	800648c <_dtoa_r+0x6c4>
 80063a4:	4652      	mov	r2, sl
 80063a6:	465b      	mov	r3, fp
 80063a8:	4913      	ldr	r1, [pc, #76]	; (80063f8 <_dtoa_r+0x630>)
 80063aa:	2000      	movs	r0, #0
 80063ac:	f7f9 ff74 	bl	8000298 <__aeabi_dsub>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	4640      	mov	r0, r8
 80063b6:	4649      	mov	r1, r9
 80063b8:	f7fa fb98 	bl	8000aec <__aeabi_dcmplt>
 80063bc:	2800      	cmp	r0, #0
 80063be:	f43f af35 	beq.w	800622c <_dtoa_r+0x464>
 80063c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80063c4:	1e6b      	subs	r3, r5, #1
 80063c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80063c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063cc:	2b30      	cmp	r3, #48	; 0x30
 80063ce:	d0f8      	beq.n	80063c2 <_dtoa_r+0x5fa>
 80063d0:	9700      	str	r7, [sp, #0]
 80063d2:	e049      	b.n	8006468 <_dtoa_r+0x6a0>
 80063d4:	4b05      	ldr	r3, [pc, #20]	; (80063ec <_dtoa_r+0x624>)
 80063d6:	f7fa f917 	bl	8000608 <__aeabi_dmul>
 80063da:	4680      	mov	r8, r0
 80063dc:	4689      	mov	r9, r1
 80063de:	e7bd      	b.n	800635c <_dtoa_r+0x594>
 80063e0:	080083d8 	.word	0x080083d8
 80063e4:	080083b0 	.word	0x080083b0
 80063e8:	3ff00000 	.word	0x3ff00000
 80063ec:	40240000 	.word	0x40240000
 80063f0:	401c0000 	.word	0x401c0000
 80063f4:	40140000 	.word	0x40140000
 80063f8:	3fe00000 	.word	0x3fe00000
 80063fc:	9d01      	ldr	r5, [sp, #4]
 80063fe:	4656      	mov	r6, sl
 8006400:	465f      	mov	r7, fp
 8006402:	4642      	mov	r2, r8
 8006404:	464b      	mov	r3, r9
 8006406:	4630      	mov	r0, r6
 8006408:	4639      	mov	r1, r7
 800640a:	f7fa fa27 	bl	800085c <__aeabi_ddiv>
 800640e:	f7fa fbab 	bl	8000b68 <__aeabi_d2iz>
 8006412:	4682      	mov	sl, r0
 8006414:	f7fa f88e 	bl	8000534 <__aeabi_i2d>
 8006418:	4642      	mov	r2, r8
 800641a:	464b      	mov	r3, r9
 800641c:	f7fa f8f4 	bl	8000608 <__aeabi_dmul>
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	4630      	mov	r0, r6
 8006426:	4639      	mov	r1, r7
 8006428:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800642c:	f7f9 ff34 	bl	8000298 <__aeabi_dsub>
 8006430:	f805 6b01 	strb.w	r6, [r5], #1
 8006434:	9e01      	ldr	r6, [sp, #4]
 8006436:	9f03      	ldr	r7, [sp, #12]
 8006438:	1bae      	subs	r6, r5, r6
 800643a:	42b7      	cmp	r7, r6
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	d135      	bne.n	80064ae <_dtoa_r+0x6e6>
 8006442:	f7f9 ff2b 	bl	800029c <__adddf3>
 8006446:	4642      	mov	r2, r8
 8006448:	464b      	mov	r3, r9
 800644a:	4606      	mov	r6, r0
 800644c:	460f      	mov	r7, r1
 800644e:	f7fa fb6b 	bl	8000b28 <__aeabi_dcmpgt>
 8006452:	b9d0      	cbnz	r0, 800648a <_dtoa_r+0x6c2>
 8006454:	4642      	mov	r2, r8
 8006456:	464b      	mov	r3, r9
 8006458:	4630      	mov	r0, r6
 800645a:	4639      	mov	r1, r7
 800645c:	f7fa fb3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8006460:	b110      	cbz	r0, 8006468 <_dtoa_r+0x6a0>
 8006462:	f01a 0f01 	tst.w	sl, #1
 8006466:	d110      	bne.n	800648a <_dtoa_r+0x6c2>
 8006468:	4620      	mov	r0, r4
 800646a:	ee18 1a10 	vmov	r1, s16
 800646e:	f000 fae5 	bl	8006a3c <_Bfree>
 8006472:	2300      	movs	r3, #0
 8006474:	9800      	ldr	r0, [sp, #0]
 8006476:	702b      	strb	r3, [r5, #0]
 8006478:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800647a:	3001      	adds	r0, #1
 800647c:	6018      	str	r0, [r3, #0]
 800647e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006480:	2b00      	cmp	r3, #0
 8006482:	f43f acf1 	beq.w	8005e68 <_dtoa_r+0xa0>
 8006486:	601d      	str	r5, [r3, #0]
 8006488:	e4ee      	b.n	8005e68 <_dtoa_r+0xa0>
 800648a:	9f00      	ldr	r7, [sp, #0]
 800648c:	462b      	mov	r3, r5
 800648e:	461d      	mov	r5, r3
 8006490:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006494:	2a39      	cmp	r2, #57	; 0x39
 8006496:	d106      	bne.n	80064a6 <_dtoa_r+0x6de>
 8006498:	9a01      	ldr	r2, [sp, #4]
 800649a:	429a      	cmp	r2, r3
 800649c:	d1f7      	bne.n	800648e <_dtoa_r+0x6c6>
 800649e:	9901      	ldr	r1, [sp, #4]
 80064a0:	2230      	movs	r2, #48	; 0x30
 80064a2:	3701      	adds	r7, #1
 80064a4:	700a      	strb	r2, [r1, #0]
 80064a6:	781a      	ldrb	r2, [r3, #0]
 80064a8:	3201      	adds	r2, #1
 80064aa:	701a      	strb	r2, [r3, #0]
 80064ac:	e790      	b.n	80063d0 <_dtoa_r+0x608>
 80064ae:	4ba6      	ldr	r3, [pc, #664]	; (8006748 <_dtoa_r+0x980>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	f7fa f8a9 	bl	8000608 <__aeabi_dmul>
 80064b6:	2200      	movs	r2, #0
 80064b8:	2300      	movs	r3, #0
 80064ba:	4606      	mov	r6, r0
 80064bc:	460f      	mov	r7, r1
 80064be:	f7fa fb0b 	bl	8000ad8 <__aeabi_dcmpeq>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	d09d      	beq.n	8006402 <_dtoa_r+0x63a>
 80064c6:	e7cf      	b.n	8006468 <_dtoa_r+0x6a0>
 80064c8:	9a08      	ldr	r2, [sp, #32]
 80064ca:	2a00      	cmp	r2, #0
 80064cc:	f000 80d7 	beq.w	800667e <_dtoa_r+0x8b6>
 80064d0:	9a06      	ldr	r2, [sp, #24]
 80064d2:	2a01      	cmp	r2, #1
 80064d4:	f300 80ba 	bgt.w	800664c <_dtoa_r+0x884>
 80064d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064da:	2a00      	cmp	r2, #0
 80064dc:	f000 80b2 	beq.w	8006644 <_dtoa_r+0x87c>
 80064e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80064e4:	9e07      	ldr	r6, [sp, #28]
 80064e6:	9d04      	ldr	r5, [sp, #16]
 80064e8:	9a04      	ldr	r2, [sp, #16]
 80064ea:	441a      	add	r2, r3
 80064ec:	9204      	str	r2, [sp, #16]
 80064ee:	9a05      	ldr	r2, [sp, #20]
 80064f0:	2101      	movs	r1, #1
 80064f2:	441a      	add	r2, r3
 80064f4:	4620      	mov	r0, r4
 80064f6:	9205      	str	r2, [sp, #20]
 80064f8:	f000 fb58 	bl	8006bac <__i2b>
 80064fc:	4607      	mov	r7, r0
 80064fe:	2d00      	cmp	r5, #0
 8006500:	dd0c      	ble.n	800651c <_dtoa_r+0x754>
 8006502:	9b05      	ldr	r3, [sp, #20]
 8006504:	2b00      	cmp	r3, #0
 8006506:	dd09      	ble.n	800651c <_dtoa_r+0x754>
 8006508:	42ab      	cmp	r3, r5
 800650a:	9a04      	ldr	r2, [sp, #16]
 800650c:	bfa8      	it	ge
 800650e:	462b      	movge	r3, r5
 8006510:	1ad2      	subs	r2, r2, r3
 8006512:	9204      	str	r2, [sp, #16]
 8006514:	9a05      	ldr	r2, [sp, #20]
 8006516:	1aed      	subs	r5, r5, r3
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	9305      	str	r3, [sp, #20]
 800651c:	9b07      	ldr	r3, [sp, #28]
 800651e:	b31b      	cbz	r3, 8006568 <_dtoa_r+0x7a0>
 8006520:	9b08      	ldr	r3, [sp, #32]
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 80af 	beq.w	8006686 <_dtoa_r+0x8be>
 8006528:	2e00      	cmp	r6, #0
 800652a:	dd13      	ble.n	8006554 <_dtoa_r+0x78c>
 800652c:	4639      	mov	r1, r7
 800652e:	4632      	mov	r2, r6
 8006530:	4620      	mov	r0, r4
 8006532:	f000 fbfb 	bl	8006d2c <__pow5mult>
 8006536:	ee18 2a10 	vmov	r2, s16
 800653a:	4601      	mov	r1, r0
 800653c:	4607      	mov	r7, r0
 800653e:	4620      	mov	r0, r4
 8006540:	f000 fb4a 	bl	8006bd8 <__multiply>
 8006544:	ee18 1a10 	vmov	r1, s16
 8006548:	4680      	mov	r8, r0
 800654a:	4620      	mov	r0, r4
 800654c:	f000 fa76 	bl	8006a3c <_Bfree>
 8006550:	ee08 8a10 	vmov	s16, r8
 8006554:	9b07      	ldr	r3, [sp, #28]
 8006556:	1b9a      	subs	r2, r3, r6
 8006558:	d006      	beq.n	8006568 <_dtoa_r+0x7a0>
 800655a:	ee18 1a10 	vmov	r1, s16
 800655e:	4620      	mov	r0, r4
 8006560:	f000 fbe4 	bl	8006d2c <__pow5mult>
 8006564:	ee08 0a10 	vmov	s16, r0
 8006568:	2101      	movs	r1, #1
 800656a:	4620      	mov	r0, r4
 800656c:	f000 fb1e 	bl	8006bac <__i2b>
 8006570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006572:	2b00      	cmp	r3, #0
 8006574:	4606      	mov	r6, r0
 8006576:	f340 8088 	ble.w	800668a <_dtoa_r+0x8c2>
 800657a:	461a      	mov	r2, r3
 800657c:	4601      	mov	r1, r0
 800657e:	4620      	mov	r0, r4
 8006580:	f000 fbd4 	bl	8006d2c <__pow5mult>
 8006584:	9b06      	ldr	r3, [sp, #24]
 8006586:	2b01      	cmp	r3, #1
 8006588:	4606      	mov	r6, r0
 800658a:	f340 8081 	ble.w	8006690 <_dtoa_r+0x8c8>
 800658e:	f04f 0800 	mov.w	r8, #0
 8006592:	6933      	ldr	r3, [r6, #16]
 8006594:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006598:	6918      	ldr	r0, [r3, #16]
 800659a:	f000 fab7 	bl	8006b0c <__hi0bits>
 800659e:	f1c0 0020 	rsb	r0, r0, #32
 80065a2:	9b05      	ldr	r3, [sp, #20]
 80065a4:	4418      	add	r0, r3
 80065a6:	f010 001f 	ands.w	r0, r0, #31
 80065aa:	f000 8092 	beq.w	80066d2 <_dtoa_r+0x90a>
 80065ae:	f1c0 0320 	rsb	r3, r0, #32
 80065b2:	2b04      	cmp	r3, #4
 80065b4:	f340 808a 	ble.w	80066cc <_dtoa_r+0x904>
 80065b8:	f1c0 001c 	rsb	r0, r0, #28
 80065bc:	9b04      	ldr	r3, [sp, #16]
 80065be:	4403      	add	r3, r0
 80065c0:	9304      	str	r3, [sp, #16]
 80065c2:	9b05      	ldr	r3, [sp, #20]
 80065c4:	4403      	add	r3, r0
 80065c6:	4405      	add	r5, r0
 80065c8:	9305      	str	r3, [sp, #20]
 80065ca:	9b04      	ldr	r3, [sp, #16]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	dd07      	ble.n	80065e0 <_dtoa_r+0x818>
 80065d0:	ee18 1a10 	vmov	r1, s16
 80065d4:	461a      	mov	r2, r3
 80065d6:	4620      	mov	r0, r4
 80065d8:	f000 fc02 	bl	8006de0 <__lshift>
 80065dc:	ee08 0a10 	vmov	s16, r0
 80065e0:	9b05      	ldr	r3, [sp, #20]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	dd05      	ble.n	80065f2 <_dtoa_r+0x82a>
 80065e6:	4631      	mov	r1, r6
 80065e8:	461a      	mov	r2, r3
 80065ea:	4620      	mov	r0, r4
 80065ec:	f000 fbf8 	bl	8006de0 <__lshift>
 80065f0:	4606      	mov	r6, r0
 80065f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d06e      	beq.n	80066d6 <_dtoa_r+0x90e>
 80065f8:	ee18 0a10 	vmov	r0, s16
 80065fc:	4631      	mov	r1, r6
 80065fe:	f000 fc5f 	bl	8006ec0 <__mcmp>
 8006602:	2800      	cmp	r0, #0
 8006604:	da67      	bge.n	80066d6 <_dtoa_r+0x90e>
 8006606:	9b00      	ldr	r3, [sp, #0]
 8006608:	3b01      	subs	r3, #1
 800660a:	ee18 1a10 	vmov	r1, s16
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	220a      	movs	r2, #10
 8006612:	2300      	movs	r3, #0
 8006614:	4620      	mov	r0, r4
 8006616:	f000 fa33 	bl	8006a80 <__multadd>
 800661a:	9b08      	ldr	r3, [sp, #32]
 800661c:	ee08 0a10 	vmov	s16, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 81b1 	beq.w	8006988 <_dtoa_r+0xbc0>
 8006626:	2300      	movs	r3, #0
 8006628:	4639      	mov	r1, r7
 800662a:	220a      	movs	r2, #10
 800662c:	4620      	mov	r0, r4
 800662e:	f000 fa27 	bl	8006a80 <__multadd>
 8006632:	9b02      	ldr	r3, [sp, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	4607      	mov	r7, r0
 8006638:	f300 808e 	bgt.w	8006758 <_dtoa_r+0x990>
 800663c:	9b06      	ldr	r3, [sp, #24]
 800663e:	2b02      	cmp	r3, #2
 8006640:	dc51      	bgt.n	80066e6 <_dtoa_r+0x91e>
 8006642:	e089      	b.n	8006758 <_dtoa_r+0x990>
 8006644:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006646:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800664a:	e74b      	b.n	80064e4 <_dtoa_r+0x71c>
 800664c:	9b03      	ldr	r3, [sp, #12]
 800664e:	1e5e      	subs	r6, r3, #1
 8006650:	9b07      	ldr	r3, [sp, #28]
 8006652:	42b3      	cmp	r3, r6
 8006654:	bfbf      	itttt	lt
 8006656:	9b07      	ldrlt	r3, [sp, #28]
 8006658:	9607      	strlt	r6, [sp, #28]
 800665a:	1af2      	sublt	r2, r6, r3
 800665c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800665e:	bfb6      	itet	lt
 8006660:	189b      	addlt	r3, r3, r2
 8006662:	1b9e      	subge	r6, r3, r6
 8006664:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006666:	9b03      	ldr	r3, [sp, #12]
 8006668:	bfb8      	it	lt
 800666a:	2600      	movlt	r6, #0
 800666c:	2b00      	cmp	r3, #0
 800666e:	bfb7      	itett	lt
 8006670:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006674:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006678:	1a9d      	sublt	r5, r3, r2
 800667a:	2300      	movlt	r3, #0
 800667c:	e734      	b.n	80064e8 <_dtoa_r+0x720>
 800667e:	9e07      	ldr	r6, [sp, #28]
 8006680:	9d04      	ldr	r5, [sp, #16]
 8006682:	9f08      	ldr	r7, [sp, #32]
 8006684:	e73b      	b.n	80064fe <_dtoa_r+0x736>
 8006686:	9a07      	ldr	r2, [sp, #28]
 8006688:	e767      	b.n	800655a <_dtoa_r+0x792>
 800668a:	9b06      	ldr	r3, [sp, #24]
 800668c:	2b01      	cmp	r3, #1
 800668e:	dc18      	bgt.n	80066c2 <_dtoa_r+0x8fa>
 8006690:	f1ba 0f00 	cmp.w	sl, #0
 8006694:	d115      	bne.n	80066c2 <_dtoa_r+0x8fa>
 8006696:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800669a:	b993      	cbnz	r3, 80066c2 <_dtoa_r+0x8fa>
 800669c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80066a0:	0d1b      	lsrs	r3, r3, #20
 80066a2:	051b      	lsls	r3, r3, #20
 80066a4:	b183      	cbz	r3, 80066c8 <_dtoa_r+0x900>
 80066a6:	9b04      	ldr	r3, [sp, #16]
 80066a8:	3301      	adds	r3, #1
 80066aa:	9304      	str	r3, [sp, #16]
 80066ac:	9b05      	ldr	r3, [sp, #20]
 80066ae:	3301      	adds	r3, #1
 80066b0:	9305      	str	r3, [sp, #20]
 80066b2:	f04f 0801 	mov.w	r8, #1
 80066b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f47f af6a 	bne.w	8006592 <_dtoa_r+0x7ca>
 80066be:	2001      	movs	r0, #1
 80066c0:	e76f      	b.n	80065a2 <_dtoa_r+0x7da>
 80066c2:	f04f 0800 	mov.w	r8, #0
 80066c6:	e7f6      	b.n	80066b6 <_dtoa_r+0x8ee>
 80066c8:	4698      	mov	r8, r3
 80066ca:	e7f4      	b.n	80066b6 <_dtoa_r+0x8ee>
 80066cc:	f43f af7d 	beq.w	80065ca <_dtoa_r+0x802>
 80066d0:	4618      	mov	r0, r3
 80066d2:	301c      	adds	r0, #28
 80066d4:	e772      	b.n	80065bc <_dtoa_r+0x7f4>
 80066d6:	9b03      	ldr	r3, [sp, #12]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	dc37      	bgt.n	800674c <_dtoa_r+0x984>
 80066dc:	9b06      	ldr	r3, [sp, #24]
 80066de:	2b02      	cmp	r3, #2
 80066e0:	dd34      	ble.n	800674c <_dtoa_r+0x984>
 80066e2:	9b03      	ldr	r3, [sp, #12]
 80066e4:	9302      	str	r3, [sp, #8]
 80066e6:	9b02      	ldr	r3, [sp, #8]
 80066e8:	b96b      	cbnz	r3, 8006706 <_dtoa_r+0x93e>
 80066ea:	4631      	mov	r1, r6
 80066ec:	2205      	movs	r2, #5
 80066ee:	4620      	mov	r0, r4
 80066f0:	f000 f9c6 	bl	8006a80 <__multadd>
 80066f4:	4601      	mov	r1, r0
 80066f6:	4606      	mov	r6, r0
 80066f8:	ee18 0a10 	vmov	r0, s16
 80066fc:	f000 fbe0 	bl	8006ec0 <__mcmp>
 8006700:	2800      	cmp	r0, #0
 8006702:	f73f adbb 	bgt.w	800627c <_dtoa_r+0x4b4>
 8006706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006708:	9d01      	ldr	r5, [sp, #4]
 800670a:	43db      	mvns	r3, r3
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	f04f 0800 	mov.w	r8, #0
 8006712:	4631      	mov	r1, r6
 8006714:	4620      	mov	r0, r4
 8006716:	f000 f991 	bl	8006a3c <_Bfree>
 800671a:	2f00      	cmp	r7, #0
 800671c:	f43f aea4 	beq.w	8006468 <_dtoa_r+0x6a0>
 8006720:	f1b8 0f00 	cmp.w	r8, #0
 8006724:	d005      	beq.n	8006732 <_dtoa_r+0x96a>
 8006726:	45b8      	cmp	r8, r7
 8006728:	d003      	beq.n	8006732 <_dtoa_r+0x96a>
 800672a:	4641      	mov	r1, r8
 800672c:	4620      	mov	r0, r4
 800672e:	f000 f985 	bl	8006a3c <_Bfree>
 8006732:	4639      	mov	r1, r7
 8006734:	4620      	mov	r0, r4
 8006736:	f000 f981 	bl	8006a3c <_Bfree>
 800673a:	e695      	b.n	8006468 <_dtoa_r+0x6a0>
 800673c:	2600      	movs	r6, #0
 800673e:	4637      	mov	r7, r6
 8006740:	e7e1      	b.n	8006706 <_dtoa_r+0x93e>
 8006742:	9700      	str	r7, [sp, #0]
 8006744:	4637      	mov	r7, r6
 8006746:	e599      	b.n	800627c <_dtoa_r+0x4b4>
 8006748:	40240000 	.word	0x40240000
 800674c:	9b08      	ldr	r3, [sp, #32]
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 80ca 	beq.w	80068e8 <_dtoa_r+0xb20>
 8006754:	9b03      	ldr	r3, [sp, #12]
 8006756:	9302      	str	r3, [sp, #8]
 8006758:	2d00      	cmp	r5, #0
 800675a:	dd05      	ble.n	8006768 <_dtoa_r+0x9a0>
 800675c:	4639      	mov	r1, r7
 800675e:	462a      	mov	r2, r5
 8006760:	4620      	mov	r0, r4
 8006762:	f000 fb3d 	bl	8006de0 <__lshift>
 8006766:	4607      	mov	r7, r0
 8006768:	f1b8 0f00 	cmp.w	r8, #0
 800676c:	d05b      	beq.n	8006826 <_dtoa_r+0xa5e>
 800676e:	6879      	ldr	r1, [r7, #4]
 8006770:	4620      	mov	r0, r4
 8006772:	f000 f923 	bl	80069bc <_Balloc>
 8006776:	4605      	mov	r5, r0
 8006778:	b928      	cbnz	r0, 8006786 <_dtoa_r+0x9be>
 800677a:	4b87      	ldr	r3, [pc, #540]	; (8006998 <_dtoa_r+0xbd0>)
 800677c:	4602      	mov	r2, r0
 800677e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006782:	f7ff bb3b 	b.w	8005dfc <_dtoa_r+0x34>
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	3202      	adds	r2, #2
 800678a:	0092      	lsls	r2, r2, #2
 800678c:	f107 010c 	add.w	r1, r7, #12
 8006790:	300c      	adds	r0, #12
 8006792:	f7fe fded 	bl	8005370 <memcpy>
 8006796:	2201      	movs	r2, #1
 8006798:	4629      	mov	r1, r5
 800679a:	4620      	mov	r0, r4
 800679c:	f000 fb20 	bl	8006de0 <__lshift>
 80067a0:	9b01      	ldr	r3, [sp, #4]
 80067a2:	f103 0901 	add.w	r9, r3, #1
 80067a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80067aa:	4413      	add	r3, r2
 80067ac:	9305      	str	r3, [sp, #20]
 80067ae:	f00a 0301 	and.w	r3, sl, #1
 80067b2:	46b8      	mov	r8, r7
 80067b4:	9304      	str	r3, [sp, #16]
 80067b6:	4607      	mov	r7, r0
 80067b8:	4631      	mov	r1, r6
 80067ba:	ee18 0a10 	vmov	r0, s16
 80067be:	f7ff fa77 	bl	8005cb0 <quorem>
 80067c2:	4641      	mov	r1, r8
 80067c4:	9002      	str	r0, [sp, #8]
 80067c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80067ca:	ee18 0a10 	vmov	r0, s16
 80067ce:	f000 fb77 	bl	8006ec0 <__mcmp>
 80067d2:	463a      	mov	r2, r7
 80067d4:	9003      	str	r0, [sp, #12]
 80067d6:	4631      	mov	r1, r6
 80067d8:	4620      	mov	r0, r4
 80067da:	f000 fb8d 	bl	8006ef8 <__mdiff>
 80067de:	68c2      	ldr	r2, [r0, #12]
 80067e0:	f109 3bff 	add.w	fp, r9, #4294967295
 80067e4:	4605      	mov	r5, r0
 80067e6:	bb02      	cbnz	r2, 800682a <_dtoa_r+0xa62>
 80067e8:	4601      	mov	r1, r0
 80067ea:	ee18 0a10 	vmov	r0, s16
 80067ee:	f000 fb67 	bl	8006ec0 <__mcmp>
 80067f2:	4602      	mov	r2, r0
 80067f4:	4629      	mov	r1, r5
 80067f6:	4620      	mov	r0, r4
 80067f8:	9207      	str	r2, [sp, #28]
 80067fa:	f000 f91f 	bl	8006a3c <_Bfree>
 80067fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006802:	ea43 0102 	orr.w	r1, r3, r2
 8006806:	9b04      	ldr	r3, [sp, #16]
 8006808:	430b      	orrs	r3, r1
 800680a:	464d      	mov	r5, r9
 800680c:	d10f      	bne.n	800682e <_dtoa_r+0xa66>
 800680e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006812:	d02a      	beq.n	800686a <_dtoa_r+0xaa2>
 8006814:	9b03      	ldr	r3, [sp, #12]
 8006816:	2b00      	cmp	r3, #0
 8006818:	dd02      	ble.n	8006820 <_dtoa_r+0xa58>
 800681a:	9b02      	ldr	r3, [sp, #8]
 800681c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006820:	f88b a000 	strb.w	sl, [fp]
 8006824:	e775      	b.n	8006712 <_dtoa_r+0x94a>
 8006826:	4638      	mov	r0, r7
 8006828:	e7ba      	b.n	80067a0 <_dtoa_r+0x9d8>
 800682a:	2201      	movs	r2, #1
 800682c:	e7e2      	b.n	80067f4 <_dtoa_r+0xa2c>
 800682e:	9b03      	ldr	r3, [sp, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	db04      	blt.n	800683e <_dtoa_r+0xa76>
 8006834:	9906      	ldr	r1, [sp, #24]
 8006836:	430b      	orrs	r3, r1
 8006838:	9904      	ldr	r1, [sp, #16]
 800683a:	430b      	orrs	r3, r1
 800683c:	d122      	bne.n	8006884 <_dtoa_r+0xabc>
 800683e:	2a00      	cmp	r2, #0
 8006840:	ddee      	ble.n	8006820 <_dtoa_r+0xa58>
 8006842:	ee18 1a10 	vmov	r1, s16
 8006846:	2201      	movs	r2, #1
 8006848:	4620      	mov	r0, r4
 800684a:	f000 fac9 	bl	8006de0 <__lshift>
 800684e:	4631      	mov	r1, r6
 8006850:	ee08 0a10 	vmov	s16, r0
 8006854:	f000 fb34 	bl	8006ec0 <__mcmp>
 8006858:	2800      	cmp	r0, #0
 800685a:	dc03      	bgt.n	8006864 <_dtoa_r+0xa9c>
 800685c:	d1e0      	bne.n	8006820 <_dtoa_r+0xa58>
 800685e:	f01a 0f01 	tst.w	sl, #1
 8006862:	d0dd      	beq.n	8006820 <_dtoa_r+0xa58>
 8006864:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006868:	d1d7      	bne.n	800681a <_dtoa_r+0xa52>
 800686a:	2339      	movs	r3, #57	; 0x39
 800686c:	f88b 3000 	strb.w	r3, [fp]
 8006870:	462b      	mov	r3, r5
 8006872:	461d      	mov	r5, r3
 8006874:	3b01      	subs	r3, #1
 8006876:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800687a:	2a39      	cmp	r2, #57	; 0x39
 800687c:	d071      	beq.n	8006962 <_dtoa_r+0xb9a>
 800687e:	3201      	adds	r2, #1
 8006880:	701a      	strb	r2, [r3, #0]
 8006882:	e746      	b.n	8006712 <_dtoa_r+0x94a>
 8006884:	2a00      	cmp	r2, #0
 8006886:	dd07      	ble.n	8006898 <_dtoa_r+0xad0>
 8006888:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800688c:	d0ed      	beq.n	800686a <_dtoa_r+0xaa2>
 800688e:	f10a 0301 	add.w	r3, sl, #1
 8006892:	f88b 3000 	strb.w	r3, [fp]
 8006896:	e73c      	b.n	8006712 <_dtoa_r+0x94a>
 8006898:	9b05      	ldr	r3, [sp, #20]
 800689a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800689e:	4599      	cmp	r9, r3
 80068a0:	d047      	beq.n	8006932 <_dtoa_r+0xb6a>
 80068a2:	ee18 1a10 	vmov	r1, s16
 80068a6:	2300      	movs	r3, #0
 80068a8:	220a      	movs	r2, #10
 80068aa:	4620      	mov	r0, r4
 80068ac:	f000 f8e8 	bl	8006a80 <__multadd>
 80068b0:	45b8      	cmp	r8, r7
 80068b2:	ee08 0a10 	vmov	s16, r0
 80068b6:	f04f 0300 	mov.w	r3, #0
 80068ba:	f04f 020a 	mov.w	r2, #10
 80068be:	4641      	mov	r1, r8
 80068c0:	4620      	mov	r0, r4
 80068c2:	d106      	bne.n	80068d2 <_dtoa_r+0xb0a>
 80068c4:	f000 f8dc 	bl	8006a80 <__multadd>
 80068c8:	4680      	mov	r8, r0
 80068ca:	4607      	mov	r7, r0
 80068cc:	f109 0901 	add.w	r9, r9, #1
 80068d0:	e772      	b.n	80067b8 <_dtoa_r+0x9f0>
 80068d2:	f000 f8d5 	bl	8006a80 <__multadd>
 80068d6:	4639      	mov	r1, r7
 80068d8:	4680      	mov	r8, r0
 80068da:	2300      	movs	r3, #0
 80068dc:	220a      	movs	r2, #10
 80068de:	4620      	mov	r0, r4
 80068e0:	f000 f8ce 	bl	8006a80 <__multadd>
 80068e4:	4607      	mov	r7, r0
 80068e6:	e7f1      	b.n	80068cc <_dtoa_r+0xb04>
 80068e8:	9b03      	ldr	r3, [sp, #12]
 80068ea:	9302      	str	r3, [sp, #8]
 80068ec:	9d01      	ldr	r5, [sp, #4]
 80068ee:	ee18 0a10 	vmov	r0, s16
 80068f2:	4631      	mov	r1, r6
 80068f4:	f7ff f9dc 	bl	8005cb0 <quorem>
 80068f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80068fc:	9b01      	ldr	r3, [sp, #4]
 80068fe:	f805 ab01 	strb.w	sl, [r5], #1
 8006902:	1aea      	subs	r2, r5, r3
 8006904:	9b02      	ldr	r3, [sp, #8]
 8006906:	4293      	cmp	r3, r2
 8006908:	dd09      	ble.n	800691e <_dtoa_r+0xb56>
 800690a:	ee18 1a10 	vmov	r1, s16
 800690e:	2300      	movs	r3, #0
 8006910:	220a      	movs	r2, #10
 8006912:	4620      	mov	r0, r4
 8006914:	f000 f8b4 	bl	8006a80 <__multadd>
 8006918:	ee08 0a10 	vmov	s16, r0
 800691c:	e7e7      	b.n	80068ee <_dtoa_r+0xb26>
 800691e:	9b02      	ldr	r3, [sp, #8]
 8006920:	2b00      	cmp	r3, #0
 8006922:	bfc8      	it	gt
 8006924:	461d      	movgt	r5, r3
 8006926:	9b01      	ldr	r3, [sp, #4]
 8006928:	bfd8      	it	le
 800692a:	2501      	movle	r5, #1
 800692c:	441d      	add	r5, r3
 800692e:	f04f 0800 	mov.w	r8, #0
 8006932:	ee18 1a10 	vmov	r1, s16
 8006936:	2201      	movs	r2, #1
 8006938:	4620      	mov	r0, r4
 800693a:	f000 fa51 	bl	8006de0 <__lshift>
 800693e:	4631      	mov	r1, r6
 8006940:	ee08 0a10 	vmov	s16, r0
 8006944:	f000 fabc 	bl	8006ec0 <__mcmp>
 8006948:	2800      	cmp	r0, #0
 800694a:	dc91      	bgt.n	8006870 <_dtoa_r+0xaa8>
 800694c:	d102      	bne.n	8006954 <_dtoa_r+0xb8c>
 800694e:	f01a 0f01 	tst.w	sl, #1
 8006952:	d18d      	bne.n	8006870 <_dtoa_r+0xaa8>
 8006954:	462b      	mov	r3, r5
 8006956:	461d      	mov	r5, r3
 8006958:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800695c:	2a30      	cmp	r2, #48	; 0x30
 800695e:	d0fa      	beq.n	8006956 <_dtoa_r+0xb8e>
 8006960:	e6d7      	b.n	8006712 <_dtoa_r+0x94a>
 8006962:	9a01      	ldr	r2, [sp, #4]
 8006964:	429a      	cmp	r2, r3
 8006966:	d184      	bne.n	8006872 <_dtoa_r+0xaaa>
 8006968:	9b00      	ldr	r3, [sp, #0]
 800696a:	3301      	adds	r3, #1
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	2331      	movs	r3, #49	; 0x31
 8006970:	7013      	strb	r3, [r2, #0]
 8006972:	e6ce      	b.n	8006712 <_dtoa_r+0x94a>
 8006974:	4b09      	ldr	r3, [pc, #36]	; (800699c <_dtoa_r+0xbd4>)
 8006976:	f7ff ba95 	b.w	8005ea4 <_dtoa_r+0xdc>
 800697a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800697c:	2b00      	cmp	r3, #0
 800697e:	f47f aa6e 	bne.w	8005e5e <_dtoa_r+0x96>
 8006982:	4b07      	ldr	r3, [pc, #28]	; (80069a0 <_dtoa_r+0xbd8>)
 8006984:	f7ff ba8e 	b.w	8005ea4 <_dtoa_r+0xdc>
 8006988:	9b02      	ldr	r3, [sp, #8]
 800698a:	2b00      	cmp	r3, #0
 800698c:	dcae      	bgt.n	80068ec <_dtoa_r+0xb24>
 800698e:	9b06      	ldr	r3, [sp, #24]
 8006990:	2b02      	cmp	r3, #2
 8006992:	f73f aea8 	bgt.w	80066e6 <_dtoa_r+0x91e>
 8006996:	e7a9      	b.n	80068ec <_dtoa_r+0xb24>
 8006998:	08008343 	.word	0x08008343
 800699c:	080082a0 	.word	0x080082a0
 80069a0:	080082c4 	.word	0x080082c4

080069a4 <_localeconv_r>:
 80069a4:	4800      	ldr	r0, [pc, #0]	; (80069a8 <_localeconv_r+0x4>)
 80069a6:	4770      	bx	lr
 80069a8:	20000164 	.word	0x20000164

080069ac <malloc>:
 80069ac:	4b02      	ldr	r3, [pc, #8]	; (80069b8 <malloc+0xc>)
 80069ae:	4601      	mov	r1, r0
 80069b0:	6818      	ldr	r0, [r3, #0]
 80069b2:	f000 bc09 	b.w	80071c8 <_malloc_r>
 80069b6:	bf00      	nop
 80069b8:	20000010 	.word	0x20000010

080069bc <_Balloc>:
 80069bc:	b570      	push	{r4, r5, r6, lr}
 80069be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80069c0:	4604      	mov	r4, r0
 80069c2:	460d      	mov	r5, r1
 80069c4:	b976      	cbnz	r6, 80069e4 <_Balloc+0x28>
 80069c6:	2010      	movs	r0, #16
 80069c8:	f7ff fff0 	bl	80069ac <malloc>
 80069cc:	4602      	mov	r2, r0
 80069ce:	6260      	str	r0, [r4, #36]	; 0x24
 80069d0:	b920      	cbnz	r0, 80069dc <_Balloc+0x20>
 80069d2:	4b18      	ldr	r3, [pc, #96]	; (8006a34 <_Balloc+0x78>)
 80069d4:	4818      	ldr	r0, [pc, #96]	; (8006a38 <_Balloc+0x7c>)
 80069d6:	2166      	movs	r1, #102	; 0x66
 80069d8:	f000 fdd6 	bl	8007588 <__assert_func>
 80069dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069e0:	6006      	str	r6, [r0, #0]
 80069e2:	60c6      	str	r6, [r0, #12]
 80069e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80069e6:	68f3      	ldr	r3, [r6, #12]
 80069e8:	b183      	cbz	r3, 8006a0c <_Balloc+0x50>
 80069ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069f2:	b9b8      	cbnz	r0, 8006a24 <_Balloc+0x68>
 80069f4:	2101      	movs	r1, #1
 80069f6:	fa01 f605 	lsl.w	r6, r1, r5
 80069fa:	1d72      	adds	r2, r6, #5
 80069fc:	0092      	lsls	r2, r2, #2
 80069fe:	4620      	mov	r0, r4
 8006a00:	f000 fb60 	bl	80070c4 <_calloc_r>
 8006a04:	b160      	cbz	r0, 8006a20 <_Balloc+0x64>
 8006a06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a0a:	e00e      	b.n	8006a2a <_Balloc+0x6e>
 8006a0c:	2221      	movs	r2, #33	; 0x21
 8006a0e:	2104      	movs	r1, #4
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 fb57 	bl	80070c4 <_calloc_r>
 8006a16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a18:	60f0      	str	r0, [r6, #12]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1e4      	bne.n	80069ea <_Balloc+0x2e>
 8006a20:	2000      	movs	r0, #0
 8006a22:	bd70      	pop	{r4, r5, r6, pc}
 8006a24:	6802      	ldr	r2, [r0, #0]
 8006a26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a30:	e7f7      	b.n	8006a22 <_Balloc+0x66>
 8006a32:	bf00      	nop
 8006a34:	080082d1 	.word	0x080082d1
 8006a38:	08008354 	.word	0x08008354

08006a3c <_Bfree>:
 8006a3c:	b570      	push	{r4, r5, r6, lr}
 8006a3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a40:	4605      	mov	r5, r0
 8006a42:	460c      	mov	r4, r1
 8006a44:	b976      	cbnz	r6, 8006a64 <_Bfree+0x28>
 8006a46:	2010      	movs	r0, #16
 8006a48:	f7ff ffb0 	bl	80069ac <malloc>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	6268      	str	r0, [r5, #36]	; 0x24
 8006a50:	b920      	cbnz	r0, 8006a5c <_Bfree+0x20>
 8006a52:	4b09      	ldr	r3, [pc, #36]	; (8006a78 <_Bfree+0x3c>)
 8006a54:	4809      	ldr	r0, [pc, #36]	; (8006a7c <_Bfree+0x40>)
 8006a56:	218a      	movs	r1, #138	; 0x8a
 8006a58:	f000 fd96 	bl	8007588 <__assert_func>
 8006a5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a60:	6006      	str	r6, [r0, #0]
 8006a62:	60c6      	str	r6, [r0, #12]
 8006a64:	b13c      	cbz	r4, 8006a76 <_Bfree+0x3a>
 8006a66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a68:	6862      	ldr	r2, [r4, #4]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a70:	6021      	str	r1, [r4, #0]
 8006a72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a76:	bd70      	pop	{r4, r5, r6, pc}
 8006a78:	080082d1 	.word	0x080082d1
 8006a7c:	08008354 	.word	0x08008354

08006a80 <__multadd>:
 8006a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a84:	690d      	ldr	r5, [r1, #16]
 8006a86:	4607      	mov	r7, r0
 8006a88:	460c      	mov	r4, r1
 8006a8a:	461e      	mov	r6, r3
 8006a8c:	f101 0c14 	add.w	ip, r1, #20
 8006a90:	2000      	movs	r0, #0
 8006a92:	f8dc 3000 	ldr.w	r3, [ip]
 8006a96:	b299      	uxth	r1, r3
 8006a98:	fb02 6101 	mla	r1, r2, r1, r6
 8006a9c:	0c1e      	lsrs	r6, r3, #16
 8006a9e:	0c0b      	lsrs	r3, r1, #16
 8006aa0:	fb02 3306 	mla	r3, r2, r6, r3
 8006aa4:	b289      	uxth	r1, r1
 8006aa6:	3001      	adds	r0, #1
 8006aa8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006aac:	4285      	cmp	r5, r0
 8006aae:	f84c 1b04 	str.w	r1, [ip], #4
 8006ab2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ab6:	dcec      	bgt.n	8006a92 <__multadd+0x12>
 8006ab8:	b30e      	cbz	r6, 8006afe <__multadd+0x7e>
 8006aba:	68a3      	ldr	r3, [r4, #8]
 8006abc:	42ab      	cmp	r3, r5
 8006abe:	dc19      	bgt.n	8006af4 <__multadd+0x74>
 8006ac0:	6861      	ldr	r1, [r4, #4]
 8006ac2:	4638      	mov	r0, r7
 8006ac4:	3101      	adds	r1, #1
 8006ac6:	f7ff ff79 	bl	80069bc <_Balloc>
 8006aca:	4680      	mov	r8, r0
 8006acc:	b928      	cbnz	r0, 8006ada <__multadd+0x5a>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	4b0c      	ldr	r3, [pc, #48]	; (8006b04 <__multadd+0x84>)
 8006ad2:	480d      	ldr	r0, [pc, #52]	; (8006b08 <__multadd+0x88>)
 8006ad4:	21b5      	movs	r1, #181	; 0xb5
 8006ad6:	f000 fd57 	bl	8007588 <__assert_func>
 8006ada:	6922      	ldr	r2, [r4, #16]
 8006adc:	3202      	adds	r2, #2
 8006ade:	f104 010c 	add.w	r1, r4, #12
 8006ae2:	0092      	lsls	r2, r2, #2
 8006ae4:	300c      	adds	r0, #12
 8006ae6:	f7fe fc43 	bl	8005370 <memcpy>
 8006aea:	4621      	mov	r1, r4
 8006aec:	4638      	mov	r0, r7
 8006aee:	f7ff ffa5 	bl	8006a3c <_Bfree>
 8006af2:	4644      	mov	r4, r8
 8006af4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006af8:	3501      	adds	r5, #1
 8006afa:	615e      	str	r6, [r3, #20]
 8006afc:	6125      	str	r5, [r4, #16]
 8006afe:	4620      	mov	r0, r4
 8006b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b04:	08008343 	.word	0x08008343
 8006b08:	08008354 	.word	0x08008354

08006b0c <__hi0bits>:
 8006b0c:	0c03      	lsrs	r3, r0, #16
 8006b0e:	041b      	lsls	r3, r3, #16
 8006b10:	b9d3      	cbnz	r3, 8006b48 <__hi0bits+0x3c>
 8006b12:	0400      	lsls	r0, r0, #16
 8006b14:	2310      	movs	r3, #16
 8006b16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006b1a:	bf04      	itt	eq
 8006b1c:	0200      	lsleq	r0, r0, #8
 8006b1e:	3308      	addeq	r3, #8
 8006b20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006b24:	bf04      	itt	eq
 8006b26:	0100      	lsleq	r0, r0, #4
 8006b28:	3304      	addeq	r3, #4
 8006b2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006b2e:	bf04      	itt	eq
 8006b30:	0080      	lsleq	r0, r0, #2
 8006b32:	3302      	addeq	r3, #2
 8006b34:	2800      	cmp	r0, #0
 8006b36:	db05      	blt.n	8006b44 <__hi0bits+0x38>
 8006b38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006b3c:	f103 0301 	add.w	r3, r3, #1
 8006b40:	bf08      	it	eq
 8006b42:	2320      	moveq	r3, #32
 8006b44:	4618      	mov	r0, r3
 8006b46:	4770      	bx	lr
 8006b48:	2300      	movs	r3, #0
 8006b4a:	e7e4      	b.n	8006b16 <__hi0bits+0xa>

08006b4c <__lo0bits>:
 8006b4c:	6803      	ldr	r3, [r0, #0]
 8006b4e:	f013 0207 	ands.w	r2, r3, #7
 8006b52:	4601      	mov	r1, r0
 8006b54:	d00b      	beq.n	8006b6e <__lo0bits+0x22>
 8006b56:	07da      	lsls	r2, r3, #31
 8006b58:	d423      	bmi.n	8006ba2 <__lo0bits+0x56>
 8006b5a:	0798      	lsls	r0, r3, #30
 8006b5c:	bf49      	itett	mi
 8006b5e:	085b      	lsrmi	r3, r3, #1
 8006b60:	089b      	lsrpl	r3, r3, #2
 8006b62:	2001      	movmi	r0, #1
 8006b64:	600b      	strmi	r3, [r1, #0]
 8006b66:	bf5c      	itt	pl
 8006b68:	600b      	strpl	r3, [r1, #0]
 8006b6a:	2002      	movpl	r0, #2
 8006b6c:	4770      	bx	lr
 8006b6e:	b298      	uxth	r0, r3
 8006b70:	b9a8      	cbnz	r0, 8006b9e <__lo0bits+0x52>
 8006b72:	0c1b      	lsrs	r3, r3, #16
 8006b74:	2010      	movs	r0, #16
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	b90a      	cbnz	r2, 8006b7e <__lo0bits+0x32>
 8006b7a:	3008      	adds	r0, #8
 8006b7c:	0a1b      	lsrs	r3, r3, #8
 8006b7e:	071a      	lsls	r2, r3, #28
 8006b80:	bf04      	itt	eq
 8006b82:	091b      	lsreq	r3, r3, #4
 8006b84:	3004      	addeq	r0, #4
 8006b86:	079a      	lsls	r2, r3, #30
 8006b88:	bf04      	itt	eq
 8006b8a:	089b      	lsreq	r3, r3, #2
 8006b8c:	3002      	addeq	r0, #2
 8006b8e:	07da      	lsls	r2, r3, #31
 8006b90:	d403      	bmi.n	8006b9a <__lo0bits+0x4e>
 8006b92:	085b      	lsrs	r3, r3, #1
 8006b94:	f100 0001 	add.w	r0, r0, #1
 8006b98:	d005      	beq.n	8006ba6 <__lo0bits+0x5a>
 8006b9a:	600b      	str	r3, [r1, #0]
 8006b9c:	4770      	bx	lr
 8006b9e:	4610      	mov	r0, r2
 8006ba0:	e7e9      	b.n	8006b76 <__lo0bits+0x2a>
 8006ba2:	2000      	movs	r0, #0
 8006ba4:	4770      	bx	lr
 8006ba6:	2020      	movs	r0, #32
 8006ba8:	4770      	bx	lr
	...

08006bac <__i2b>:
 8006bac:	b510      	push	{r4, lr}
 8006bae:	460c      	mov	r4, r1
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	f7ff ff03 	bl	80069bc <_Balloc>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	b928      	cbnz	r0, 8006bc6 <__i2b+0x1a>
 8006bba:	4b05      	ldr	r3, [pc, #20]	; (8006bd0 <__i2b+0x24>)
 8006bbc:	4805      	ldr	r0, [pc, #20]	; (8006bd4 <__i2b+0x28>)
 8006bbe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006bc2:	f000 fce1 	bl	8007588 <__assert_func>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	6144      	str	r4, [r0, #20]
 8006bca:	6103      	str	r3, [r0, #16]
 8006bcc:	bd10      	pop	{r4, pc}
 8006bce:	bf00      	nop
 8006bd0:	08008343 	.word	0x08008343
 8006bd4:	08008354 	.word	0x08008354

08006bd8 <__multiply>:
 8006bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bdc:	4691      	mov	r9, r2
 8006bde:	690a      	ldr	r2, [r1, #16]
 8006be0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	bfb8      	it	lt
 8006be8:	460b      	movlt	r3, r1
 8006bea:	460c      	mov	r4, r1
 8006bec:	bfbc      	itt	lt
 8006bee:	464c      	movlt	r4, r9
 8006bf0:	4699      	movlt	r9, r3
 8006bf2:	6927      	ldr	r7, [r4, #16]
 8006bf4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006bf8:	68a3      	ldr	r3, [r4, #8]
 8006bfa:	6861      	ldr	r1, [r4, #4]
 8006bfc:	eb07 060a 	add.w	r6, r7, sl
 8006c00:	42b3      	cmp	r3, r6
 8006c02:	b085      	sub	sp, #20
 8006c04:	bfb8      	it	lt
 8006c06:	3101      	addlt	r1, #1
 8006c08:	f7ff fed8 	bl	80069bc <_Balloc>
 8006c0c:	b930      	cbnz	r0, 8006c1c <__multiply+0x44>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	4b44      	ldr	r3, [pc, #272]	; (8006d24 <__multiply+0x14c>)
 8006c12:	4845      	ldr	r0, [pc, #276]	; (8006d28 <__multiply+0x150>)
 8006c14:	f240 115d 	movw	r1, #349	; 0x15d
 8006c18:	f000 fcb6 	bl	8007588 <__assert_func>
 8006c1c:	f100 0514 	add.w	r5, r0, #20
 8006c20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c24:	462b      	mov	r3, r5
 8006c26:	2200      	movs	r2, #0
 8006c28:	4543      	cmp	r3, r8
 8006c2a:	d321      	bcc.n	8006c70 <__multiply+0x98>
 8006c2c:	f104 0314 	add.w	r3, r4, #20
 8006c30:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006c34:	f109 0314 	add.w	r3, r9, #20
 8006c38:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006c3c:	9202      	str	r2, [sp, #8]
 8006c3e:	1b3a      	subs	r2, r7, r4
 8006c40:	3a15      	subs	r2, #21
 8006c42:	f022 0203 	bic.w	r2, r2, #3
 8006c46:	3204      	adds	r2, #4
 8006c48:	f104 0115 	add.w	r1, r4, #21
 8006c4c:	428f      	cmp	r7, r1
 8006c4e:	bf38      	it	cc
 8006c50:	2204      	movcc	r2, #4
 8006c52:	9201      	str	r2, [sp, #4]
 8006c54:	9a02      	ldr	r2, [sp, #8]
 8006c56:	9303      	str	r3, [sp, #12]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d80c      	bhi.n	8006c76 <__multiply+0x9e>
 8006c5c:	2e00      	cmp	r6, #0
 8006c5e:	dd03      	ble.n	8006c68 <__multiply+0x90>
 8006c60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d05a      	beq.n	8006d1e <__multiply+0x146>
 8006c68:	6106      	str	r6, [r0, #16]
 8006c6a:	b005      	add	sp, #20
 8006c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c70:	f843 2b04 	str.w	r2, [r3], #4
 8006c74:	e7d8      	b.n	8006c28 <__multiply+0x50>
 8006c76:	f8b3 a000 	ldrh.w	sl, [r3]
 8006c7a:	f1ba 0f00 	cmp.w	sl, #0
 8006c7e:	d024      	beq.n	8006cca <__multiply+0xf2>
 8006c80:	f104 0e14 	add.w	lr, r4, #20
 8006c84:	46a9      	mov	r9, r5
 8006c86:	f04f 0c00 	mov.w	ip, #0
 8006c8a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006c8e:	f8d9 1000 	ldr.w	r1, [r9]
 8006c92:	fa1f fb82 	uxth.w	fp, r2
 8006c96:	b289      	uxth	r1, r1
 8006c98:	fb0a 110b 	mla	r1, sl, fp, r1
 8006c9c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006ca0:	f8d9 2000 	ldr.w	r2, [r9]
 8006ca4:	4461      	add	r1, ip
 8006ca6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006caa:	fb0a c20b 	mla	r2, sl, fp, ip
 8006cae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006cb2:	b289      	uxth	r1, r1
 8006cb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006cb8:	4577      	cmp	r7, lr
 8006cba:	f849 1b04 	str.w	r1, [r9], #4
 8006cbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006cc2:	d8e2      	bhi.n	8006c8a <__multiply+0xb2>
 8006cc4:	9a01      	ldr	r2, [sp, #4]
 8006cc6:	f845 c002 	str.w	ip, [r5, r2]
 8006cca:	9a03      	ldr	r2, [sp, #12]
 8006ccc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006cd0:	3304      	adds	r3, #4
 8006cd2:	f1b9 0f00 	cmp.w	r9, #0
 8006cd6:	d020      	beq.n	8006d1a <__multiply+0x142>
 8006cd8:	6829      	ldr	r1, [r5, #0]
 8006cda:	f104 0c14 	add.w	ip, r4, #20
 8006cde:	46ae      	mov	lr, r5
 8006ce0:	f04f 0a00 	mov.w	sl, #0
 8006ce4:	f8bc b000 	ldrh.w	fp, [ip]
 8006ce8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006cec:	fb09 220b 	mla	r2, r9, fp, r2
 8006cf0:	4492      	add	sl, r2
 8006cf2:	b289      	uxth	r1, r1
 8006cf4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006cf8:	f84e 1b04 	str.w	r1, [lr], #4
 8006cfc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006d00:	f8be 1000 	ldrh.w	r1, [lr]
 8006d04:	0c12      	lsrs	r2, r2, #16
 8006d06:	fb09 1102 	mla	r1, r9, r2, r1
 8006d0a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006d0e:	4567      	cmp	r7, ip
 8006d10:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006d14:	d8e6      	bhi.n	8006ce4 <__multiply+0x10c>
 8006d16:	9a01      	ldr	r2, [sp, #4]
 8006d18:	50a9      	str	r1, [r5, r2]
 8006d1a:	3504      	adds	r5, #4
 8006d1c:	e79a      	b.n	8006c54 <__multiply+0x7c>
 8006d1e:	3e01      	subs	r6, #1
 8006d20:	e79c      	b.n	8006c5c <__multiply+0x84>
 8006d22:	bf00      	nop
 8006d24:	08008343 	.word	0x08008343
 8006d28:	08008354 	.word	0x08008354

08006d2c <__pow5mult>:
 8006d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d30:	4615      	mov	r5, r2
 8006d32:	f012 0203 	ands.w	r2, r2, #3
 8006d36:	4606      	mov	r6, r0
 8006d38:	460f      	mov	r7, r1
 8006d3a:	d007      	beq.n	8006d4c <__pow5mult+0x20>
 8006d3c:	4c25      	ldr	r4, [pc, #148]	; (8006dd4 <__pow5mult+0xa8>)
 8006d3e:	3a01      	subs	r2, #1
 8006d40:	2300      	movs	r3, #0
 8006d42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d46:	f7ff fe9b 	bl	8006a80 <__multadd>
 8006d4a:	4607      	mov	r7, r0
 8006d4c:	10ad      	asrs	r5, r5, #2
 8006d4e:	d03d      	beq.n	8006dcc <__pow5mult+0xa0>
 8006d50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006d52:	b97c      	cbnz	r4, 8006d74 <__pow5mult+0x48>
 8006d54:	2010      	movs	r0, #16
 8006d56:	f7ff fe29 	bl	80069ac <malloc>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	6270      	str	r0, [r6, #36]	; 0x24
 8006d5e:	b928      	cbnz	r0, 8006d6c <__pow5mult+0x40>
 8006d60:	4b1d      	ldr	r3, [pc, #116]	; (8006dd8 <__pow5mult+0xac>)
 8006d62:	481e      	ldr	r0, [pc, #120]	; (8006ddc <__pow5mult+0xb0>)
 8006d64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006d68:	f000 fc0e 	bl	8007588 <__assert_func>
 8006d6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d70:	6004      	str	r4, [r0, #0]
 8006d72:	60c4      	str	r4, [r0, #12]
 8006d74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006d78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d7c:	b94c      	cbnz	r4, 8006d92 <__pow5mult+0x66>
 8006d7e:	f240 2171 	movw	r1, #625	; 0x271
 8006d82:	4630      	mov	r0, r6
 8006d84:	f7ff ff12 	bl	8006bac <__i2b>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d8e:	4604      	mov	r4, r0
 8006d90:	6003      	str	r3, [r0, #0]
 8006d92:	f04f 0900 	mov.w	r9, #0
 8006d96:	07eb      	lsls	r3, r5, #31
 8006d98:	d50a      	bpl.n	8006db0 <__pow5mult+0x84>
 8006d9a:	4639      	mov	r1, r7
 8006d9c:	4622      	mov	r2, r4
 8006d9e:	4630      	mov	r0, r6
 8006da0:	f7ff ff1a 	bl	8006bd8 <__multiply>
 8006da4:	4639      	mov	r1, r7
 8006da6:	4680      	mov	r8, r0
 8006da8:	4630      	mov	r0, r6
 8006daa:	f7ff fe47 	bl	8006a3c <_Bfree>
 8006dae:	4647      	mov	r7, r8
 8006db0:	106d      	asrs	r5, r5, #1
 8006db2:	d00b      	beq.n	8006dcc <__pow5mult+0xa0>
 8006db4:	6820      	ldr	r0, [r4, #0]
 8006db6:	b938      	cbnz	r0, 8006dc8 <__pow5mult+0x9c>
 8006db8:	4622      	mov	r2, r4
 8006dba:	4621      	mov	r1, r4
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	f7ff ff0b 	bl	8006bd8 <__multiply>
 8006dc2:	6020      	str	r0, [r4, #0]
 8006dc4:	f8c0 9000 	str.w	r9, [r0]
 8006dc8:	4604      	mov	r4, r0
 8006dca:	e7e4      	b.n	8006d96 <__pow5mult+0x6a>
 8006dcc:	4638      	mov	r0, r7
 8006dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dd2:	bf00      	nop
 8006dd4:	080084a0 	.word	0x080084a0
 8006dd8:	080082d1 	.word	0x080082d1
 8006ddc:	08008354 	.word	0x08008354

08006de0 <__lshift>:
 8006de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006de4:	460c      	mov	r4, r1
 8006de6:	6849      	ldr	r1, [r1, #4]
 8006de8:	6923      	ldr	r3, [r4, #16]
 8006dea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006dee:	68a3      	ldr	r3, [r4, #8]
 8006df0:	4607      	mov	r7, r0
 8006df2:	4691      	mov	r9, r2
 8006df4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006df8:	f108 0601 	add.w	r6, r8, #1
 8006dfc:	42b3      	cmp	r3, r6
 8006dfe:	db0b      	blt.n	8006e18 <__lshift+0x38>
 8006e00:	4638      	mov	r0, r7
 8006e02:	f7ff fddb 	bl	80069bc <_Balloc>
 8006e06:	4605      	mov	r5, r0
 8006e08:	b948      	cbnz	r0, 8006e1e <__lshift+0x3e>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	4b2a      	ldr	r3, [pc, #168]	; (8006eb8 <__lshift+0xd8>)
 8006e0e:	482b      	ldr	r0, [pc, #172]	; (8006ebc <__lshift+0xdc>)
 8006e10:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006e14:	f000 fbb8 	bl	8007588 <__assert_func>
 8006e18:	3101      	adds	r1, #1
 8006e1a:	005b      	lsls	r3, r3, #1
 8006e1c:	e7ee      	b.n	8006dfc <__lshift+0x1c>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	f100 0114 	add.w	r1, r0, #20
 8006e24:	f100 0210 	add.w	r2, r0, #16
 8006e28:	4618      	mov	r0, r3
 8006e2a:	4553      	cmp	r3, sl
 8006e2c:	db37      	blt.n	8006e9e <__lshift+0xbe>
 8006e2e:	6920      	ldr	r0, [r4, #16]
 8006e30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e34:	f104 0314 	add.w	r3, r4, #20
 8006e38:	f019 091f 	ands.w	r9, r9, #31
 8006e3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006e44:	d02f      	beq.n	8006ea6 <__lshift+0xc6>
 8006e46:	f1c9 0e20 	rsb	lr, r9, #32
 8006e4a:	468a      	mov	sl, r1
 8006e4c:	f04f 0c00 	mov.w	ip, #0
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	fa02 f209 	lsl.w	r2, r2, r9
 8006e56:	ea42 020c 	orr.w	r2, r2, ip
 8006e5a:	f84a 2b04 	str.w	r2, [sl], #4
 8006e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e62:	4298      	cmp	r0, r3
 8006e64:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006e68:	d8f2      	bhi.n	8006e50 <__lshift+0x70>
 8006e6a:	1b03      	subs	r3, r0, r4
 8006e6c:	3b15      	subs	r3, #21
 8006e6e:	f023 0303 	bic.w	r3, r3, #3
 8006e72:	3304      	adds	r3, #4
 8006e74:	f104 0215 	add.w	r2, r4, #21
 8006e78:	4290      	cmp	r0, r2
 8006e7a:	bf38      	it	cc
 8006e7c:	2304      	movcc	r3, #4
 8006e7e:	f841 c003 	str.w	ip, [r1, r3]
 8006e82:	f1bc 0f00 	cmp.w	ip, #0
 8006e86:	d001      	beq.n	8006e8c <__lshift+0xac>
 8006e88:	f108 0602 	add.w	r6, r8, #2
 8006e8c:	3e01      	subs	r6, #1
 8006e8e:	4638      	mov	r0, r7
 8006e90:	612e      	str	r6, [r5, #16]
 8006e92:	4621      	mov	r1, r4
 8006e94:	f7ff fdd2 	bl	8006a3c <_Bfree>
 8006e98:	4628      	mov	r0, r5
 8006e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	e7c1      	b.n	8006e2a <__lshift+0x4a>
 8006ea6:	3904      	subs	r1, #4
 8006ea8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eac:	f841 2f04 	str.w	r2, [r1, #4]!
 8006eb0:	4298      	cmp	r0, r3
 8006eb2:	d8f9      	bhi.n	8006ea8 <__lshift+0xc8>
 8006eb4:	e7ea      	b.n	8006e8c <__lshift+0xac>
 8006eb6:	bf00      	nop
 8006eb8:	08008343 	.word	0x08008343
 8006ebc:	08008354 	.word	0x08008354

08006ec0 <__mcmp>:
 8006ec0:	b530      	push	{r4, r5, lr}
 8006ec2:	6902      	ldr	r2, [r0, #16]
 8006ec4:	690c      	ldr	r4, [r1, #16]
 8006ec6:	1b12      	subs	r2, r2, r4
 8006ec8:	d10e      	bne.n	8006ee8 <__mcmp+0x28>
 8006eca:	f100 0314 	add.w	r3, r0, #20
 8006ece:	3114      	adds	r1, #20
 8006ed0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006ed4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006ed8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006edc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006ee0:	42a5      	cmp	r5, r4
 8006ee2:	d003      	beq.n	8006eec <__mcmp+0x2c>
 8006ee4:	d305      	bcc.n	8006ef2 <__mcmp+0x32>
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	4610      	mov	r0, r2
 8006eea:	bd30      	pop	{r4, r5, pc}
 8006eec:	4283      	cmp	r3, r0
 8006eee:	d3f3      	bcc.n	8006ed8 <__mcmp+0x18>
 8006ef0:	e7fa      	b.n	8006ee8 <__mcmp+0x28>
 8006ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef6:	e7f7      	b.n	8006ee8 <__mcmp+0x28>

08006ef8 <__mdiff>:
 8006ef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efc:	460c      	mov	r4, r1
 8006efe:	4606      	mov	r6, r0
 8006f00:	4611      	mov	r1, r2
 8006f02:	4620      	mov	r0, r4
 8006f04:	4690      	mov	r8, r2
 8006f06:	f7ff ffdb 	bl	8006ec0 <__mcmp>
 8006f0a:	1e05      	subs	r5, r0, #0
 8006f0c:	d110      	bne.n	8006f30 <__mdiff+0x38>
 8006f0e:	4629      	mov	r1, r5
 8006f10:	4630      	mov	r0, r6
 8006f12:	f7ff fd53 	bl	80069bc <_Balloc>
 8006f16:	b930      	cbnz	r0, 8006f26 <__mdiff+0x2e>
 8006f18:	4b3a      	ldr	r3, [pc, #232]	; (8007004 <__mdiff+0x10c>)
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	f240 2132 	movw	r1, #562	; 0x232
 8006f20:	4839      	ldr	r0, [pc, #228]	; (8007008 <__mdiff+0x110>)
 8006f22:	f000 fb31 	bl	8007588 <__assert_func>
 8006f26:	2301      	movs	r3, #1
 8006f28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f30:	bfa4      	itt	ge
 8006f32:	4643      	movge	r3, r8
 8006f34:	46a0      	movge	r8, r4
 8006f36:	4630      	mov	r0, r6
 8006f38:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f3c:	bfa6      	itte	ge
 8006f3e:	461c      	movge	r4, r3
 8006f40:	2500      	movge	r5, #0
 8006f42:	2501      	movlt	r5, #1
 8006f44:	f7ff fd3a 	bl	80069bc <_Balloc>
 8006f48:	b920      	cbnz	r0, 8006f54 <__mdiff+0x5c>
 8006f4a:	4b2e      	ldr	r3, [pc, #184]	; (8007004 <__mdiff+0x10c>)
 8006f4c:	4602      	mov	r2, r0
 8006f4e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006f52:	e7e5      	b.n	8006f20 <__mdiff+0x28>
 8006f54:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006f58:	6926      	ldr	r6, [r4, #16]
 8006f5a:	60c5      	str	r5, [r0, #12]
 8006f5c:	f104 0914 	add.w	r9, r4, #20
 8006f60:	f108 0514 	add.w	r5, r8, #20
 8006f64:	f100 0e14 	add.w	lr, r0, #20
 8006f68:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006f6c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006f70:	f108 0210 	add.w	r2, r8, #16
 8006f74:	46f2      	mov	sl, lr
 8006f76:	2100      	movs	r1, #0
 8006f78:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f7c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006f80:	fa1f f883 	uxth.w	r8, r3
 8006f84:	fa11 f18b 	uxtah	r1, r1, fp
 8006f88:	0c1b      	lsrs	r3, r3, #16
 8006f8a:	eba1 0808 	sub.w	r8, r1, r8
 8006f8e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006f92:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006f96:	fa1f f888 	uxth.w	r8, r8
 8006f9a:	1419      	asrs	r1, r3, #16
 8006f9c:	454e      	cmp	r6, r9
 8006f9e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006fa2:	f84a 3b04 	str.w	r3, [sl], #4
 8006fa6:	d8e7      	bhi.n	8006f78 <__mdiff+0x80>
 8006fa8:	1b33      	subs	r3, r6, r4
 8006faa:	3b15      	subs	r3, #21
 8006fac:	f023 0303 	bic.w	r3, r3, #3
 8006fb0:	3304      	adds	r3, #4
 8006fb2:	3415      	adds	r4, #21
 8006fb4:	42a6      	cmp	r6, r4
 8006fb6:	bf38      	it	cc
 8006fb8:	2304      	movcc	r3, #4
 8006fba:	441d      	add	r5, r3
 8006fbc:	4473      	add	r3, lr
 8006fbe:	469e      	mov	lr, r3
 8006fc0:	462e      	mov	r6, r5
 8006fc2:	4566      	cmp	r6, ip
 8006fc4:	d30e      	bcc.n	8006fe4 <__mdiff+0xec>
 8006fc6:	f10c 0203 	add.w	r2, ip, #3
 8006fca:	1b52      	subs	r2, r2, r5
 8006fcc:	f022 0203 	bic.w	r2, r2, #3
 8006fd0:	3d03      	subs	r5, #3
 8006fd2:	45ac      	cmp	ip, r5
 8006fd4:	bf38      	it	cc
 8006fd6:	2200      	movcc	r2, #0
 8006fd8:	441a      	add	r2, r3
 8006fda:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006fde:	b17b      	cbz	r3, 8007000 <__mdiff+0x108>
 8006fe0:	6107      	str	r7, [r0, #16]
 8006fe2:	e7a3      	b.n	8006f2c <__mdiff+0x34>
 8006fe4:	f856 8b04 	ldr.w	r8, [r6], #4
 8006fe8:	fa11 f288 	uxtah	r2, r1, r8
 8006fec:	1414      	asrs	r4, r2, #16
 8006fee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006ff2:	b292      	uxth	r2, r2
 8006ff4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006ff8:	f84e 2b04 	str.w	r2, [lr], #4
 8006ffc:	1421      	asrs	r1, r4, #16
 8006ffe:	e7e0      	b.n	8006fc2 <__mdiff+0xca>
 8007000:	3f01      	subs	r7, #1
 8007002:	e7ea      	b.n	8006fda <__mdiff+0xe2>
 8007004:	08008343 	.word	0x08008343
 8007008:	08008354 	.word	0x08008354

0800700c <__d2b>:
 800700c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007010:	4689      	mov	r9, r1
 8007012:	2101      	movs	r1, #1
 8007014:	ec57 6b10 	vmov	r6, r7, d0
 8007018:	4690      	mov	r8, r2
 800701a:	f7ff fccf 	bl	80069bc <_Balloc>
 800701e:	4604      	mov	r4, r0
 8007020:	b930      	cbnz	r0, 8007030 <__d2b+0x24>
 8007022:	4602      	mov	r2, r0
 8007024:	4b25      	ldr	r3, [pc, #148]	; (80070bc <__d2b+0xb0>)
 8007026:	4826      	ldr	r0, [pc, #152]	; (80070c0 <__d2b+0xb4>)
 8007028:	f240 310a 	movw	r1, #778	; 0x30a
 800702c:	f000 faac 	bl	8007588 <__assert_func>
 8007030:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007034:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007038:	bb35      	cbnz	r5, 8007088 <__d2b+0x7c>
 800703a:	2e00      	cmp	r6, #0
 800703c:	9301      	str	r3, [sp, #4]
 800703e:	d028      	beq.n	8007092 <__d2b+0x86>
 8007040:	4668      	mov	r0, sp
 8007042:	9600      	str	r6, [sp, #0]
 8007044:	f7ff fd82 	bl	8006b4c <__lo0bits>
 8007048:	9900      	ldr	r1, [sp, #0]
 800704a:	b300      	cbz	r0, 800708e <__d2b+0x82>
 800704c:	9a01      	ldr	r2, [sp, #4]
 800704e:	f1c0 0320 	rsb	r3, r0, #32
 8007052:	fa02 f303 	lsl.w	r3, r2, r3
 8007056:	430b      	orrs	r3, r1
 8007058:	40c2      	lsrs	r2, r0
 800705a:	6163      	str	r3, [r4, #20]
 800705c:	9201      	str	r2, [sp, #4]
 800705e:	9b01      	ldr	r3, [sp, #4]
 8007060:	61a3      	str	r3, [r4, #24]
 8007062:	2b00      	cmp	r3, #0
 8007064:	bf14      	ite	ne
 8007066:	2202      	movne	r2, #2
 8007068:	2201      	moveq	r2, #1
 800706a:	6122      	str	r2, [r4, #16]
 800706c:	b1d5      	cbz	r5, 80070a4 <__d2b+0x98>
 800706e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007072:	4405      	add	r5, r0
 8007074:	f8c9 5000 	str.w	r5, [r9]
 8007078:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800707c:	f8c8 0000 	str.w	r0, [r8]
 8007080:	4620      	mov	r0, r4
 8007082:	b003      	add	sp, #12
 8007084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007088:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800708c:	e7d5      	b.n	800703a <__d2b+0x2e>
 800708e:	6161      	str	r1, [r4, #20]
 8007090:	e7e5      	b.n	800705e <__d2b+0x52>
 8007092:	a801      	add	r0, sp, #4
 8007094:	f7ff fd5a 	bl	8006b4c <__lo0bits>
 8007098:	9b01      	ldr	r3, [sp, #4]
 800709a:	6163      	str	r3, [r4, #20]
 800709c:	2201      	movs	r2, #1
 800709e:	6122      	str	r2, [r4, #16]
 80070a0:	3020      	adds	r0, #32
 80070a2:	e7e3      	b.n	800706c <__d2b+0x60>
 80070a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80070a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80070ac:	f8c9 0000 	str.w	r0, [r9]
 80070b0:	6918      	ldr	r0, [r3, #16]
 80070b2:	f7ff fd2b 	bl	8006b0c <__hi0bits>
 80070b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80070ba:	e7df      	b.n	800707c <__d2b+0x70>
 80070bc:	08008343 	.word	0x08008343
 80070c0:	08008354 	.word	0x08008354

080070c4 <_calloc_r>:
 80070c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070c6:	fba1 2402 	umull	r2, r4, r1, r2
 80070ca:	b94c      	cbnz	r4, 80070e0 <_calloc_r+0x1c>
 80070cc:	4611      	mov	r1, r2
 80070ce:	9201      	str	r2, [sp, #4]
 80070d0:	f000 f87a 	bl	80071c8 <_malloc_r>
 80070d4:	9a01      	ldr	r2, [sp, #4]
 80070d6:	4605      	mov	r5, r0
 80070d8:	b930      	cbnz	r0, 80070e8 <_calloc_r+0x24>
 80070da:	4628      	mov	r0, r5
 80070dc:	b003      	add	sp, #12
 80070de:	bd30      	pop	{r4, r5, pc}
 80070e0:	220c      	movs	r2, #12
 80070e2:	6002      	str	r2, [r0, #0]
 80070e4:	2500      	movs	r5, #0
 80070e6:	e7f8      	b.n	80070da <_calloc_r+0x16>
 80070e8:	4621      	mov	r1, r4
 80070ea:	f7fe f94f 	bl	800538c <memset>
 80070ee:	e7f4      	b.n	80070da <_calloc_r+0x16>

080070f0 <_free_r>:
 80070f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80070f2:	2900      	cmp	r1, #0
 80070f4:	d044      	beq.n	8007180 <_free_r+0x90>
 80070f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070fa:	9001      	str	r0, [sp, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f1a1 0404 	sub.w	r4, r1, #4
 8007102:	bfb8      	it	lt
 8007104:	18e4      	addlt	r4, r4, r3
 8007106:	f000 fa9b 	bl	8007640 <__malloc_lock>
 800710a:	4a1e      	ldr	r2, [pc, #120]	; (8007184 <_free_r+0x94>)
 800710c:	9801      	ldr	r0, [sp, #4]
 800710e:	6813      	ldr	r3, [r2, #0]
 8007110:	b933      	cbnz	r3, 8007120 <_free_r+0x30>
 8007112:	6063      	str	r3, [r4, #4]
 8007114:	6014      	str	r4, [r2, #0]
 8007116:	b003      	add	sp, #12
 8007118:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800711c:	f000 ba96 	b.w	800764c <__malloc_unlock>
 8007120:	42a3      	cmp	r3, r4
 8007122:	d908      	bls.n	8007136 <_free_r+0x46>
 8007124:	6825      	ldr	r5, [r4, #0]
 8007126:	1961      	adds	r1, r4, r5
 8007128:	428b      	cmp	r3, r1
 800712a:	bf01      	itttt	eq
 800712c:	6819      	ldreq	r1, [r3, #0]
 800712e:	685b      	ldreq	r3, [r3, #4]
 8007130:	1949      	addeq	r1, r1, r5
 8007132:	6021      	streq	r1, [r4, #0]
 8007134:	e7ed      	b.n	8007112 <_free_r+0x22>
 8007136:	461a      	mov	r2, r3
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	b10b      	cbz	r3, 8007140 <_free_r+0x50>
 800713c:	42a3      	cmp	r3, r4
 800713e:	d9fa      	bls.n	8007136 <_free_r+0x46>
 8007140:	6811      	ldr	r1, [r2, #0]
 8007142:	1855      	adds	r5, r2, r1
 8007144:	42a5      	cmp	r5, r4
 8007146:	d10b      	bne.n	8007160 <_free_r+0x70>
 8007148:	6824      	ldr	r4, [r4, #0]
 800714a:	4421      	add	r1, r4
 800714c:	1854      	adds	r4, r2, r1
 800714e:	42a3      	cmp	r3, r4
 8007150:	6011      	str	r1, [r2, #0]
 8007152:	d1e0      	bne.n	8007116 <_free_r+0x26>
 8007154:	681c      	ldr	r4, [r3, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	6053      	str	r3, [r2, #4]
 800715a:	4421      	add	r1, r4
 800715c:	6011      	str	r1, [r2, #0]
 800715e:	e7da      	b.n	8007116 <_free_r+0x26>
 8007160:	d902      	bls.n	8007168 <_free_r+0x78>
 8007162:	230c      	movs	r3, #12
 8007164:	6003      	str	r3, [r0, #0]
 8007166:	e7d6      	b.n	8007116 <_free_r+0x26>
 8007168:	6825      	ldr	r5, [r4, #0]
 800716a:	1961      	adds	r1, r4, r5
 800716c:	428b      	cmp	r3, r1
 800716e:	bf04      	itt	eq
 8007170:	6819      	ldreq	r1, [r3, #0]
 8007172:	685b      	ldreq	r3, [r3, #4]
 8007174:	6063      	str	r3, [r4, #4]
 8007176:	bf04      	itt	eq
 8007178:	1949      	addeq	r1, r1, r5
 800717a:	6021      	streq	r1, [r4, #0]
 800717c:	6054      	str	r4, [r2, #4]
 800717e:	e7ca      	b.n	8007116 <_free_r+0x26>
 8007180:	b003      	add	sp, #12
 8007182:	bd30      	pop	{r4, r5, pc}
 8007184:	20004b68 	.word	0x20004b68

08007188 <sbrk_aligned>:
 8007188:	b570      	push	{r4, r5, r6, lr}
 800718a:	4e0e      	ldr	r6, [pc, #56]	; (80071c4 <sbrk_aligned+0x3c>)
 800718c:	460c      	mov	r4, r1
 800718e:	6831      	ldr	r1, [r6, #0]
 8007190:	4605      	mov	r5, r0
 8007192:	b911      	cbnz	r1, 800719a <sbrk_aligned+0x12>
 8007194:	f000 f9e8 	bl	8007568 <_sbrk_r>
 8007198:	6030      	str	r0, [r6, #0]
 800719a:	4621      	mov	r1, r4
 800719c:	4628      	mov	r0, r5
 800719e:	f000 f9e3 	bl	8007568 <_sbrk_r>
 80071a2:	1c43      	adds	r3, r0, #1
 80071a4:	d00a      	beq.n	80071bc <sbrk_aligned+0x34>
 80071a6:	1cc4      	adds	r4, r0, #3
 80071a8:	f024 0403 	bic.w	r4, r4, #3
 80071ac:	42a0      	cmp	r0, r4
 80071ae:	d007      	beq.n	80071c0 <sbrk_aligned+0x38>
 80071b0:	1a21      	subs	r1, r4, r0
 80071b2:	4628      	mov	r0, r5
 80071b4:	f000 f9d8 	bl	8007568 <_sbrk_r>
 80071b8:	3001      	adds	r0, #1
 80071ba:	d101      	bne.n	80071c0 <sbrk_aligned+0x38>
 80071bc:	f04f 34ff 	mov.w	r4, #4294967295
 80071c0:	4620      	mov	r0, r4
 80071c2:	bd70      	pop	{r4, r5, r6, pc}
 80071c4:	20004b6c 	.word	0x20004b6c

080071c8 <_malloc_r>:
 80071c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071cc:	1ccd      	adds	r5, r1, #3
 80071ce:	f025 0503 	bic.w	r5, r5, #3
 80071d2:	3508      	adds	r5, #8
 80071d4:	2d0c      	cmp	r5, #12
 80071d6:	bf38      	it	cc
 80071d8:	250c      	movcc	r5, #12
 80071da:	2d00      	cmp	r5, #0
 80071dc:	4607      	mov	r7, r0
 80071de:	db01      	blt.n	80071e4 <_malloc_r+0x1c>
 80071e0:	42a9      	cmp	r1, r5
 80071e2:	d905      	bls.n	80071f0 <_malloc_r+0x28>
 80071e4:	230c      	movs	r3, #12
 80071e6:	603b      	str	r3, [r7, #0]
 80071e8:	2600      	movs	r6, #0
 80071ea:	4630      	mov	r0, r6
 80071ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071f0:	4e2e      	ldr	r6, [pc, #184]	; (80072ac <_malloc_r+0xe4>)
 80071f2:	f000 fa25 	bl	8007640 <__malloc_lock>
 80071f6:	6833      	ldr	r3, [r6, #0]
 80071f8:	461c      	mov	r4, r3
 80071fa:	bb34      	cbnz	r4, 800724a <_malloc_r+0x82>
 80071fc:	4629      	mov	r1, r5
 80071fe:	4638      	mov	r0, r7
 8007200:	f7ff ffc2 	bl	8007188 <sbrk_aligned>
 8007204:	1c43      	adds	r3, r0, #1
 8007206:	4604      	mov	r4, r0
 8007208:	d14d      	bne.n	80072a6 <_malloc_r+0xde>
 800720a:	6834      	ldr	r4, [r6, #0]
 800720c:	4626      	mov	r6, r4
 800720e:	2e00      	cmp	r6, #0
 8007210:	d140      	bne.n	8007294 <_malloc_r+0xcc>
 8007212:	6823      	ldr	r3, [r4, #0]
 8007214:	4631      	mov	r1, r6
 8007216:	4638      	mov	r0, r7
 8007218:	eb04 0803 	add.w	r8, r4, r3
 800721c:	f000 f9a4 	bl	8007568 <_sbrk_r>
 8007220:	4580      	cmp	r8, r0
 8007222:	d13a      	bne.n	800729a <_malloc_r+0xd2>
 8007224:	6821      	ldr	r1, [r4, #0]
 8007226:	3503      	adds	r5, #3
 8007228:	1a6d      	subs	r5, r5, r1
 800722a:	f025 0503 	bic.w	r5, r5, #3
 800722e:	3508      	adds	r5, #8
 8007230:	2d0c      	cmp	r5, #12
 8007232:	bf38      	it	cc
 8007234:	250c      	movcc	r5, #12
 8007236:	4629      	mov	r1, r5
 8007238:	4638      	mov	r0, r7
 800723a:	f7ff ffa5 	bl	8007188 <sbrk_aligned>
 800723e:	3001      	adds	r0, #1
 8007240:	d02b      	beq.n	800729a <_malloc_r+0xd2>
 8007242:	6823      	ldr	r3, [r4, #0]
 8007244:	442b      	add	r3, r5
 8007246:	6023      	str	r3, [r4, #0]
 8007248:	e00e      	b.n	8007268 <_malloc_r+0xa0>
 800724a:	6822      	ldr	r2, [r4, #0]
 800724c:	1b52      	subs	r2, r2, r5
 800724e:	d41e      	bmi.n	800728e <_malloc_r+0xc6>
 8007250:	2a0b      	cmp	r2, #11
 8007252:	d916      	bls.n	8007282 <_malloc_r+0xba>
 8007254:	1961      	adds	r1, r4, r5
 8007256:	42a3      	cmp	r3, r4
 8007258:	6025      	str	r5, [r4, #0]
 800725a:	bf18      	it	ne
 800725c:	6059      	strne	r1, [r3, #4]
 800725e:	6863      	ldr	r3, [r4, #4]
 8007260:	bf08      	it	eq
 8007262:	6031      	streq	r1, [r6, #0]
 8007264:	5162      	str	r2, [r4, r5]
 8007266:	604b      	str	r3, [r1, #4]
 8007268:	4638      	mov	r0, r7
 800726a:	f104 060b 	add.w	r6, r4, #11
 800726e:	f000 f9ed 	bl	800764c <__malloc_unlock>
 8007272:	f026 0607 	bic.w	r6, r6, #7
 8007276:	1d23      	adds	r3, r4, #4
 8007278:	1af2      	subs	r2, r6, r3
 800727a:	d0b6      	beq.n	80071ea <_malloc_r+0x22>
 800727c:	1b9b      	subs	r3, r3, r6
 800727e:	50a3      	str	r3, [r4, r2]
 8007280:	e7b3      	b.n	80071ea <_malloc_r+0x22>
 8007282:	6862      	ldr	r2, [r4, #4]
 8007284:	42a3      	cmp	r3, r4
 8007286:	bf0c      	ite	eq
 8007288:	6032      	streq	r2, [r6, #0]
 800728a:	605a      	strne	r2, [r3, #4]
 800728c:	e7ec      	b.n	8007268 <_malloc_r+0xa0>
 800728e:	4623      	mov	r3, r4
 8007290:	6864      	ldr	r4, [r4, #4]
 8007292:	e7b2      	b.n	80071fa <_malloc_r+0x32>
 8007294:	4634      	mov	r4, r6
 8007296:	6876      	ldr	r6, [r6, #4]
 8007298:	e7b9      	b.n	800720e <_malloc_r+0x46>
 800729a:	230c      	movs	r3, #12
 800729c:	603b      	str	r3, [r7, #0]
 800729e:	4638      	mov	r0, r7
 80072a0:	f000 f9d4 	bl	800764c <__malloc_unlock>
 80072a4:	e7a1      	b.n	80071ea <_malloc_r+0x22>
 80072a6:	6025      	str	r5, [r4, #0]
 80072a8:	e7de      	b.n	8007268 <_malloc_r+0xa0>
 80072aa:	bf00      	nop
 80072ac:	20004b68 	.word	0x20004b68

080072b0 <__ssputs_r>:
 80072b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072b4:	688e      	ldr	r6, [r1, #8]
 80072b6:	429e      	cmp	r6, r3
 80072b8:	4682      	mov	sl, r0
 80072ba:	460c      	mov	r4, r1
 80072bc:	4690      	mov	r8, r2
 80072be:	461f      	mov	r7, r3
 80072c0:	d838      	bhi.n	8007334 <__ssputs_r+0x84>
 80072c2:	898a      	ldrh	r2, [r1, #12]
 80072c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072c8:	d032      	beq.n	8007330 <__ssputs_r+0x80>
 80072ca:	6825      	ldr	r5, [r4, #0]
 80072cc:	6909      	ldr	r1, [r1, #16]
 80072ce:	eba5 0901 	sub.w	r9, r5, r1
 80072d2:	6965      	ldr	r5, [r4, #20]
 80072d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072dc:	3301      	adds	r3, #1
 80072de:	444b      	add	r3, r9
 80072e0:	106d      	asrs	r5, r5, #1
 80072e2:	429d      	cmp	r5, r3
 80072e4:	bf38      	it	cc
 80072e6:	461d      	movcc	r5, r3
 80072e8:	0553      	lsls	r3, r2, #21
 80072ea:	d531      	bpl.n	8007350 <__ssputs_r+0xa0>
 80072ec:	4629      	mov	r1, r5
 80072ee:	f7ff ff6b 	bl	80071c8 <_malloc_r>
 80072f2:	4606      	mov	r6, r0
 80072f4:	b950      	cbnz	r0, 800730c <__ssputs_r+0x5c>
 80072f6:	230c      	movs	r3, #12
 80072f8:	f8ca 3000 	str.w	r3, [sl]
 80072fc:	89a3      	ldrh	r3, [r4, #12]
 80072fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007302:	81a3      	strh	r3, [r4, #12]
 8007304:	f04f 30ff 	mov.w	r0, #4294967295
 8007308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800730c:	6921      	ldr	r1, [r4, #16]
 800730e:	464a      	mov	r2, r9
 8007310:	f7fe f82e 	bl	8005370 <memcpy>
 8007314:	89a3      	ldrh	r3, [r4, #12]
 8007316:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800731a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800731e:	81a3      	strh	r3, [r4, #12]
 8007320:	6126      	str	r6, [r4, #16]
 8007322:	6165      	str	r5, [r4, #20]
 8007324:	444e      	add	r6, r9
 8007326:	eba5 0509 	sub.w	r5, r5, r9
 800732a:	6026      	str	r6, [r4, #0]
 800732c:	60a5      	str	r5, [r4, #8]
 800732e:	463e      	mov	r6, r7
 8007330:	42be      	cmp	r6, r7
 8007332:	d900      	bls.n	8007336 <__ssputs_r+0x86>
 8007334:	463e      	mov	r6, r7
 8007336:	6820      	ldr	r0, [r4, #0]
 8007338:	4632      	mov	r2, r6
 800733a:	4641      	mov	r1, r8
 800733c:	f000 f966 	bl	800760c <memmove>
 8007340:	68a3      	ldr	r3, [r4, #8]
 8007342:	1b9b      	subs	r3, r3, r6
 8007344:	60a3      	str	r3, [r4, #8]
 8007346:	6823      	ldr	r3, [r4, #0]
 8007348:	4433      	add	r3, r6
 800734a:	6023      	str	r3, [r4, #0]
 800734c:	2000      	movs	r0, #0
 800734e:	e7db      	b.n	8007308 <__ssputs_r+0x58>
 8007350:	462a      	mov	r2, r5
 8007352:	f000 f981 	bl	8007658 <_realloc_r>
 8007356:	4606      	mov	r6, r0
 8007358:	2800      	cmp	r0, #0
 800735a:	d1e1      	bne.n	8007320 <__ssputs_r+0x70>
 800735c:	6921      	ldr	r1, [r4, #16]
 800735e:	4650      	mov	r0, sl
 8007360:	f7ff fec6 	bl	80070f0 <_free_r>
 8007364:	e7c7      	b.n	80072f6 <__ssputs_r+0x46>
	...

08007368 <_svfiprintf_r>:
 8007368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736c:	4698      	mov	r8, r3
 800736e:	898b      	ldrh	r3, [r1, #12]
 8007370:	061b      	lsls	r3, r3, #24
 8007372:	b09d      	sub	sp, #116	; 0x74
 8007374:	4607      	mov	r7, r0
 8007376:	460d      	mov	r5, r1
 8007378:	4614      	mov	r4, r2
 800737a:	d50e      	bpl.n	800739a <_svfiprintf_r+0x32>
 800737c:	690b      	ldr	r3, [r1, #16]
 800737e:	b963      	cbnz	r3, 800739a <_svfiprintf_r+0x32>
 8007380:	2140      	movs	r1, #64	; 0x40
 8007382:	f7ff ff21 	bl	80071c8 <_malloc_r>
 8007386:	6028      	str	r0, [r5, #0]
 8007388:	6128      	str	r0, [r5, #16]
 800738a:	b920      	cbnz	r0, 8007396 <_svfiprintf_r+0x2e>
 800738c:	230c      	movs	r3, #12
 800738e:	603b      	str	r3, [r7, #0]
 8007390:	f04f 30ff 	mov.w	r0, #4294967295
 8007394:	e0d1      	b.n	800753a <_svfiprintf_r+0x1d2>
 8007396:	2340      	movs	r3, #64	; 0x40
 8007398:	616b      	str	r3, [r5, #20]
 800739a:	2300      	movs	r3, #0
 800739c:	9309      	str	r3, [sp, #36]	; 0x24
 800739e:	2320      	movs	r3, #32
 80073a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80073a8:	2330      	movs	r3, #48	; 0x30
 80073aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007554 <_svfiprintf_r+0x1ec>
 80073ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073b2:	f04f 0901 	mov.w	r9, #1
 80073b6:	4623      	mov	r3, r4
 80073b8:	469a      	mov	sl, r3
 80073ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073be:	b10a      	cbz	r2, 80073c4 <_svfiprintf_r+0x5c>
 80073c0:	2a25      	cmp	r2, #37	; 0x25
 80073c2:	d1f9      	bne.n	80073b8 <_svfiprintf_r+0x50>
 80073c4:	ebba 0b04 	subs.w	fp, sl, r4
 80073c8:	d00b      	beq.n	80073e2 <_svfiprintf_r+0x7a>
 80073ca:	465b      	mov	r3, fp
 80073cc:	4622      	mov	r2, r4
 80073ce:	4629      	mov	r1, r5
 80073d0:	4638      	mov	r0, r7
 80073d2:	f7ff ff6d 	bl	80072b0 <__ssputs_r>
 80073d6:	3001      	adds	r0, #1
 80073d8:	f000 80aa 	beq.w	8007530 <_svfiprintf_r+0x1c8>
 80073dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073de:	445a      	add	r2, fp
 80073e0:	9209      	str	r2, [sp, #36]	; 0x24
 80073e2:	f89a 3000 	ldrb.w	r3, [sl]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 80a2 	beq.w	8007530 <_svfiprintf_r+0x1c8>
 80073ec:	2300      	movs	r3, #0
 80073ee:	f04f 32ff 	mov.w	r2, #4294967295
 80073f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073f6:	f10a 0a01 	add.w	sl, sl, #1
 80073fa:	9304      	str	r3, [sp, #16]
 80073fc:	9307      	str	r3, [sp, #28]
 80073fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007402:	931a      	str	r3, [sp, #104]	; 0x68
 8007404:	4654      	mov	r4, sl
 8007406:	2205      	movs	r2, #5
 8007408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800740c:	4851      	ldr	r0, [pc, #324]	; (8007554 <_svfiprintf_r+0x1ec>)
 800740e:	f7f8 feef 	bl	80001f0 <memchr>
 8007412:	9a04      	ldr	r2, [sp, #16]
 8007414:	b9d8      	cbnz	r0, 800744e <_svfiprintf_r+0xe6>
 8007416:	06d0      	lsls	r0, r2, #27
 8007418:	bf44      	itt	mi
 800741a:	2320      	movmi	r3, #32
 800741c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007420:	0711      	lsls	r1, r2, #28
 8007422:	bf44      	itt	mi
 8007424:	232b      	movmi	r3, #43	; 0x2b
 8007426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800742a:	f89a 3000 	ldrb.w	r3, [sl]
 800742e:	2b2a      	cmp	r3, #42	; 0x2a
 8007430:	d015      	beq.n	800745e <_svfiprintf_r+0xf6>
 8007432:	9a07      	ldr	r2, [sp, #28]
 8007434:	4654      	mov	r4, sl
 8007436:	2000      	movs	r0, #0
 8007438:	f04f 0c0a 	mov.w	ip, #10
 800743c:	4621      	mov	r1, r4
 800743e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007442:	3b30      	subs	r3, #48	; 0x30
 8007444:	2b09      	cmp	r3, #9
 8007446:	d94e      	bls.n	80074e6 <_svfiprintf_r+0x17e>
 8007448:	b1b0      	cbz	r0, 8007478 <_svfiprintf_r+0x110>
 800744a:	9207      	str	r2, [sp, #28]
 800744c:	e014      	b.n	8007478 <_svfiprintf_r+0x110>
 800744e:	eba0 0308 	sub.w	r3, r0, r8
 8007452:	fa09 f303 	lsl.w	r3, r9, r3
 8007456:	4313      	orrs	r3, r2
 8007458:	9304      	str	r3, [sp, #16]
 800745a:	46a2      	mov	sl, r4
 800745c:	e7d2      	b.n	8007404 <_svfiprintf_r+0x9c>
 800745e:	9b03      	ldr	r3, [sp, #12]
 8007460:	1d19      	adds	r1, r3, #4
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	9103      	str	r1, [sp, #12]
 8007466:	2b00      	cmp	r3, #0
 8007468:	bfbb      	ittet	lt
 800746a:	425b      	neglt	r3, r3
 800746c:	f042 0202 	orrlt.w	r2, r2, #2
 8007470:	9307      	strge	r3, [sp, #28]
 8007472:	9307      	strlt	r3, [sp, #28]
 8007474:	bfb8      	it	lt
 8007476:	9204      	strlt	r2, [sp, #16]
 8007478:	7823      	ldrb	r3, [r4, #0]
 800747a:	2b2e      	cmp	r3, #46	; 0x2e
 800747c:	d10c      	bne.n	8007498 <_svfiprintf_r+0x130>
 800747e:	7863      	ldrb	r3, [r4, #1]
 8007480:	2b2a      	cmp	r3, #42	; 0x2a
 8007482:	d135      	bne.n	80074f0 <_svfiprintf_r+0x188>
 8007484:	9b03      	ldr	r3, [sp, #12]
 8007486:	1d1a      	adds	r2, r3, #4
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	9203      	str	r2, [sp, #12]
 800748c:	2b00      	cmp	r3, #0
 800748e:	bfb8      	it	lt
 8007490:	f04f 33ff 	movlt.w	r3, #4294967295
 8007494:	3402      	adds	r4, #2
 8007496:	9305      	str	r3, [sp, #20]
 8007498:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007564 <_svfiprintf_r+0x1fc>
 800749c:	7821      	ldrb	r1, [r4, #0]
 800749e:	2203      	movs	r2, #3
 80074a0:	4650      	mov	r0, sl
 80074a2:	f7f8 fea5 	bl	80001f0 <memchr>
 80074a6:	b140      	cbz	r0, 80074ba <_svfiprintf_r+0x152>
 80074a8:	2340      	movs	r3, #64	; 0x40
 80074aa:	eba0 000a 	sub.w	r0, r0, sl
 80074ae:	fa03 f000 	lsl.w	r0, r3, r0
 80074b2:	9b04      	ldr	r3, [sp, #16]
 80074b4:	4303      	orrs	r3, r0
 80074b6:	3401      	adds	r4, #1
 80074b8:	9304      	str	r3, [sp, #16]
 80074ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074be:	4826      	ldr	r0, [pc, #152]	; (8007558 <_svfiprintf_r+0x1f0>)
 80074c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074c4:	2206      	movs	r2, #6
 80074c6:	f7f8 fe93 	bl	80001f0 <memchr>
 80074ca:	2800      	cmp	r0, #0
 80074cc:	d038      	beq.n	8007540 <_svfiprintf_r+0x1d8>
 80074ce:	4b23      	ldr	r3, [pc, #140]	; (800755c <_svfiprintf_r+0x1f4>)
 80074d0:	bb1b      	cbnz	r3, 800751a <_svfiprintf_r+0x1b2>
 80074d2:	9b03      	ldr	r3, [sp, #12]
 80074d4:	3307      	adds	r3, #7
 80074d6:	f023 0307 	bic.w	r3, r3, #7
 80074da:	3308      	adds	r3, #8
 80074dc:	9303      	str	r3, [sp, #12]
 80074de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074e0:	4433      	add	r3, r6
 80074e2:	9309      	str	r3, [sp, #36]	; 0x24
 80074e4:	e767      	b.n	80073b6 <_svfiprintf_r+0x4e>
 80074e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80074ea:	460c      	mov	r4, r1
 80074ec:	2001      	movs	r0, #1
 80074ee:	e7a5      	b.n	800743c <_svfiprintf_r+0xd4>
 80074f0:	2300      	movs	r3, #0
 80074f2:	3401      	adds	r4, #1
 80074f4:	9305      	str	r3, [sp, #20]
 80074f6:	4619      	mov	r1, r3
 80074f8:	f04f 0c0a 	mov.w	ip, #10
 80074fc:	4620      	mov	r0, r4
 80074fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007502:	3a30      	subs	r2, #48	; 0x30
 8007504:	2a09      	cmp	r2, #9
 8007506:	d903      	bls.n	8007510 <_svfiprintf_r+0x1a8>
 8007508:	2b00      	cmp	r3, #0
 800750a:	d0c5      	beq.n	8007498 <_svfiprintf_r+0x130>
 800750c:	9105      	str	r1, [sp, #20]
 800750e:	e7c3      	b.n	8007498 <_svfiprintf_r+0x130>
 8007510:	fb0c 2101 	mla	r1, ip, r1, r2
 8007514:	4604      	mov	r4, r0
 8007516:	2301      	movs	r3, #1
 8007518:	e7f0      	b.n	80074fc <_svfiprintf_r+0x194>
 800751a:	ab03      	add	r3, sp, #12
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	462a      	mov	r2, r5
 8007520:	4b0f      	ldr	r3, [pc, #60]	; (8007560 <_svfiprintf_r+0x1f8>)
 8007522:	a904      	add	r1, sp, #16
 8007524:	4638      	mov	r0, r7
 8007526:	f7fd ffd9 	bl	80054dc <_printf_float>
 800752a:	1c42      	adds	r2, r0, #1
 800752c:	4606      	mov	r6, r0
 800752e:	d1d6      	bne.n	80074de <_svfiprintf_r+0x176>
 8007530:	89ab      	ldrh	r3, [r5, #12]
 8007532:	065b      	lsls	r3, r3, #25
 8007534:	f53f af2c 	bmi.w	8007390 <_svfiprintf_r+0x28>
 8007538:	9809      	ldr	r0, [sp, #36]	; 0x24
 800753a:	b01d      	add	sp, #116	; 0x74
 800753c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007540:	ab03      	add	r3, sp, #12
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	462a      	mov	r2, r5
 8007546:	4b06      	ldr	r3, [pc, #24]	; (8007560 <_svfiprintf_r+0x1f8>)
 8007548:	a904      	add	r1, sp, #16
 800754a:	4638      	mov	r0, r7
 800754c:	f7fe fa6a 	bl	8005a24 <_printf_i>
 8007550:	e7eb      	b.n	800752a <_svfiprintf_r+0x1c2>
 8007552:	bf00      	nop
 8007554:	080084ac 	.word	0x080084ac
 8007558:	080084b6 	.word	0x080084b6
 800755c:	080054dd 	.word	0x080054dd
 8007560:	080072b1 	.word	0x080072b1
 8007564:	080084b2 	.word	0x080084b2

08007568 <_sbrk_r>:
 8007568:	b538      	push	{r3, r4, r5, lr}
 800756a:	4d06      	ldr	r5, [pc, #24]	; (8007584 <_sbrk_r+0x1c>)
 800756c:	2300      	movs	r3, #0
 800756e:	4604      	mov	r4, r0
 8007570:	4608      	mov	r0, r1
 8007572:	602b      	str	r3, [r5, #0]
 8007574:	f7fa f91c 	bl	80017b0 <_sbrk>
 8007578:	1c43      	adds	r3, r0, #1
 800757a:	d102      	bne.n	8007582 <_sbrk_r+0x1a>
 800757c:	682b      	ldr	r3, [r5, #0]
 800757e:	b103      	cbz	r3, 8007582 <_sbrk_r+0x1a>
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	bd38      	pop	{r3, r4, r5, pc}
 8007584:	20004b70 	.word	0x20004b70

08007588 <__assert_func>:
 8007588:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800758a:	4614      	mov	r4, r2
 800758c:	461a      	mov	r2, r3
 800758e:	4b09      	ldr	r3, [pc, #36]	; (80075b4 <__assert_func+0x2c>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4605      	mov	r5, r0
 8007594:	68d8      	ldr	r0, [r3, #12]
 8007596:	b14c      	cbz	r4, 80075ac <__assert_func+0x24>
 8007598:	4b07      	ldr	r3, [pc, #28]	; (80075b8 <__assert_func+0x30>)
 800759a:	9100      	str	r1, [sp, #0]
 800759c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80075a0:	4906      	ldr	r1, [pc, #24]	; (80075bc <__assert_func+0x34>)
 80075a2:	462b      	mov	r3, r5
 80075a4:	f000 f80e 	bl	80075c4 <fiprintf>
 80075a8:	f000 faac 	bl	8007b04 <abort>
 80075ac:	4b04      	ldr	r3, [pc, #16]	; (80075c0 <__assert_func+0x38>)
 80075ae:	461c      	mov	r4, r3
 80075b0:	e7f3      	b.n	800759a <__assert_func+0x12>
 80075b2:	bf00      	nop
 80075b4:	20000010 	.word	0x20000010
 80075b8:	080084bd 	.word	0x080084bd
 80075bc:	080084ca 	.word	0x080084ca
 80075c0:	080084f8 	.word	0x080084f8

080075c4 <fiprintf>:
 80075c4:	b40e      	push	{r1, r2, r3}
 80075c6:	b503      	push	{r0, r1, lr}
 80075c8:	4601      	mov	r1, r0
 80075ca:	ab03      	add	r3, sp, #12
 80075cc:	4805      	ldr	r0, [pc, #20]	; (80075e4 <fiprintf+0x20>)
 80075ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80075d2:	6800      	ldr	r0, [r0, #0]
 80075d4:	9301      	str	r3, [sp, #4]
 80075d6:	f000 f897 	bl	8007708 <_vfiprintf_r>
 80075da:	b002      	add	sp, #8
 80075dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80075e0:	b003      	add	sp, #12
 80075e2:	4770      	bx	lr
 80075e4:	20000010 	.word	0x20000010

080075e8 <__ascii_mbtowc>:
 80075e8:	b082      	sub	sp, #8
 80075ea:	b901      	cbnz	r1, 80075ee <__ascii_mbtowc+0x6>
 80075ec:	a901      	add	r1, sp, #4
 80075ee:	b142      	cbz	r2, 8007602 <__ascii_mbtowc+0x1a>
 80075f0:	b14b      	cbz	r3, 8007606 <__ascii_mbtowc+0x1e>
 80075f2:	7813      	ldrb	r3, [r2, #0]
 80075f4:	600b      	str	r3, [r1, #0]
 80075f6:	7812      	ldrb	r2, [r2, #0]
 80075f8:	1e10      	subs	r0, r2, #0
 80075fa:	bf18      	it	ne
 80075fc:	2001      	movne	r0, #1
 80075fe:	b002      	add	sp, #8
 8007600:	4770      	bx	lr
 8007602:	4610      	mov	r0, r2
 8007604:	e7fb      	b.n	80075fe <__ascii_mbtowc+0x16>
 8007606:	f06f 0001 	mvn.w	r0, #1
 800760a:	e7f8      	b.n	80075fe <__ascii_mbtowc+0x16>

0800760c <memmove>:
 800760c:	4288      	cmp	r0, r1
 800760e:	b510      	push	{r4, lr}
 8007610:	eb01 0402 	add.w	r4, r1, r2
 8007614:	d902      	bls.n	800761c <memmove+0x10>
 8007616:	4284      	cmp	r4, r0
 8007618:	4623      	mov	r3, r4
 800761a:	d807      	bhi.n	800762c <memmove+0x20>
 800761c:	1e43      	subs	r3, r0, #1
 800761e:	42a1      	cmp	r1, r4
 8007620:	d008      	beq.n	8007634 <memmove+0x28>
 8007622:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007626:	f803 2f01 	strb.w	r2, [r3, #1]!
 800762a:	e7f8      	b.n	800761e <memmove+0x12>
 800762c:	4402      	add	r2, r0
 800762e:	4601      	mov	r1, r0
 8007630:	428a      	cmp	r2, r1
 8007632:	d100      	bne.n	8007636 <memmove+0x2a>
 8007634:	bd10      	pop	{r4, pc}
 8007636:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800763a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800763e:	e7f7      	b.n	8007630 <memmove+0x24>

08007640 <__malloc_lock>:
 8007640:	4801      	ldr	r0, [pc, #4]	; (8007648 <__malloc_lock+0x8>)
 8007642:	f000 bc1f 	b.w	8007e84 <__retarget_lock_acquire_recursive>
 8007646:	bf00      	nop
 8007648:	20004b74 	.word	0x20004b74

0800764c <__malloc_unlock>:
 800764c:	4801      	ldr	r0, [pc, #4]	; (8007654 <__malloc_unlock+0x8>)
 800764e:	f000 bc1a 	b.w	8007e86 <__retarget_lock_release_recursive>
 8007652:	bf00      	nop
 8007654:	20004b74 	.word	0x20004b74

08007658 <_realloc_r>:
 8007658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800765c:	4680      	mov	r8, r0
 800765e:	4614      	mov	r4, r2
 8007660:	460e      	mov	r6, r1
 8007662:	b921      	cbnz	r1, 800766e <_realloc_r+0x16>
 8007664:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007668:	4611      	mov	r1, r2
 800766a:	f7ff bdad 	b.w	80071c8 <_malloc_r>
 800766e:	b92a      	cbnz	r2, 800767c <_realloc_r+0x24>
 8007670:	f7ff fd3e 	bl	80070f0 <_free_r>
 8007674:	4625      	mov	r5, r4
 8007676:	4628      	mov	r0, r5
 8007678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800767c:	f000 fc6a 	bl	8007f54 <_malloc_usable_size_r>
 8007680:	4284      	cmp	r4, r0
 8007682:	4607      	mov	r7, r0
 8007684:	d802      	bhi.n	800768c <_realloc_r+0x34>
 8007686:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800768a:	d812      	bhi.n	80076b2 <_realloc_r+0x5a>
 800768c:	4621      	mov	r1, r4
 800768e:	4640      	mov	r0, r8
 8007690:	f7ff fd9a 	bl	80071c8 <_malloc_r>
 8007694:	4605      	mov	r5, r0
 8007696:	2800      	cmp	r0, #0
 8007698:	d0ed      	beq.n	8007676 <_realloc_r+0x1e>
 800769a:	42bc      	cmp	r4, r7
 800769c:	4622      	mov	r2, r4
 800769e:	4631      	mov	r1, r6
 80076a0:	bf28      	it	cs
 80076a2:	463a      	movcs	r2, r7
 80076a4:	f7fd fe64 	bl	8005370 <memcpy>
 80076a8:	4631      	mov	r1, r6
 80076aa:	4640      	mov	r0, r8
 80076ac:	f7ff fd20 	bl	80070f0 <_free_r>
 80076b0:	e7e1      	b.n	8007676 <_realloc_r+0x1e>
 80076b2:	4635      	mov	r5, r6
 80076b4:	e7df      	b.n	8007676 <_realloc_r+0x1e>

080076b6 <__sfputc_r>:
 80076b6:	6893      	ldr	r3, [r2, #8]
 80076b8:	3b01      	subs	r3, #1
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	b410      	push	{r4}
 80076be:	6093      	str	r3, [r2, #8]
 80076c0:	da08      	bge.n	80076d4 <__sfputc_r+0x1e>
 80076c2:	6994      	ldr	r4, [r2, #24]
 80076c4:	42a3      	cmp	r3, r4
 80076c6:	db01      	blt.n	80076cc <__sfputc_r+0x16>
 80076c8:	290a      	cmp	r1, #10
 80076ca:	d103      	bne.n	80076d4 <__sfputc_r+0x1e>
 80076cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076d0:	f000 b94a 	b.w	8007968 <__swbuf_r>
 80076d4:	6813      	ldr	r3, [r2, #0]
 80076d6:	1c58      	adds	r0, r3, #1
 80076d8:	6010      	str	r0, [r2, #0]
 80076da:	7019      	strb	r1, [r3, #0]
 80076dc:	4608      	mov	r0, r1
 80076de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <__sfputs_r>:
 80076e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e6:	4606      	mov	r6, r0
 80076e8:	460f      	mov	r7, r1
 80076ea:	4614      	mov	r4, r2
 80076ec:	18d5      	adds	r5, r2, r3
 80076ee:	42ac      	cmp	r4, r5
 80076f0:	d101      	bne.n	80076f6 <__sfputs_r+0x12>
 80076f2:	2000      	movs	r0, #0
 80076f4:	e007      	b.n	8007706 <__sfputs_r+0x22>
 80076f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076fa:	463a      	mov	r2, r7
 80076fc:	4630      	mov	r0, r6
 80076fe:	f7ff ffda 	bl	80076b6 <__sfputc_r>
 8007702:	1c43      	adds	r3, r0, #1
 8007704:	d1f3      	bne.n	80076ee <__sfputs_r+0xa>
 8007706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007708 <_vfiprintf_r>:
 8007708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800770c:	460d      	mov	r5, r1
 800770e:	b09d      	sub	sp, #116	; 0x74
 8007710:	4614      	mov	r4, r2
 8007712:	4698      	mov	r8, r3
 8007714:	4606      	mov	r6, r0
 8007716:	b118      	cbz	r0, 8007720 <_vfiprintf_r+0x18>
 8007718:	6983      	ldr	r3, [r0, #24]
 800771a:	b90b      	cbnz	r3, 8007720 <_vfiprintf_r+0x18>
 800771c:	f000 fb14 	bl	8007d48 <__sinit>
 8007720:	4b89      	ldr	r3, [pc, #548]	; (8007948 <_vfiprintf_r+0x240>)
 8007722:	429d      	cmp	r5, r3
 8007724:	d11b      	bne.n	800775e <_vfiprintf_r+0x56>
 8007726:	6875      	ldr	r5, [r6, #4]
 8007728:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800772a:	07d9      	lsls	r1, r3, #31
 800772c:	d405      	bmi.n	800773a <_vfiprintf_r+0x32>
 800772e:	89ab      	ldrh	r3, [r5, #12]
 8007730:	059a      	lsls	r2, r3, #22
 8007732:	d402      	bmi.n	800773a <_vfiprintf_r+0x32>
 8007734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007736:	f000 fba5 	bl	8007e84 <__retarget_lock_acquire_recursive>
 800773a:	89ab      	ldrh	r3, [r5, #12]
 800773c:	071b      	lsls	r3, r3, #28
 800773e:	d501      	bpl.n	8007744 <_vfiprintf_r+0x3c>
 8007740:	692b      	ldr	r3, [r5, #16]
 8007742:	b9eb      	cbnz	r3, 8007780 <_vfiprintf_r+0x78>
 8007744:	4629      	mov	r1, r5
 8007746:	4630      	mov	r0, r6
 8007748:	f000 f96e 	bl	8007a28 <__swsetup_r>
 800774c:	b1c0      	cbz	r0, 8007780 <_vfiprintf_r+0x78>
 800774e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007750:	07dc      	lsls	r4, r3, #31
 8007752:	d50e      	bpl.n	8007772 <_vfiprintf_r+0x6a>
 8007754:	f04f 30ff 	mov.w	r0, #4294967295
 8007758:	b01d      	add	sp, #116	; 0x74
 800775a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800775e:	4b7b      	ldr	r3, [pc, #492]	; (800794c <_vfiprintf_r+0x244>)
 8007760:	429d      	cmp	r5, r3
 8007762:	d101      	bne.n	8007768 <_vfiprintf_r+0x60>
 8007764:	68b5      	ldr	r5, [r6, #8]
 8007766:	e7df      	b.n	8007728 <_vfiprintf_r+0x20>
 8007768:	4b79      	ldr	r3, [pc, #484]	; (8007950 <_vfiprintf_r+0x248>)
 800776a:	429d      	cmp	r5, r3
 800776c:	bf08      	it	eq
 800776e:	68f5      	ldreq	r5, [r6, #12]
 8007770:	e7da      	b.n	8007728 <_vfiprintf_r+0x20>
 8007772:	89ab      	ldrh	r3, [r5, #12]
 8007774:	0598      	lsls	r0, r3, #22
 8007776:	d4ed      	bmi.n	8007754 <_vfiprintf_r+0x4c>
 8007778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800777a:	f000 fb84 	bl	8007e86 <__retarget_lock_release_recursive>
 800777e:	e7e9      	b.n	8007754 <_vfiprintf_r+0x4c>
 8007780:	2300      	movs	r3, #0
 8007782:	9309      	str	r3, [sp, #36]	; 0x24
 8007784:	2320      	movs	r3, #32
 8007786:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800778a:	f8cd 800c 	str.w	r8, [sp, #12]
 800778e:	2330      	movs	r3, #48	; 0x30
 8007790:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007954 <_vfiprintf_r+0x24c>
 8007794:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007798:	f04f 0901 	mov.w	r9, #1
 800779c:	4623      	mov	r3, r4
 800779e:	469a      	mov	sl, r3
 80077a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077a4:	b10a      	cbz	r2, 80077aa <_vfiprintf_r+0xa2>
 80077a6:	2a25      	cmp	r2, #37	; 0x25
 80077a8:	d1f9      	bne.n	800779e <_vfiprintf_r+0x96>
 80077aa:	ebba 0b04 	subs.w	fp, sl, r4
 80077ae:	d00b      	beq.n	80077c8 <_vfiprintf_r+0xc0>
 80077b0:	465b      	mov	r3, fp
 80077b2:	4622      	mov	r2, r4
 80077b4:	4629      	mov	r1, r5
 80077b6:	4630      	mov	r0, r6
 80077b8:	f7ff ff94 	bl	80076e4 <__sfputs_r>
 80077bc:	3001      	adds	r0, #1
 80077be:	f000 80aa 	beq.w	8007916 <_vfiprintf_r+0x20e>
 80077c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077c4:	445a      	add	r2, fp
 80077c6:	9209      	str	r2, [sp, #36]	; 0x24
 80077c8:	f89a 3000 	ldrb.w	r3, [sl]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 80a2 	beq.w	8007916 <_vfiprintf_r+0x20e>
 80077d2:	2300      	movs	r3, #0
 80077d4:	f04f 32ff 	mov.w	r2, #4294967295
 80077d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077dc:	f10a 0a01 	add.w	sl, sl, #1
 80077e0:	9304      	str	r3, [sp, #16]
 80077e2:	9307      	str	r3, [sp, #28]
 80077e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077e8:	931a      	str	r3, [sp, #104]	; 0x68
 80077ea:	4654      	mov	r4, sl
 80077ec:	2205      	movs	r2, #5
 80077ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077f2:	4858      	ldr	r0, [pc, #352]	; (8007954 <_vfiprintf_r+0x24c>)
 80077f4:	f7f8 fcfc 	bl	80001f0 <memchr>
 80077f8:	9a04      	ldr	r2, [sp, #16]
 80077fa:	b9d8      	cbnz	r0, 8007834 <_vfiprintf_r+0x12c>
 80077fc:	06d1      	lsls	r1, r2, #27
 80077fe:	bf44      	itt	mi
 8007800:	2320      	movmi	r3, #32
 8007802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007806:	0713      	lsls	r3, r2, #28
 8007808:	bf44      	itt	mi
 800780a:	232b      	movmi	r3, #43	; 0x2b
 800780c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007810:	f89a 3000 	ldrb.w	r3, [sl]
 8007814:	2b2a      	cmp	r3, #42	; 0x2a
 8007816:	d015      	beq.n	8007844 <_vfiprintf_r+0x13c>
 8007818:	9a07      	ldr	r2, [sp, #28]
 800781a:	4654      	mov	r4, sl
 800781c:	2000      	movs	r0, #0
 800781e:	f04f 0c0a 	mov.w	ip, #10
 8007822:	4621      	mov	r1, r4
 8007824:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007828:	3b30      	subs	r3, #48	; 0x30
 800782a:	2b09      	cmp	r3, #9
 800782c:	d94e      	bls.n	80078cc <_vfiprintf_r+0x1c4>
 800782e:	b1b0      	cbz	r0, 800785e <_vfiprintf_r+0x156>
 8007830:	9207      	str	r2, [sp, #28]
 8007832:	e014      	b.n	800785e <_vfiprintf_r+0x156>
 8007834:	eba0 0308 	sub.w	r3, r0, r8
 8007838:	fa09 f303 	lsl.w	r3, r9, r3
 800783c:	4313      	orrs	r3, r2
 800783e:	9304      	str	r3, [sp, #16]
 8007840:	46a2      	mov	sl, r4
 8007842:	e7d2      	b.n	80077ea <_vfiprintf_r+0xe2>
 8007844:	9b03      	ldr	r3, [sp, #12]
 8007846:	1d19      	adds	r1, r3, #4
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	9103      	str	r1, [sp, #12]
 800784c:	2b00      	cmp	r3, #0
 800784e:	bfbb      	ittet	lt
 8007850:	425b      	neglt	r3, r3
 8007852:	f042 0202 	orrlt.w	r2, r2, #2
 8007856:	9307      	strge	r3, [sp, #28]
 8007858:	9307      	strlt	r3, [sp, #28]
 800785a:	bfb8      	it	lt
 800785c:	9204      	strlt	r2, [sp, #16]
 800785e:	7823      	ldrb	r3, [r4, #0]
 8007860:	2b2e      	cmp	r3, #46	; 0x2e
 8007862:	d10c      	bne.n	800787e <_vfiprintf_r+0x176>
 8007864:	7863      	ldrb	r3, [r4, #1]
 8007866:	2b2a      	cmp	r3, #42	; 0x2a
 8007868:	d135      	bne.n	80078d6 <_vfiprintf_r+0x1ce>
 800786a:	9b03      	ldr	r3, [sp, #12]
 800786c:	1d1a      	adds	r2, r3, #4
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	9203      	str	r2, [sp, #12]
 8007872:	2b00      	cmp	r3, #0
 8007874:	bfb8      	it	lt
 8007876:	f04f 33ff 	movlt.w	r3, #4294967295
 800787a:	3402      	adds	r4, #2
 800787c:	9305      	str	r3, [sp, #20]
 800787e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007964 <_vfiprintf_r+0x25c>
 8007882:	7821      	ldrb	r1, [r4, #0]
 8007884:	2203      	movs	r2, #3
 8007886:	4650      	mov	r0, sl
 8007888:	f7f8 fcb2 	bl	80001f0 <memchr>
 800788c:	b140      	cbz	r0, 80078a0 <_vfiprintf_r+0x198>
 800788e:	2340      	movs	r3, #64	; 0x40
 8007890:	eba0 000a 	sub.w	r0, r0, sl
 8007894:	fa03 f000 	lsl.w	r0, r3, r0
 8007898:	9b04      	ldr	r3, [sp, #16]
 800789a:	4303      	orrs	r3, r0
 800789c:	3401      	adds	r4, #1
 800789e:	9304      	str	r3, [sp, #16]
 80078a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078a4:	482c      	ldr	r0, [pc, #176]	; (8007958 <_vfiprintf_r+0x250>)
 80078a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078aa:	2206      	movs	r2, #6
 80078ac:	f7f8 fca0 	bl	80001f0 <memchr>
 80078b0:	2800      	cmp	r0, #0
 80078b2:	d03f      	beq.n	8007934 <_vfiprintf_r+0x22c>
 80078b4:	4b29      	ldr	r3, [pc, #164]	; (800795c <_vfiprintf_r+0x254>)
 80078b6:	bb1b      	cbnz	r3, 8007900 <_vfiprintf_r+0x1f8>
 80078b8:	9b03      	ldr	r3, [sp, #12]
 80078ba:	3307      	adds	r3, #7
 80078bc:	f023 0307 	bic.w	r3, r3, #7
 80078c0:	3308      	adds	r3, #8
 80078c2:	9303      	str	r3, [sp, #12]
 80078c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078c6:	443b      	add	r3, r7
 80078c8:	9309      	str	r3, [sp, #36]	; 0x24
 80078ca:	e767      	b.n	800779c <_vfiprintf_r+0x94>
 80078cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80078d0:	460c      	mov	r4, r1
 80078d2:	2001      	movs	r0, #1
 80078d4:	e7a5      	b.n	8007822 <_vfiprintf_r+0x11a>
 80078d6:	2300      	movs	r3, #0
 80078d8:	3401      	adds	r4, #1
 80078da:	9305      	str	r3, [sp, #20]
 80078dc:	4619      	mov	r1, r3
 80078de:	f04f 0c0a 	mov.w	ip, #10
 80078e2:	4620      	mov	r0, r4
 80078e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078e8:	3a30      	subs	r2, #48	; 0x30
 80078ea:	2a09      	cmp	r2, #9
 80078ec:	d903      	bls.n	80078f6 <_vfiprintf_r+0x1ee>
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d0c5      	beq.n	800787e <_vfiprintf_r+0x176>
 80078f2:	9105      	str	r1, [sp, #20]
 80078f4:	e7c3      	b.n	800787e <_vfiprintf_r+0x176>
 80078f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80078fa:	4604      	mov	r4, r0
 80078fc:	2301      	movs	r3, #1
 80078fe:	e7f0      	b.n	80078e2 <_vfiprintf_r+0x1da>
 8007900:	ab03      	add	r3, sp, #12
 8007902:	9300      	str	r3, [sp, #0]
 8007904:	462a      	mov	r2, r5
 8007906:	4b16      	ldr	r3, [pc, #88]	; (8007960 <_vfiprintf_r+0x258>)
 8007908:	a904      	add	r1, sp, #16
 800790a:	4630      	mov	r0, r6
 800790c:	f7fd fde6 	bl	80054dc <_printf_float>
 8007910:	4607      	mov	r7, r0
 8007912:	1c78      	adds	r0, r7, #1
 8007914:	d1d6      	bne.n	80078c4 <_vfiprintf_r+0x1bc>
 8007916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007918:	07d9      	lsls	r1, r3, #31
 800791a:	d405      	bmi.n	8007928 <_vfiprintf_r+0x220>
 800791c:	89ab      	ldrh	r3, [r5, #12]
 800791e:	059a      	lsls	r2, r3, #22
 8007920:	d402      	bmi.n	8007928 <_vfiprintf_r+0x220>
 8007922:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007924:	f000 faaf 	bl	8007e86 <__retarget_lock_release_recursive>
 8007928:	89ab      	ldrh	r3, [r5, #12]
 800792a:	065b      	lsls	r3, r3, #25
 800792c:	f53f af12 	bmi.w	8007754 <_vfiprintf_r+0x4c>
 8007930:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007932:	e711      	b.n	8007758 <_vfiprintf_r+0x50>
 8007934:	ab03      	add	r3, sp, #12
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	462a      	mov	r2, r5
 800793a:	4b09      	ldr	r3, [pc, #36]	; (8007960 <_vfiprintf_r+0x258>)
 800793c:	a904      	add	r1, sp, #16
 800793e:	4630      	mov	r0, r6
 8007940:	f7fe f870 	bl	8005a24 <_printf_i>
 8007944:	e7e4      	b.n	8007910 <_vfiprintf_r+0x208>
 8007946:	bf00      	nop
 8007948:	08008624 	.word	0x08008624
 800794c:	08008644 	.word	0x08008644
 8007950:	08008604 	.word	0x08008604
 8007954:	080084ac 	.word	0x080084ac
 8007958:	080084b6 	.word	0x080084b6
 800795c:	080054dd 	.word	0x080054dd
 8007960:	080076e5 	.word	0x080076e5
 8007964:	080084b2 	.word	0x080084b2

08007968 <__swbuf_r>:
 8007968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796a:	460e      	mov	r6, r1
 800796c:	4614      	mov	r4, r2
 800796e:	4605      	mov	r5, r0
 8007970:	b118      	cbz	r0, 800797a <__swbuf_r+0x12>
 8007972:	6983      	ldr	r3, [r0, #24]
 8007974:	b90b      	cbnz	r3, 800797a <__swbuf_r+0x12>
 8007976:	f000 f9e7 	bl	8007d48 <__sinit>
 800797a:	4b21      	ldr	r3, [pc, #132]	; (8007a00 <__swbuf_r+0x98>)
 800797c:	429c      	cmp	r4, r3
 800797e:	d12b      	bne.n	80079d8 <__swbuf_r+0x70>
 8007980:	686c      	ldr	r4, [r5, #4]
 8007982:	69a3      	ldr	r3, [r4, #24]
 8007984:	60a3      	str	r3, [r4, #8]
 8007986:	89a3      	ldrh	r3, [r4, #12]
 8007988:	071a      	lsls	r2, r3, #28
 800798a:	d52f      	bpl.n	80079ec <__swbuf_r+0x84>
 800798c:	6923      	ldr	r3, [r4, #16]
 800798e:	b36b      	cbz	r3, 80079ec <__swbuf_r+0x84>
 8007990:	6923      	ldr	r3, [r4, #16]
 8007992:	6820      	ldr	r0, [r4, #0]
 8007994:	1ac0      	subs	r0, r0, r3
 8007996:	6963      	ldr	r3, [r4, #20]
 8007998:	b2f6      	uxtb	r6, r6
 800799a:	4283      	cmp	r3, r0
 800799c:	4637      	mov	r7, r6
 800799e:	dc04      	bgt.n	80079aa <__swbuf_r+0x42>
 80079a0:	4621      	mov	r1, r4
 80079a2:	4628      	mov	r0, r5
 80079a4:	f000 f93c 	bl	8007c20 <_fflush_r>
 80079a8:	bb30      	cbnz	r0, 80079f8 <__swbuf_r+0x90>
 80079aa:	68a3      	ldr	r3, [r4, #8]
 80079ac:	3b01      	subs	r3, #1
 80079ae:	60a3      	str	r3, [r4, #8]
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	1c5a      	adds	r2, r3, #1
 80079b4:	6022      	str	r2, [r4, #0]
 80079b6:	701e      	strb	r6, [r3, #0]
 80079b8:	6963      	ldr	r3, [r4, #20]
 80079ba:	3001      	adds	r0, #1
 80079bc:	4283      	cmp	r3, r0
 80079be:	d004      	beq.n	80079ca <__swbuf_r+0x62>
 80079c0:	89a3      	ldrh	r3, [r4, #12]
 80079c2:	07db      	lsls	r3, r3, #31
 80079c4:	d506      	bpl.n	80079d4 <__swbuf_r+0x6c>
 80079c6:	2e0a      	cmp	r6, #10
 80079c8:	d104      	bne.n	80079d4 <__swbuf_r+0x6c>
 80079ca:	4621      	mov	r1, r4
 80079cc:	4628      	mov	r0, r5
 80079ce:	f000 f927 	bl	8007c20 <_fflush_r>
 80079d2:	b988      	cbnz	r0, 80079f8 <__swbuf_r+0x90>
 80079d4:	4638      	mov	r0, r7
 80079d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079d8:	4b0a      	ldr	r3, [pc, #40]	; (8007a04 <__swbuf_r+0x9c>)
 80079da:	429c      	cmp	r4, r3
 80079dc:	d101      	bne.n	80079e2 <__swbuf_r+0x7a>
 80079de:	68ac      	ldr	r4, [r5, #8]
 80079e0:	e7cf      	b.n	8007982 <__swbuf_r+0x1a>
 80079e2:	4b09      	ldr	r3, [pc, #36]	; (8007a08 <__swbuf_r+0xa0>)
 80079e4:	429c      	cmp	r4, r3
 80079e6:	bf08      	it	eq
 80079e8:	68ec      	ldreq	r4, [r5, #12]
 80079ea:	e7ca      	b.n	8007982 <__swbuf_r+0x1a>
 80079ec:	4621      	mov	r1, r4
 80079ee:	4628      	mov	r0, r5
 80079f0:	f000 f81a 	bl	8007a28 <__swsetup_r>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d0cb      	beq.n	8007990 <__swbuf_r+0x28>
 80079f8:	f04f 37ff 	mov.w	r7, #4294967295
 80079fc:	e7ea      	b.n	80079d4 <__swbuf_r+0x6c>
 80079fe:	bf00      	nop
 8007a00:	08008624 	.word	0x08008624
 8007a04:	08008644 	.word	0x08008644
 8007a08:	08008604 	.word	0x08008604

08007a0c <__ascii_wctomb>:
 8007a0c:	b149      	cbz	r1, 8007a22 <__ascii_wctomb+0x16>
 8007a0e:	2aff      	cmp	r2, #255	; 0xff
 8007a10:	bf85      	ittet	hi
 8007a12:	238a      	movhi	r3, #138	; 0x8a
 8007a14:	6003      	strhi	r3, [r0, #0]
 8007a16:	700a      	strbls	r2, [r1, #0]
 8007a18:	f04f 30ff 	movhi.w	r0, #4294967295
 8007a1c:	bf98      	it	ls
 8007a1e:	2001      	movls	r0, #1
 8007a20:	4770      	bx	lr
 8007a22:	4608      	mov	r0, r1
 8007a24:	4770      	bx	lr
	...

08007a28 <__swsetup_r>:
 8007a28:	4b32      	ldr	r3, [pc, #200]	; (8007af4 <__swsetup_r+0xcc>)
 8007a2a:	b570      	push	{r4, r5, r6, lr}
 8007a2c:	681d      	ldr	r5, [r3, #0]
 8007a2e:	4606      	mov	r6, r0
 8007a30:	460c      	mov	r4, r1
 8007a32:	b125      	cbz	r5, 8007a3e <__swsetup_r+0x16>
 8007a34:	69ab      	ldr	r3, [r5, #24]
 8007a36:	b913      	cbnz	r3, 8007a3e <__swsetup_r+0x16>
 8007a38:	4628      	mov	r0, r5
 8007a3a:	f000 f985 	bl	8007d48 <__sinit>
 8007a3e:	4b2e      	ldr	r3, [pc, #184]	; (8007af8 <__swsetup_r+0xd0>)
 8007a40:	429c      	cmp	r4, r3
 8007a42:	d10f      	bne.n	8007a64 <__swsetup_r+0x3c>
 8007a44:	686c      	ldr	r4, [r5, #4]
 8007a46:	89a3      	ldrh	r3, [r4, #12]
 8007a48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a4c:	0719      	lsls	r1, r3, #28
 8007a4e:	d42c      	bmi.n	8007aaa <__swsetup_r+0x82>
 8007a50:	06dd      	lsls	r5, r3, #27
 8007a52:	d411      	bmi.n	8007a78 <__swsetup_r+0x50>
 8007a54:	2309      	movs	r3, #9
 8007a56:	6033      	str	r3, [r6, #0]
 8007a58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a5c:	81a3      	strh	r3, [r4, #12]
 8007a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a62:	e03e      	b.n	8007ae2 <__swsetup_r+0xba>
 8007a64:	4b25      	ldr	r3, [pc, #148]	; (8007afc <__swsetup_r+0xd4>)
 8007a66:	429c      	cmp	r4, r3
 8007a68:	d101      	bne.n	8007a6e <__swsetup_r+0x46>
 8007a6a:	68ac      	ldr	r4, [r5, #8]
 8007a6c:	e7eb      	b.n	8007a46 <__swsetup_r+0x1e>
 8007a6e:	4b24      	ldr	r3, [pc, #144]	; (8007b00 <__swsetup_r+0xd8>)
 8007a70:	429c      	cmp	r4, r3
 8007a72:	bf08      	it	eq
 8007a74:	68ec      	ldreq	r4, [r5, #12]
 8007a76:	e7e6      	b.n	8007a46 <__swsetup_r+0x1e>
 8007a78:	0758      	lsls	r0, r3, #29
 8007a7a:	d512      	bpl.n	8007aa2 <__swsetup_r+0x7a>
 8007a7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a7e:	b141      	cbz	r1, 8007a92 <__swsetup_r+0x6a>
 8007a80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a84:	4299      	cmp	r1, r3
 8007a86:	d002      	beq.n	8007a8e <__swsetup_r+0x66>
 8007a88:	4630      	mov	r0, r6
 8007a8a:	f7ff fb31 	bl	80070f0 <_free_r>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	6363      	str	r3, [r4, #52]	; 0x34
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a98:	81a3      	strh	r3, [r4, #12]
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	6063      	str	r3, [r4, #4]
 8007a9e:	6923      	ldr	r3, [r4, #16]
 8007aa0:	6023      	str	r3, [r4, #0]
 8007aa2:	89a3      	ldrh	r3, [r4, #12]
 8007aa4:	f043 0308 	orr.w	r3, r3, #8
 8007aa8:	81a3      	strh	r3, [r4, #12]
 8007aaa:	6923      	ldr	r3, [r4, #16]
 8007aac:	b94b      	cbnz	r3, 8007ac2 <__swsetup_r+0x9a>
 8007aae:	89a3      	ldrh	r3, [r4, #12]
 8007ab0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ab8:	d003      	beq.n	8007ac2 <__swsetup_r+0x9a>
 8007aba:	4621      	mov	r1, r4
 8007abc:	4630      	mov	r0, r6
 8007abe:	f000 fa09 	bl	8007ed4 <__smakebuf_r>
 8007ac2:	89a0      	ldrh	r0, [r4, #12]
 8007ac4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ac8:	f010 0301 	ands.w	r3, r0, #1
 8007acc:	d00a      	beq.n	8007ae4 <__swsetup_r+0xbc>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	60a3      	str	r3, [r4, #8]
 8007ad2:	6963      	ldr	r3, [r4, #20]
 8007ad4:	425b      	negs	r3, r3
 8007ad6:	61a3      	str	r3, [r4, #24]
 8007ad8:	6923      	ldr	r3, [r4, #16]
 8007ada:	b943      	cbnz	r3, 8007aee <__swsetup_r+0xc6>
 8007adc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ae0:	d1ba      	bne.n	8007a58 <__swsetup_r+0x30>
 8007ae2:	bd70      	pop	{r4, r5, r6, pc}
 8007ae4:	0781      	lsls	r1, r0, #30
 8007ae6:	bf58      	it	pl
 8007ae8:	6963      	ldrpl	r3, [r4, #20]
 8007aea:	60a3      	str	r3, [r4, #8]
 8007aec:	e7f4      	b.n	8007ad8 <__swsetup_r+0xb0>
 8007aee:	2000      	movs	r0, #0
 8007af0:	e7f7      	b.n	8007ae2 <__swsetup_r+0xba>
 8007af2:	bf00      	nop
 8007af4:	20000010 	.word	0x20000010
 8007af8:	08008624 	.word	0x08008624
 8007afc:	08008644 	.word	0x08008644
 8007b00:	08008604 	.word	0x08008604

08007b04 <abort>:
 8007b04:	b508      	push	{r3, lr}
 8007b06:	2006      	movs	r0, #6
 8007b08:	f000 fa54 	bl	8007fb4 <raise>
 8007b0c:	2001      	movs	r0, #1
 8007b0e:	f7f9 fdd8 	bl	80016c2 <_exit>
	...

08007b14 <__sflush_r>:
 8007b14:	898a      	ldrh	r2, [r1, #12]
 8007b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b1a:	4605      	mov	r5, r0
 8007b1c:	0710      	lsls	r0, r2, #28
 8007b1e:	460c      	mov	r4, r1
 8007b20:	d458      	bmi.n	8007bd4 <__sflush_r+0xc0>
 8007b22:	684b      	ldr	r3, [r1, #4]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	dc05      	bgt.n	8007b34 <__sflush_r+0x20>
 8007b28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	dc02      	bgt.n	8007b34 <__sflush_r+0x20>
 8007b2e:	2000      	movs	r0, #0
 8007b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b36:	2e00      	cmp	r6, #0
 8007b38:	d0f9      	beq.n	8007b2e <__sflush_r+0x1a>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b40:	682f      	ldr	r7, [r5, #0]
 8007b42:	602b      	str	r3, [r5, #0]
 8007b44:	d032      	beq.n	8007bac <__sflush_r+0x98>
 8007b46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b48:	89a3      	ldrh	r3, [r4, #12]
 8007b4a:	075a      	lsls	r2, r3, #29
 8007b4c:	d505      	bpl.n	8007b5a <__sflush_r+0x46>
 8007b4e:	6863      	ldr	r3, [r4, #4]
 8007b50:	1ac0      	subs	r0, r0, r3
 8007b52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b54:	b10b      	cbz	r3, 8007b5a <__sflush_r+0x46>
 8007b56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b58:	1ac0      	subs	r0, r0, r3
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b60:	6a21      	ldr	r1, [r4, #32]
 8007b62:	4628      	mov	r0, r5
 8007b64:	47b0      	blx	r6
 8007b66:	1c43      	adds	r3, r0, #1
 8007b68:	89a3      	ldrh	r3, [r4, #12]
 8007b6a:	d106      	bne.n	8007b7a <__sflush_r+0x66>
 8007b6c:	6829      	ldr	r1, [r5, #0]
 8007b6e:	291d      	cmp	r1, #29
 8007b70:	d82c      	bhi.n	8007bcc <__sflush_r+0xb8>
 8007b72:	4a2a      	ldr	r2, [pc, #168]	; (8007c1c <__sflush_r+0x108>)
 8007b74:	40ca      	lsrs	r2, r1
 8007b76:	07d6      	lsls	r6, r2, #31
 8007b78:	d528      	bpl.n	8007bcc <__sflush_r+0xb8>
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	6062      	str	r2, [r4, #4]
 8007b7e:	04d9      	lsls	r1, r3, #19
 8007b80:	6922      	ldr	r2, [r4, #16]
 8007b82:	6022      	str	r2, [r4, #0]
 8007b84:	d504      	bpl.n	8007b90 <__sflush_r+0x7c>
 8007b86:	1c42      	adds	r2, r0, #1
 8007b88:	d101      	bne.n	8007b8e <__sflush_r+0x7a>
 8007b8a:	682b      	ldr	r3, [r5, #0]
 8007b8c:	b903      	cbnz	r3, 8007b90 <__sflush_r+0x7c>
 8007b8e:	6560      	str	r0, [r4, #84]	; 0x54
 8007b90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b92:	602f      	str	r7, [r5, #0]
 8007b94:	2900      	cmp	r1, #0
 8007b96:	d0ca      	beq.n	8007b2e <__sflush_r+0x1a>
 8007b98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b9c:	4299      	cmp	r1, r3
 8007b9e:	d002      	beq.n	8007ba6 <__sflush_r+0x92>
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	f7ff faa5 	bl	80070f0 <_free_r>
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	6360      	str	r0, [r4, #52]	; 0x34
 8007baa:	e7c1      	b.n	8007b30 <__sflush_r+0x1c>
 8007bac:	6a21      	ldr	r1, [r4, #32]
 8007bae:	2301      	movs	r3, #1
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	47b0      	blx	r6
 8007bb4:	1c41      	adds	r1, r0, #1
 8007bb6:	d1c7      	bne.n	8007b48 <__sflush_r+0x34>
 8007bb8:	682b      	ldr	r3, [r5, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d0c4      	beq.n	8007b48 <__sflush_r+0x34>
 8007bbe:	2b1d      	cmp	r3, #29
 8007bc0:	d001      	beq.n	8007bc6 <__sflush_r+0xb2>
 8007bc2:	2b16      	cmp	r3, #22
 8007bc4:	d101      	bne.n	8007bca <__sflush_r+0xb6>
 8007bc6:	602f      	str	r7, [r5, #0]
 8007bc8:	e7b1      	b.n	8007b2e <__sflush_r+0x1a>
 8007bca:	89a3      	ldrh	r3, [r4, #12]
 8007bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bd0:	81a3      	strh	r3, [r4, #12]
 8007bd2:	e7ad      	b.n	8007b30 <__sflush_r+0x1c>
 8007bd4:	690f      	ldr	r7, [r1, #16]
 8007bd6:	2f00      	cmp	r7, #0
 8007bd8:	d0a9      	beq.n	8007b2e <__sflush_r+0x1a>
 8007bda:	0793      	lsls	r3, r2, #30
 8007bdc:	680e      	ldr	r6, [r1, #0]
 8007bde:	bf08      	it	eq
 8007be0:	694b      	ldreq	r3, [r1, #20]
 8007be2:	600f      	str	r7, [r1, #0]
 8007be4:	bf18      	it	ne
 8007be6:	2300      	movne	r3, #0
 8007be8:	eba6 0807 	sub.w	r8, r6, r7
 8007bec:	608b      	str	r3, [r1, #8]
 8007bee:	f1b8 0f00 	cmp.w	r8, #0
 8007bf2:	dd9c      	ble.n	8007b2e <__sflush_r+0x1a>
 8007bf4:	6a21      	ldr	r1, [r4, #32]
 8007bf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007bf8:	4643      	mov	r3, r8
 8007bfa:	463a      	mov	r2, r7
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	47b0      	blx	r6
 8007c00:	2800      	cmp	r0, #0
 8007c02:	dc06      	bgt.n	8007c12 <__sflush_r+0xfe>
 8007c04:	89a3      	ldrh	r3, [r4, #12]
 8007c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c0a:	81a3      	strh	r3, [r4, #12]
 8007c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c10:	e78e      	b.n	8007b30 <__sflush_r+0x1c>
 8007c12:	4407      	add	r7, r0
 8007c14:	eba8 0800 	sub.w	r8, r8, r0
 8007c18:	e7e9      	b.n	8007bee <__sflush_r+0xda>
 8007c1a:	bf00      	nop
 8007c1c:	20400001 	.word	0x20400001

08007c20 <_fflush_r>:
 8007c20:	b538      	push	{r3, r4, r5, lr}
 8007c22:	690b      	ldr	r3, [r1, #16]
 8007c24:	4605      	mov	r5, r0
 8007c26:	460c      	mov	r4, r1
 8007c28:	b913      	cbnz	r3, 8007c30 <_fflush_r+0x10>
 8007c2a:	2500      	movs	r5, #0
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	bd38      	pop	{r3, r4, r5, pc}
 8007c30:	b118      	cbz	r0, 8007c3a <_fflush_r+0x1a>
 8007c32:	6983      	ldr	r3, [r0, #24]
 8007c34:	b90b      	cbnz	r3, 8007c3a <_fflush_r+0x1a>
 8007c36:	f000 f887 	bl	8007d48 <__sinit>
 8007c3a:	4b14      	ldr	r3, [pc, #80]	; (8007c8c <_fflush_r+0x6c>)
 8007c3c:	429c      	cmp	r4, r3
 8007c3e:	d11b      	bne.n	8007c78 <_fflush_r+0x58>
 8007c40:	686c      	ldr	r4, [r5, #4]
 8007c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d0ef      	beq.n	8007c2a <_fflush_r+0xa>
 8007c4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c4c:	07d0      	lsls	r0, r2, #31
 8007c4e:	d404      	bmi.n	8007c5a <_fflush_r+0x3a>
 8007c50:	0599      	lsls	r1, r3, #22
 8007c52:	d402      	bmi.n	8007c5a <_fflush_r+0x3a>
 8007c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c56:	f000 f915 	bl	8007e84 <__retarget_lock_acquire_recursive>
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	f7ff ff59 	bl	8007b14 <__sflush_r>
 8007c62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c64:	07da      	lsls	r2, r3, #31
 8007c66:	4605      	mov	r5, r0
 8007c68:	d4e0      	bmi.n	8007c2c <_fflush_r+0xc>
 8007c6a:	89a3      	ldrh	r3, [r4, #12]
 8007c6c:	059b      	lsls	r3, r3, #22
 8007c6e:	d4dd      	bmi.n	8007c2c <_fflush_r+0xc>
 8007c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c72:	f000 f908 	bl	8007e86 <__retarget_lock_release_recursive>
 8007c76:	e7d9      	b.n	8007c2c <_fflush_r+0xc>
 8007c78:	4b05      	ldr	r3, [pc, #20]	; (8007c90 <_fflush_r+0x70>)
 8007c7a:	429c      	cmp	r4, r3
 8007c7c:	d101      	bne.n	8007c82 <_fflush_r+0x62>
 8007c7e:	68ac      	ldr	r4, [r5, #8]
 8007c80:	e7df      	b.n	8007c42 <_fflush_r+0x22>
 8007c82:	4b04      	ldr	r3, [pc, #16]	; (8007c94 <_fflush_r+0x74>)
 8007c84:	429c      	cmp	r4, r3
 8007c86:	bf08      	it	eq
 8007c88:	68ec      	ldreq	r4, [r5, #12]
 8007c8a:	e7da      	b.n	8007c42 <_fflush_r+0x22>
 8007c8c:	08008624 	.word	0x08008624
 8007c90:	08008644 	.word	0x08008644
 8007c94:	08008604 	.word	0x08008604

08007c98 <std>:
 8007c98:	2300      	movs	r3, #0
 8007c9a:	b510      	push	{r4, lr}
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	e9c0 3300 	strd	r3, r3, [r0]
 8007ca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ca6:	6083      	str	r3, [r0, #8]
 8007ca8:	8181      	strh	r1, [r0, #12]
 8007caa:	6643      	str	r3, [r0, #100]	; 0x64
 8007cac:	81c2      	strh	r2, [r0, #14]
 8007cae:	6183      	str	r3, [r0, #24]
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	2208      	movs	r2, #8
 8007cb4:	305c      	adds	r0, #92	; 0x5c
 8007cb6:	f7fd fb69 	bl	800538c <memset>
 8007cba:	4b05      	ldr	r3, [pc, #20]	; (8007cd0 <std+0x38>)
 8007cbc:	6263      	str	r3, [r4, #36]	; 0x24
 8007cbe:	4b05      	ldr	r3, [pc, #20]	; (8007cd4 <std+0x3c>)
 8007cc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cc2:	4b05      	ldr	r3, [pc, #20]	; (8007cd8 <std+0x40>)
 8007cc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cc6:	4b05      	ldr	r3, [pc, #20]	; (8007cdc <std+0x44>)
 8007cc8:	6224      	str	r4, [r4, #32]
 8007cca:	6323      	str	r3, [r4, #48]	; 0x30
 8007ccc:	bd10      	pop	{r4, pc}
 8007cce:	bf00      	nop
 8007cd0:	08007fed 	.word	0x08007fed
 8007cd4:	0800800f 	.word	0x0800800f
 8007cd8:	08008047 	.word	0x08008047
 8007cdc:	0800806b 	.word	0x0800806b

08007ce0 <_cleanup_r>:
 8007ce0:	4901      	ldr	r1, [pc, #4]	; (8007ce8 <_cleanup_r+0x8>)
 8007ce2:	f000 b8af 	b.w	8007e44 <_fwalk_reent>
 8007ce6:	bf00      	nop
 8007ce8:	08007c21 	.word	0x08007c21

08007cec <__sfmoreglue>:
 8007cec:	b570      	push	{r4, r5, r6, lr}
 8007cee:	2268      	movs	r2, #104	; 0x68
 8007cf0:	1e4d      	subs	r5, r1, #1
 8007cf2:	4355      	muls	r5, r2
 8007cf4:	460e      	mov	r6, r1
 8007cf6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cfa:	f7ff fa65 	bl	80071c8 <_malloc_r>
 8007cfe:	4604      	mov	r4, r0
 8007d00:	b140      	cbz	r0, 8007d14 <__sfmoreglue+0x28>
 8007d02:	2100      	movs	r1, #0
 8007d04:	e9c0 1600 	strd	r1, r6, [r0]
 8007d08:	300c      	adds	r0, #12
 8007d0a:	60a0      	str	r0, [r4, #8]
 8007d0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d10:	f7fd fb3c 	bl	800538c <memset>
 8007d14:	4620      	mov	r0, r4
 8007d16:	bd70      	pop	{r4, r5, r6, pc}

08007d18 <__sfp_lock_acquire>:
 8007d18:	4801      	ldr	r0, [pc, #4]	; (8007d20 <__sfp_lock_acquire+0x8>)
 8007d1a:	f000 b8b3 	b.w	8007e84 <__retarget_lock_acquire_recursive>
 8007d1e:	bf00      	nop
 8007d20:	20004b75 	.word	0x20004b75

08007d24 <__sfp_lock_release>:
 8007d24:	4801      	ldr	r0, [pc, #4]	; (8007d2c <__sfp_lock_release+0x8>)
 8007d26:	f000 b8ae 	b.w	8007e86 <__retarget_lock_release_recursive>
 8007d2a:	bf00      	nop
 8007d2c:	20004b75 	.word	0x20004b75

08007d30 <__sinit_lock_acquire>:
 8007d30:	4801      	ldr	r0, [pc, #4]	; (8007d38 <__sinit_lock_acquire+0x8>)
 8007d32:	f000 b8a7 	b.w	8007e84 <__retarget_lock_acquire_recursive>
 8007d36:	bf00      	nop
 8007d38:	20004b76 	.word	0x20004b76

08007d3c <__sinit_lock_release>:
 8007d3c:	4801      	ldr	r0, [pc, #4]	; (8007d44 <__sinit_lock_release+0x8>)
 8007d3e:	f000 b8a2 	b.w	8007e86 <__retarget_lock_release_recursive>
 8007d42:	bf00      	nop
 8007d44:	20004b76 	.word	0x20004b76

08007d48 <__sinit>:
 8007d48:	b510      	push	{r4, lr}
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	f7ff fff0 	bl	8007d30 <__sinit_lock_acquire>
 8007d50:	69a3      	ldr	r3, [r4, #24]
 8007d52:	b11b      	cbz	r3, 8007d5c <__sinit+0x14>
 8007d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d58:	f7ff bff0 	b.w	8007d3c <__sinit_lock_release>
 8007d5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d60:	6523      	str	r3, [r4, #80]	; 0x50
 8007d62:	4b13      	ldr	r3, [pc, #76]	; (8007db0 <__sinit+0x68>)
 8007d64:	4a13      	ldr	r2, [pc, #76]	; (8007db4 <__sinit+0x6c>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d6a:	42a3      	cmp	r3, r4
 8007d6c:	bf04      	itt	eq
 8007d6e:	2301      	moveq	r3, #1
 8007d70:	61a3      	streq	r3, [r4, #24]
 8007d72:	4620      	mov	r0, r4
 8007d74:	f000 f820 	bl	8007db8 <__sfp>
 8007d78:	6060      	str	r0, [r4, #4]
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	f000 f81c 	bl	8007db8 <__sfp>
 8007d80:	60a0      	str	r0, [r4, #8]
 8007d82:	4620      	mov	r0, r4
 8007d84:	f000 f818 	bl	8007db8 <__sfp>
 8007d88:	2200      	movs	r2, #0
 8007d8a:	60e0      	str	r0, [r4, #12]
 8007d8c:	2104      	movs	r1, #4
 8007d8e:	6860      	ldr	r0, [r4, #4]
 8007d90:	f7ff ff82 	bl	8007c98 <std>
 8007d94:	68a0      	ldr	r0, [r4, #8]
 8007d96:	2201      	movs	r2, #1
 8007d98:	2109      	movs	r1, #9
 8007d9a:	f7ff ff7d 	bl	8007c98 <std>
 8007d9e:	68e0      	ldr	r0, [r4, #12]
 8007da0:	2202      	movs	r2, #2
 8007da2:	2112      	movs	r1, #18
 8007da4:	f7ff ff78 	bl	8007c98 <std>
 8007da8:	2301      	movs	r3, #1
 8007daa:	61a3      	str	r3, [r4, #24]
 8007dac:	e7d2      	b.n	8007d54 <__sinit+0xc>
 8007dae:	bf00      	nop
 8007db0:	0800828c 	.word	0x0800828c
 8007db4:	08007ce1 	.word	0x08007ce1

08007db8 <__sfp>:
 8007db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dba:	4607      	mov	r7, r0
 8007dbc:	f7ff ffac 	bl	8007d18 <__sfp_lock_acquire>
 8007dc0:	4b1e      	ldr	r3, [pc, #120]	; (8007e3c <__sfp+0x84>)
 8007dc2:	681e      	ldr	r6, [r3, #0]
 8007dc4:	69b3      	ldr	r3, [r6, #24]
 8007dc6:	b913      	cbnz	r3, 8007dce <__sfp+0x16>
 8007dc8:	4630      	mov	r0, r6
 8007dca:	f7ff ffbd 	bl	8007d48 <__sinit>
 8007dce:	3648      	adds	r6, #72	; 0x48
 8007dd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	d503      	bpl.n	8007de0 <__sfp+0x28>
 8007dd8:	6833      	ldr	r3, [r6, #0]
 8007dda:	b30b      	cbz	r3, 8007e20 <__sfp+0x68>
 8007ddc:	6836      	ldr	r6, [r6, #0]
 8007dde:	e7f7      	b.n	8007dd0 <__sfp+0x18>
 8007de0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007de4:	b9d5      	cbnz	r5, 8007e1c <__sfp+0x64>
 8007de6:	4b16      	ldr	r3, [pc, #88]	; (8007e40 <__sfp+0x88>)
 8007de8:	60e3      	str	r3, [r4, #12]
 8007dea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007dee:	6665      	str	r5, [r4, #100]	; 0x64
 8007df0:	f000 f847 	bl	8007e82 <__retarget_lock_init_recursive>
 8007df4:	f7ff ff96 	bl	8007d24 <__sfp_lock_release>
 8007df8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007dfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e00:	6025      	str	r5, [r4, #0]
 8007e02:	61a5      	str	r5, [r4, #24]
 8007e04:	2208      	movs	r2, #8
 8007e06:	4629      	mov	r1, r5
 8007e08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e0c:	f7fd fabe 	bl	800538c <memset>
 8007e10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e18:	4620      	mov	r0, r4
 8007e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e1c:	3468      	adds	r4, #104	; 0x68
 8007e1e:	e7d9      	b.n	8007dd4 <__sfp+0x1c>
 8007e20:	2104      	movs	r1, #4
 8007e22:	4638      	mov	r0, r7
 8007e24:	f7ff ff62 	bl	8007cec <__sfmoreglue>
 8007e28:	4604      	mov	r4, r0
 8007e2a:	6030      	str	r0, [r6, #0]
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	d1d5      	bne.n	8007ddc <__sfp+0x24>
 8007e30:	f7ff ff78 	bl	8007d24 <__sfp_lock_release>
 8007e34:	230c      	movs	r3, #12
 8007e36:	603b      	str	r3, [r7, #0]
 8007e38:	e7ee      	b.n	8007e18 <__sfp+0x60>
 8007e3a:	bf00      	nop
 8007e3c:	0800828c 	.word	0x0800828c
 8007e40:	ffff0001 	.word	0xffff0001

08007e44 <_fwalk_reent>:
 8007e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e48:	4606      	mov	r6, r0
 8007e4a:	4688      	mov	r8, r1
 8007e4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e50:	2700      	movs	r7, #0
 8007e52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e56:	f1b9 0901 	subs.w	r9, r9, #1
 8007e5a:	d505      	bpl.n	8007e68 <_fwalk_reent+0x24>
 8007e5c:	6824      	ldr	r4, [r4, #0]
 8007e5e:	2c00      	cmp	r4, #0
 8007e60:	d1f7      	bne.n	8007e52 <_fwalk_reent+0xe>
 8007e62:	4638      	mov	r0, r7
 8007e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e68:	89ab      	ldrh	r3, [r5, #12]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d907      	bls.n	8007e7e <_fwalk_reent+0x3a>
 8007e6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e72:	3301      	adds	r3, #1
 8007e74:	d003      	beq.n	8007e7e <_fwalk_reent+0x3a>
 8007e76:	4629      	mov	r1, r5
 8007e78:	4630      	mov	r0, r6
 8007e7a:	47c0      	blx	r8
 8007e7c:	4307      	orrs	r7, r0
 8007e7e:	3568      	adds	r5, #104	; 0x68
 8007e80:	e7e9      	b.n	8007e56 <_fwalk_reent+0x12>

08007e82 <__retarget_lock_init_recursive>:
 8007e82:	4770      	bx	lr

08007e84 <__retarget_lock_acquire_recursive>:
 8007e84:	4770      	bx	lr

08007e86 <__retarget_lock_release_recursive>:
 8007e86:	4770      	bx	lr

08007e88 <__swhatbuf_r>:
 8007e88:	b570      	push	{r4, r5, r6, lr}
 8007e8a:	460e      	mov	r6, r1
 8007e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e90:	2900      	cmp	r1, #0
 8007e92:	b096      	sub	sp, #88	; 0x58
 8007e94:	4614      	mov	r4, r2
 8007e96:	461d      	mov	r5, r3
 8007e98:	da08      	bge.n	8007eac <__swhatbuf_r+0x24>
 8007e9a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	602a      	str	r2, [r5, #0]
 8007ea2:	061a      	lsls	r2, r3, #24
 8007ea4:	d410      	bmi.n	8007ec8 <__swhatbuf_r+0x40>
 8007ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007eaa:	e00e      	b.n	8007eca <__swhatbuf_r+0x42>
 8007eac:	466a      	mov	r2, sp
 8007eae:	f000 f903 	bl	80080b8 <_fstat_r>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	dbf1      	blt.n	8007e9a <__swhatbuf_r+0x12>
 8007eb6:	9a01      	ldr	r2, [sp, #4]
 8007eb8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ebc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ec0:	425a      	negs	r2, r3
 8007ec2:	415a      	adcs	r2, r3
 8007ec4:	602a      	str	r2, [r5, #0]
 8007ec6:	e7ee      	b.n	8007ea6 <__swhatbuf_r+0x1e>
 8007ec8:	2340      	movs	r3, #64	; 0x40
 8007eca:	2000      	movs	r0, #0
 8007ecc:	6023      	str	r3, [r4, #0]
 8007ece:	b016      	add	sp, #88	; 0x58
 8007ed0:	bd70      	pop	{r4, r5, r6, pc}
	...

08007ed4 <__smakebuf_r>:
 8007ed4:	898b      	ldrh	r3, [r1, #12]
 8007ed6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ed8:	079d      	lsls	r5, r3, #30
 8007eda:	4606      	mov	r6, r0
 8007edc:	460c      	mov	r4, r1
 8007ede:	d507      	bpl.n	8007ef0 <__smakebuf_r+0x1c>
 8007ee0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ee4:	6023      	str	r3, [r4, #0]
 8007ee6:	6123      	str	r3, [r4, #16]
 8007ee8:	2301      	movs	r3, #1
 8007eea:	6163      	str	r3, [r4, #20]
 8007eec:	b002      	add	sp, #8
 8007eee:	bd70      	pop	{r4, r5, r6, pc}
 8007ef0:	ab01      	add	r3, sp, #4
 8007ef2:	466a      	mov	r2, sp
 8007ef4:	f7ff ffc8 	bl	8007e88 <__swhatbuf_r>
 8007ef8:	9900      	ldr	r1, [sp, #0]
 8007efa:	4605      	mov	r5, r0
 8007efc:	4630      	mov	r0, r6
 8007efe:	f7ff f963 	bl	80071c8 <_malloc_r>
 8007f02:	b948      	cbnz	r0, 8007f18 <__smakebuf_r+0x44>
 8007f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f08:	059a      	lsls	r2, r3, #22
 8007f0a:	d4ef      	bmi.n	8007eec <__smakebuf_r+0x18>
 8007f0c:	f023 0303 	bic.w	r3, r3, #3
 8007f10:	f043 0302 	orr.w	r3, r3, #2
 8007f14:	81a3      	strh	r3, [r4, #12]
 8007f16:	e7e3      	b.n	8007ee0 <__smakebuf_r+0xc>
 8007f18:	4b0d      	ldr	r3, [pc, #52]	; (8007f50 <__smakebuf_r+0x7c>)
 8007f1a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f1c:	89a3      	ldrh	r3, [r4, #12]
 8007f1e:	6020      	str	r0, [r4, #0]
 8007f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f24:	81a3      	strh	r3, [r4, #12]
 8007f26:	9b00      	ldr	r3, [sp, #0]
 8007f28:	6163      	str	r3, [r4, #20]
 8007f2a:	9b01      	ldr	r3, [sp, #4]
 8007f2c:	6120      	str	r0, [r4, #16]
 8007f2e:	b15b      	cbz	r3, 8007f48 <__smakebuf_r+0x74>
 8007f30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f34:	4630      	mov	r0, r6
 8007f36:	f000 f8d1 	bl	80080dc <_isatty_r>
 8007f3a:	b128      	cbz	r0, 8007f48 <__smakebuf_r+0x74>
 8007f3c:	89a3      	ldrh	r3, [r4, #12]
 8007f3e:	f023 0303 	bic.w	r3, r3, #3
 8007f42:	f043 0301 	orr.w	r3, r3, #1
 8007f46:	81a3      	strh	r3, [r4, #12]
 8007f48:	89a0      	ldrh	r0, [r4, #12]
 8007f4a:	4305      	orrs	r5, r0
 8007f4c:	81a5      	strh	r5, [r4, #12]
 8007f4e:	e7cd      	b.n	8007eec <__smakebuf_r+0x18>
 8007f50:	08007ce1 	.word	0x08007ce1

08007f54 <_malloc_usable_size_r>:
 8007f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f58:	1f18      	subs	r0, r3, #4
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	bfbc      	itt	lt
 8007f5e:	580b      	ldrlt	r3, [r1, r0]
 8007f60:	18c0      	addlt	r0, r0, r3
 8007f62:	4770      	bx	lr

08007f64 <_raise_r>:
 8007f64:	291f      	cmp	r1, #31
 8007f66:	b538      	push	{r3, r4, r5, lr}
 8007f68:	4604      	mov	r4, r0
 8007f6a:	460d      	mov	r5, r1
 8007f6c:	d904      	bls.n	8007f78 <_raise_r+0x14>
 8007f6e:	2316      	movs	r3, #22
 8007f70:	6003      	str	r3, [r0, #0]
 8007f72:	f04f 30ff 	mov.w	r0, #4294967295
 8007f76:	bd38      	pop	{r3, r4, r5, pc}
 8007f78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007f7a:	b112      	cbz	r2, 8007f82 <_raise_r+0x1e>
 8007f7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f80:	b94b      	cbnz	r3, 8007f96 <_raise_r+0x32>
 8007f82:	4620      	mov	r0, r4
 8007f84:	f000 f830 	bl	8007fe8 <_getpid_r>
 8007f88:	462a      	mov	r2, r5
 8007f8a:	4601      	mov	r1, r0
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f92:	f000 b817 	b.w	8007fc4 <_kill_r>
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d00a      	beq.n	8007fb0 <_raise_r+0x4c>
 8007f9a:	1c59      	adds	r1, r3, #1
 8007f9c:	d103      	bne.n	8007fa6 <_raise_r+0x42>
 8007f9e:	2316      	movs	r3, #22
 8007fa0:	6003      	str	r3, [r0, #0]
 8007fa2:	2001      	movs	r0, #1
 8007fa4:	e7e7      	b.n	8007f76 <_raise_r+0x12>
 8007fa6:	2400      	movs	r4, #0
 8007fa8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007fac:	4628      	mov	r0, r5
 8007fae:	4798      	blx	r3
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	e7e0      	b.n	8007f76 <_raise_r+0x12>

08007fb4 <raise>:
 8007fb4:	4b02      	ldr	r3, [pc, #8]	; (8007fc0 <raise+0xc>)
 8007fb6:	4601      	mov	r1, r0
 8007fb8:	6818      	ldr	r0, [r3, #0]
 8007fba:	f7ff bfd3 	b.w	8007f64 <_raise_r>
 8007fbe:	bf00      	nop
 8007fc0:	20000010 	.word	0x20000010

08007fc4 <_kill_r>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	4d07      	ldr	r5, [pc, #28]	; (8007fe4 <_kill_r+0x20>)
 8007fc8:	2300      	movs	r3, #0
 8007fca:	4604      	mov	r4, r0
 8007fcc:	4608      	mov	r0, r1
 8007fce:	4611      	mov	r1, r2
 8007fd0:	602b      	str	r3, [r5, #0]
 8007fd2:	f7f9 fb66 	bl	80016a2 <_kill>
 8007fd6:	1c43      	adds	r3, r0, #1
 8007fd8:	d102      	bne.n	8007fe0 <_kill_r+0x1c>
 8007fda:	682b      	ldr	r3, [r5, #0]
 8007fdc:	b103      	cbz	r3, 8007fe0 <_kill_r+0x1c>
 8007fde:	6023      	str	r3, [r4, #0]
 8007fe0:	bd38      	pop	{r3, r4, r5, pc}
 8007fe2:	bf00      	nop
 8007fe4:	20004b70 	.word	0x20004b70

08007fe8 <_getpid_r>:
 8007fe8:	f7f9 bb53 	b.w	8001692 <_getpid>

08007fec <__sread>:
 8007fec:	b510      	push	{r4, lr}
 8007fee:	460c      	mov	r4, r1
 8007ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ff4:	f000 f894 	bl	8008120 <_read_r>
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	bfab      	itete	ge
 8007ffc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ffe:	89a3      	ldrhlt	r3, [r4, #12]
 8008000:	181b      	addge	r3, r3, r0
 8008002:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008006:	bfac      	ite	ge
 8008008:	6563      	strge	r3, [r4, #84]	; 0x54
 800800a:	81a3      	strhlt	r3, [r4, #12]
 800800c:	bd10      	pop	{r4, pc}

0800800e <__swrite>:
 800800e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008012:	461f      	mov	r7, r3
 8008014:	898b      	ldrh	r3, [r1, #12]
 8008016:	05db      	lsls	r3, r3, #23
 8008018:	4605      	mov	r5, r0
 800801a:	460c      	mov	r4, r1
 800801c:	4616      	mov	r6, r2
 800801e:	d505      	bpl.n	800802c <__swrite+0x1e>
 8008020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008024:	2302      	movs	r3, #2
 8008026:	2200      	movs	r2, #0
 8008028:	f000 f868 	bl	80080fc <_lseek_r>
 800802c:	89a3      	ldrh	r3, [r4, #12]
 800802e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008032:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008036:	81a3      	strh	r3, [r4, #12]
 8008038:	4632      	mov	r2, r6
 800803a:	463b      	mov	r3, r7
 800803c:	4628      	mov	r0, r5
 800803e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008042:	f000 b817 	b.w	8008074 <_write_r>

08008046 <__sseek>:
 8008046:	b510      	push	{r4, lr}
 8008048:	460c      	mov	r4, r1
 800804a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800804e:	f000 f855 	bl	80080fc <_lseek_r>
 8008052:	1c43      	adds	r3, r0, #1
 8008054:	89a3      	ldrh	r3, [r4, #12]
 8008056:	bf15      	itete	ne
 8008058:	6560      	strne	r0, [r4, #84]	; 0x54
 800805a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800805e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008062:	81a3      	strheq	r3, [r4, #12]
 8008064:	bf18      	it	ne
 8008066:	81a3      	strhne	r3, [r4, #12]
 8008068:	bd10      	pop	{r4, pc}

0800806a <__sclose>:
 800806a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800806e:	f000 b813 	b.w	8008098 <_close_r>
	...

08008074 <_write_r>:
 8008074:	b538      	push	{r3, r4, r5, lr}
 8008076:	4d07      	ldr	r5, [pc, #28]	; (8008094 <_write_r+0x20>)
 8008078:	4604      	mov	r4, r0
 800807a:	4608      	mov	r0, r1
 800807c:	4611      	mov	r1, r2
 800807e:	2200      	movs	r2, #0
 8008080:	602a      	str	r2, [r5, #0]
 8008082:	461a      	mov	r2, r3
 8008084:	f7f9 fb44 	bl	8001710 <_write>
 8008088:	1c43      	adds	r3, r0, #1
 800808a:	d102      	bne.n	8008092 <_write_r+0x1e>
 800808c:	682b      	ldr	r3, [r5, #0]
 800808e:	b103      	cbz	r3, 8008092 <_write_r+0x1e>
 8008090:	6023      	str	r3, [r4, #0]
 8008092:	bd38      	pop	{r3, r4, r5, pc}
 8008094:	20004b70 	.word	0x20004b70

08008098 <_close_r>:
 8008098:	b538      	push	{r3, r4, r5, lr}
 800809a:	4d06      	ldr	r5, [pc, #24]	; (80080b4 <_close_r+0x1c>)
 800809c:	2300      	movs	r3, #0
 800809e:	4604      	mov	r4, r0
 80080a0:	4608      	mov	r0, r1
 80080a2:	602b      	str	r3, [r5, #0]
 80080a4:	f7f9 fb50 	bl	8001748 <_close>
 80080a8:	1c43      	adds	r3, r0, #1
 80080aa:	d102      	bne.n	80080b2 <_close_r+0x1a>
 80080ac:	682b      	ldr	r3, [r5, #0]
 80080ae:	b103      	cbz	r3, 80080b2 <_close_r+0x1a>
 80080b0:	6023      	str	r3, [r4, #0]
 80080b2:	bd38      	pop	{r3, r4, r5, pc}
 80080b4:	20004b70 	.word	0x20004b70

080080b8 <_fstat_r>:
 80080b8:	b538      	push	{r3, r4, r5, lr}
 80080ba:	4d07      	ldr	r5, [pc, #28]	; (80080d8 <_fstat_r+0x20>)
 80080bc:	2300      	movs	r3, #0
 80080be:	4604      	mov	r4, r0
 80080c0:	4608      	mov	r0, r1
 80080c2:	4611      	mov	r1, r2
 80080c4:	602b      	str	r3, [r5, #0]
 80080c6:	f7f9 fb4b 	bl	8001760 <_fstat>
 80080ca:	1c43      	adds	r3, r0, #1
 80080cc:	d102      	bne.n	80080d4 <_fstat_r+0x1c>
 80080ce:	682b      	ldr	r3, [r5, #0]
 80080d0:	b103      	cbz	r3, 80080d4 <_fstat_r+0x1c>
 80080d2:	6023      	str	r3, [r4, #0]
 80080d4:	bd38      	pop	{r3, r4, r5, pc}
 80080d6:	bf00      	nop
 80080d8:	20004b70 	.word	0x20004b70

080080dc <_isatty_r>:
 80080dc:	b538      	push	{r3, r4, r5, lr}
 80080de:	4d06      	ldr	r5, [pc, #24]	; (80080f8 <_isatty_r+0x1c>)
 80080e0:	2300      	movs	r3, #0
 80080e2:	4604      	mov	r4, r0
 80080e4:	4608      	mov	r0, r1
 80080e6:	602b      	str	r3, [r5, #0]
 80080e8:	f7f9 fb4a 	bl	8001780 <_isatty>
 80080ec:	1c43      	adds	r3, r0, #1
 80080ee:	d102      	bne.n	80080f6 <_isatty_r+0x1a>
 80080f0:	682b      	ldr	r3, [r5, #0]
 80080f2:	b103      	cbz	r3, 80080f6 <_isatty_r+0x1a>
 80080f4:	6023      	str	r3, [r4, #0]
 80080f6:	bd38      	pop	{r3, r4, r5, pc}
 80080f8:	20004b70 	.word	0x20004b70

080080fc <_lseek_r>:
 80080fc:	b538      	push	{r3, r4, r5, lr}
 80080fe:	4d07      	ldr	r5, [pc, #28]	; (800811c <_lseek_r+0x20>)
 8008100:	4604      	mov	r4, r0
 8008102:	4608      	mov	r0, r1
 8008104:	4611      	mov	r1, r2
 8008106:	2200      	movs	r2, #0
 8008108:	602a      	str	r2, [r5, #0]
 800810a:	461a      	mov	r2, r3
 800810c:	f7f9 fb43 	bl	8001796 <_lseek>
 8008110:	1c43      	adds	r3, r0, #1
 8008112:	d102      	bne.n	800811a <_lseek_r+0x1e>
 8008114:	682b      	ldr	r3, [r5, #0]
 8008116:	b103      	cbz	r3, 800811a <_lseek_r+0x1e>
 8008118:	6023      	str	r3, [r4, #0]
 800811a:	bd38      	pop	{r3, r4, r5, pc}
 800811c:	20004b70 	.word	0x20004b70

08008120 <_read_r>:
 8008120:	b538      	push	{r3, r4, r5, lr}
 8008122:	4d07      	ldr	r5, [pc, #28]	; (8008140 <_read_r+0x20>)
 8008124:	4604      	mov	r4, r0
 8008126:	4608      	mov	r0, r1
 8008128:	4611      	mov	r1, r2
 800812a:	2200      	movs	r2, #0
 800812c:	602a      	str	r2, [r5, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	f7f9 fad1 	bl	80016d6 <_read>
 8008134:	1c43      	adds	r3, r0, #1
 8008136:	d102      	bne.n	800813e <_read_r+0x1e>
 8008138:	682b      	ldr	r3, [r5, #0]
 800813a:	b103      	cbz	r3, 800813e <_read_r+0x1e>
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	bd38      	pop	{r3, r4, r5, pc}
 8008140:	20004b70 	.word	0x20004b70

08008144 <_init>:
 8008144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008146:	bf00      	nop
 8008148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800814a:	bc08      	pop	{r3}
 800814c:	469e      	mov	lr, r3
 800814e:	4770      	bx	lr

08008150 <_fini>:
 8008150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008152:	bf00      	nop
 8008154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008156:	bc08      	pop	{r3}
 8008158:	469e      	mov	lr, r3
 800815a:	4770      	bx	lr
