
TIMER_OUTPUT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000324  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004bc  080004c4  000104c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004bc  080004bc  000104c4  2**0
                  CONTENTS
  4 .ARM          00000000  080004bc  080004bc  000104c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004bc  080004c4  000104c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004bc  080004bc  000104bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004c0  080004c0  000104c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080004c4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080004c4  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000104c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000bcf  00000000  00000000  000104f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002da  00000000  00000000  000110c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f8  00000000  00000000  000113a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000c0  00000000  00000000  00011498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000139f0  00000000  00000000  00011558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001619  00000000  00000000  00024f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007dc2d  00000000  00000000  00026561  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a418e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000284  00000000  00000000  000a41e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080004a4 	.word	0x080004a4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080004a4 	.word	0x080004a4

080001d8 <SysTick_Handler>:

uint32_t systick_cnt = 0;
volatile char rx_buffer[5852] = {0};
volatile char recv_data_done_flag = 0;
void SysTick_Handler()
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	systick_cnt++;
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <SysTick_Handler+0x18>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	3301      	adds	r3, #1
 80001e2:	4a03      	ldr	r2, [pc, #12]	; (80001f0 <SysTick_Handler+0x18>)
 80001e4:	6013      	str	r3, [r2, #0]
}
 80001e6:	bf00      	nop
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr
 80001f0:	2000001c 	.word	0x2000001c

080001f4 <system_tick_init>:
void system_tick_init()
{
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
	uint32_t* CSR = (uint32_t* )0xe000e010;
 80001fa:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <system_tick_init+0x30>)
 80001fc:	607b      	str	r3, [r7, #4]
	uint32_t* RVR = (uint32_t* )0xe000e014;
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <system_tick_init+0x34>)
 8000200:	603b      	str	r3, [r7, #0]
	*RVR = 15999;
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000208:	601a      	str	r2, [r3, #0]
	*CSR |= (1<<1)|(1<<0)|(1<<2);
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f043 0207 	orr.w	r2, r3, #7
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	601a      	str	r2, [r3, #0]
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	e000e010 	.word	0xe000e010
 8000228:	e000e014 	.word	0xe000e014

0800022c <Custom_delay>:


void Custom_delay(uint32_t mSec)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
	systick_cnt = 0;
 8000234:	4b07      	ldr	r3, [pc, #28]	; (8000254 <Custom_delay+0x28>)
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
	while(systick_cnt < mSec);
 800023a:	bf00      	nop
 800023c:	4b05      	ldr	r3, [pc, #20]	; (8000254 <Custom_delay+0x28>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	429a      	cmp	r2, r3
 8000244:	d8fa      	bhi.n	800023c <Custom_delay+0x10>
}
 8000246:	bf00      	nop
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	2000001c 	.word	0x2000001c

08000258 <PWM_Ctrl_Motor>:

	*TIM4_CR1 |= 1; // enable counter
}

void PWM_Ctrl_Motor()
{
 8000258:	b480      	push	{r7}
 800025a:	b08b      	sub	sp, #44	; 0x2c
 800025c:	af00      	add	r7, sp, #0
	//PWM T = 1s, do rong xung = 50%
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800025e:	2300      	movs	r3, #0
 8000260:	607b      	str	r3, [r7, #4]
 8000262:	4b2f      	ldr	r3, [pc, #188]	; (8000320 <PWM_Ctrl_Motor+0xc8>)
 8000264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000266:	4a2e      	ldr	r2, [pc, #184]	; (8000320 <PWM_Ctrl_Motor+0xc8>)
 8000268:	f043 0308 	orr.w	r3, r3, #8
 800026c:	6313      	str	r3, [r2, #48]	; 0x30
 800026e:	4b2c      	ldr	r3, [pc, #176]	; (8000320 <PWM_Ctrl_Motor+0xc8>)
 8000270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000272:	f003 0308 	and.w	r3, r3, #8
 8000276:	607b      	str	r3, [r7, #4]
 8000278:	687b      	ldr	r3, [r7, #4]
	uint32_t* GPIOD_MODER = (uint32_t*)(0x40020c00);
 800027a:	4b2a      	ldr	r3, [pc, #168]	; (8000324 <PWM_Ctrl_Motor+0xcc>)
 800027c:	627b      	str	r3, [r7, #36]	; 0x24
	*GPIOD_MODER |= (0b10 << 24);
 800027e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8000286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000288:	601a      	str	r2, [r3, #0]
	uint32_t* GPIOD_AFRH = (uint32_t*)(0x40020c24);
 800028a:	4b27      	ldr	r3, [pc, #156]	; (8000328 <PWM_Ctrl_Motor+0xd0>)
 800028c:	623b      	str	r3, [r7, #32]
	*GPIOD_AFRH |= (2 << 16);
 800028e:	6a3b      	ldr	r3, [r7, #32]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000296:	6a3b      	ldr	r3, [r7, #32]
 8000298:	601a      	str	r2, [r3, #0]

	__HAL_RCC_TIM4_CLK_ENABLE();
 800029a:	2300      	movs	r3, #0
 800029c:	603b      	str	r3, [r7, #0]
 800029e:	4b20      	ldr	r3, [pc, #128]	; (8000320 <PWM_Ctrl_Motor+0xc8>)
 80002a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002a2:	4a1f      	ldr	r2, [pc, #124]	; (8000320 <PWM_Ctrl_Motor+0xc8>)
 80002a4:	f043 0304 	orr.w	r3, r3, #4
 80002a8:	6413      	str	r3, [r2, #64]	; 0x40
 80002aa:	4b1d      	ldr	r3, [pc, #116]	; (8000320 <PWM_Ctrl_Motor+0xc8>)
 80002ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002ae:	f003 0304 	and.w	r3, r3, #4
 80002b2:	603b      	str	r3, [r7, #0]
 80002b4:	683b      	ldr	r3, [r7, #0]
	uint32_t* TIM4_ARR = (uint32_t*)(0x4000082c);
 80002b6:	4b1d      	ldr	r3, [pc, #116]	; (800032c <PWM_Ctrl_Motor+0xd4>)
 80002b8:	61fb      	str	r3, [r7, #28]
	uint32_t* TIM4_PSC = (uint32_t*)(0x40000828);
 80002ba:	4b1d      	ldr	r3, [pc, #116]	; (8000330 <PWM_Ctrl_Motor+0xd8>)
 80002bc:	61bb      	str	r3, [r7, #24]
	uint32_t* TIM4_CCR1 = (uint32_t*)(0x40000834);
 80002be:	4b1d      	ldr	r3, [pc, #116]	; (8000334 <PWM_Ctrl_Motor+0xdc>)
 80002c0:	617b      	str	r3, [r7, #20]
	*TIM4_ARR = 100 - 1;
 80002c2:	69fb      	ldr	r3, [r7, #28]
 80002c4:	2263      	movs	r2, #99	; 0x63
 80002c6:	601a      	str	r2, [r3, #0]
	*TIM4_PSC = 1600 - 1;
 80002c8:	69bb      	ldr	r3, [r7, #24]
 80002ca:	f240 623f 	movw	r2, #1599	; 0x63f
 80002ce:	601a      	str	r2, [r3, #0]
	*TIM4_CCR1 = 10 - 1;
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	2209      	movs	r2, #9
 80002d4:	601a      	str	r2, [r3, #0]

	uint32_t* TIM4_CR1 = (uint32_t*)(0x40000800);
 80002d6:	4b18      	ldr	r3, [pc, #96]	; (8000338 <PWM_Ctrl_Motor+0xe0>)
 80002d8:	613b      	str	r3, [r7, #16]
	uint32_t* TIM4_CCMR1 = (uint32_t*)(0x40000818);
 80002da:	4b18      	ldr	r3, [pc, #96]	; (800033c <PWM_Ctrl_Motor+0xe4>)
 80002dc:	60fb      	str	r3, [r7, #12]
	uint32_t* TIM4_CCER = (uint32_t*)(0x40000820);
 80002de:	4b18      	ldr	r3, [pc, #96]	; (8000340 <PWM_Ctrl_Motor+0xe8>)
 80002e0:	60bb      	str	r3, [r7, #8]

	*TIM4_CCMR1 &= ~(0b11<<0);  // set mode in output compare
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f023 0203 	bic.w	r2, r3, #3
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	601a      	str	r2, [r3, #0]
	*TIM4_CCMR1 |= (0b110 << 4); // set CC1 mode in PWM1
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	601a      	str	r2, [r3, #0]

	*TIM4_CCER |= (1<<0); // enable channel 1
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f043 0201 	orr.w	r2, r3, #1
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	601a      	str	r2, [r3, #0]

	*TIM4_CR1 |= 1; // enable counter
 8000306:	693b      	ldr	r3, [r7, #16]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f043 0201 	orr.w	r2, r3, #1
 800030e:	693b      	ldr	r3, [r7, #16]
 8000310:	601a      	str	r2, [r3, #0]
}
 8000312:	bf00      	nop
 8000314:	372c      	adds	r7, #44	; 0x2c
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800
 8000324:	40020c00 	.word	0x40020c00
 8000328:	40020c24 	.word	0x40020c24
 800032c:	4000082c 	.word	0x4000082c
 8000330:	40000828 	.word	0x40000828
 8000334:	40000834 	.word	0x40000834
 8000338:	40000800 	.word	0x40000800
 800033c:	40000818 	.word	0x40000818
 8000340:	40000820 	.word	0x40000820

08000344 <Motor_change_power>:
//công suất nằm trong khoản [0:100]
void Motor_change_power(uint8_t power)
{
 8000344:	b480      	push	{r7}
 8000346:	b085      	sub	sp, #20
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
	uint32_t* TIM4_CCR1 = (uint32_t*)(0x40000834);
 800034e:	4b05      	ldr	r3, [pc, #20]	; (8000364 <Motor_change_power+0x20>)
 8000350:	60fb      	str	r3, [r7, #12]
	*TIM4_CCR1 = power;
 8000352:	79fa      	ldrb	r2, [r7, #7]
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	601a      	str	r2, [r3, #0]
}
 8000358:	bf00      	nop
 800035a:	3714      	adds	r7, #20
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	40000834 	.word	0x40000834

08000368 <main>:

int main()
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
	PWM_Ctrl_Motor();
 800036e:	f7ff ff73 	bl	8000258 <PWM_Ctrl_Motor>
	system_tick_init();
 8000372:	f7ff ff3f 	bl	80001f4 <system_tick_init>
	int power = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	607b      	str	r3, [r7, #4]
	while(1)
	{
		Custom_delay(50);
 800037a:	2032      	movs	r0, #50	; 0x32
 800037c:	f7ff ff56 	bl	800022c <Custom_delay>
		if(power++ >50)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	1c5a      	adds	r2, r3, #1
 8000384:	607a      	str	r2, [r7, #4]
 8000386:	2b32      	cmp	r3, #50	; 0x32
 8000388:	dd01      	ble.n	800038e <main+0x26>
			power = 0;
 800038a:	2300      	movs	r3, #0
 800038c:	607b      	str	r3, [r7, #4]
		Motor_change_power(power);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	b2db      	uxtb	r3, r3
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff ffd6 	bl	8000344 <Motor_change_power>
		Custom_delay(50);
 8000398:	e7ef      	b.n	800037a <main+0x12>

0800039a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800039e:	e7fe      	b.n	800039e <NMI_Handler+0x4>

080003a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <HardFault_Handler+0x4>

080003a6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003a6:	b480      	push	{r7}
 80003a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003aa:	e7fe      	b.n	80003aa <MemManage_Handler+0x4>

080003ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003b0:	e7fe      	b.n	80003b0 <BusFault_Handler+0x4>

080003b2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003b6:	e7fe      	b.n	80003b6 <UsageFault_Handler+0x4>

080003b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003bc:	bf00      	nop
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr

080003c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003c6:	b480      	push	{r7}
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr

080003d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
	...

080003e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <SystemInit+0x20>)
 80003ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003ee:	4a05      	ldr	r2, [pc, #20]	; (8000404 <SystemInit+0x20>)
 80003f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	e000ed00 	.word	0xe000ed00

08000408 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000408:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000440 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800040c:	480d      	ldr	r0, [pc, #52]	; (8000444 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800040e:	490e      	ldr	r1, [pc, #56]	; (8000448 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000410:	4a0e      	ldr	r2, [pc, #56]	; (800044c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000414:	e002      	b.n	800041c <LoopCopyDataInit>

08000416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041a:	3304      	adds	r3, #4

0800041c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800041c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800041e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000420:	d3f9      	bcc.n	8000416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000422:	4a0b      	ldr	r2, [pc, #44]	; (8000450 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000424:	4c0b      	ldr	r4, [pc, #44]	; (8000454 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000428:	e001      	b.n	800042e <LoopFillZerobss>

0800042a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800042c:	3204      	adds	r2, #4

0800042e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800042e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000430:	d3fb      	bcc.n	800042a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000432:	f7ff ffd7 	bl	80003e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000436:	f000 f811 	bl	800045c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800043a:	f7ff ff95 	bl	8000368 <main>
  bx  lr    
 800043e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000440:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000448:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800044c:	080004c4 	.word	0x080004c4
  ldr r2, =_sbss
 8000450:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000454:	20000020 	.word	0x20000020

08000458 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000458:	e7fe      	b.n	8000458 <ADC_IRQHandler>
	...

0800045c <__libc_init_array>:
 800045c:	b570      	push	{r4, r5, r6, lr}
 800045e:	4d0d      	ldr	r5, [pc, #52]	; (8000494 <__libc_init_array+0x38>)
 8000460:	4c0d      	ldr	r4, [pc, #52]	; (8000498 <__libc_init_array+0x3c>)
 8000462:	1b64      	subs	r4, r4, r5
 8000464:	10a4      	asrs	r4, r4, #2
 8000466:	2600      	movs	r6, #0
 8000468:	42a6      	cmp	r6, r4
 800046a:	d109      	bne.n	8000480 <__libc_init_array+0x24>
 800046c:	4d0b      	ldr	r5, [pc, #44]	; (800049c <__libc_init_array+0x40>)
 800046e:	4c0c      	ldr	r4, [pc, #48]	; (80004a0 <__libc_init_array+0x44>)
 8000470:	f000 f818 	bl	80004a4 <_init>
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	10a4      	asrs	r4, r4, #2
 8000478:	2600      	movs	r6, #0
 800047a:	42a6      	cmp	r6, r4
 800047c:	d105      	bne.n	800048a <__libc_init_array+0x2e>
 800047e:	bd70      	pop	{r4, r5, r6, pc}
 8000480:	f855 3b04 	ldr.w	r3, [r5], #4
 8000484:	4798      	blx	r3
 8000486:	3601      	adds	r6, #1
 8000488:	e7ee      	b.n	8000468 <__libc_init_array+0xc>
 800048a:	f855 3b04 	ldr.w	r3, [r5], #4
 800048e:	4798      	blx	r3
 8000490:	3601      	adds	r6, #1
 8000492:	e7f2      	b.n	800047a <__libc_init_array+0x1e>
 8000494:	080004bc 	.word	0x080004bc
 8000498:	080004bc 	.word	0x080004bc
 800049c:	080004bc 	.word	0x080004bc
 80004a0:	080004c0 	.word	0x080004c0

080004a4 <_init>:
 80004a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a6:	bf00      	nop
 80004a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004aa:	bc08      	pop	{r3}
 80004ac:	469e      	mov	lr, r3
 80004ae:	4770      	bx	lr

080004b0 <_fini>:
 80004b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004b2:	bf00      	nop
 80004b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b6:	bc08      	pop	{r3}
 80004b8:	469e      	mov	lr, r3
 80004ba:	4770      	bx	lr
