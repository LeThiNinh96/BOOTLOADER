
TIMER_BASIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002ac  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000444  0800044c  0001044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000444  08000444  0001044c  2**0
                  CONTENTS
  4 .ARM          00000000  08000444  08000444  0001044c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000444  0800044c  0001044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000444  08000444  00010444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000448  08000448  00010448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  0800044c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800044c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001044c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ced  00000000  00000000  0001047c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000032a  00000000  00000000  00011169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000118  00000000  00000000  00011498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e0  00000000  00000000  000115b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000143ce  00000000  00000000  00011690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001850  00000000  00000000  00025a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081373  00000000  00000000  000272ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a8621  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000031c  00000000  00000000  000a8674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800042c 	.word	0x0800042c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	0800042c 	.word	0x0800042c

080001d8 <SysTick_Handler>:

uint32_t systick_cnt = 0;
volatile char rx_buffer[5852] = {0};
volatile char recv_data_done_flag = 0;
void SysTick_Handler()
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	systick_cnt++;
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <SysTick_Handler+0x18>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	3301      	adds	r3, #1
 80001e2:	4a03      	ldr	r2, [pc, #12]	; (80001f0 <SysTick_Handler+0x18>)
 80001e4:	6013      	str	r3, [r2, #0]
}
 80001e6:	bf00      	nop
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr
 80001f0:	2000001c 	.word	0x2000001c

080001f4 <system_tick_init>:
void system_tick_init()
{
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
	uint32_t* CSR = (uint32_t* )0xe000e010;
 80001fa:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <system_tick_init+0x30>)
 80001fc:	607b      	str	r3, [r7, #4]
	uint32_t* RVR = (uint32_t* )0xe000e014;
 80001fe:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <system_tick_init+0x34>)
 8000200:	603b      	str	r3, [r7, #0]
	*RVR = 15999;
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000208:	601a      	str	r2, [r3, #0]
	*CSR |= (1<<1)|(1<<0)|(1<<2);
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f043 0207 	orr.w	r2, r3, #7
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	601a      	str	r2, [r3, #0]
}
 8000216:	bf00      	nop
 8000218:	370c      	adds	r7, #12
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	e000e010 	.word	0xe000e010
 8000228:	e000e014 	.word	0xe000e014

0800022c <DMA2_Stream2_IRQHandler>:
	uint32_t* ISER1 = (uint32_t*)(0xE000e104);
	*ISER1 |= (1 << 26);
}

void DMA2_Stream2_IRQHandler()
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
	uint32_t* DMA_LIFCR = (uint32_t*)(0x40026400 + 0x08);
 8000232:	4b08      	ldr	r3, [pc, #32]	; (8000254 <DMA2_Stream2_IRQHandler+0x28>)
 8000234:	607b      	str	r3, [r7, #4]
	*DMA_LIFCR |= (1 << 21);
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	601a      	str	r2, [r3, #0]
	recv_data_done_flag = 1;
 8000242:	4b05      	ldr	r3, [pc, #20]	; (8000258 <DMA2_Stream2_IRQHandler+0x2c>)
 8000244:	2201      	movs	r2, #1
 8000246:	701a      	strb	r2, [r3, #0]
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	40026408 	.word	0x40026408
 8000258:	20000020 	.word	0x20000020

0800025c <tim1_init_1sec>:
float heading;

//TIMER
// Ham delay
void tim1_init_1sec()
{
 800025c:	b480      	push	{r7}
 800025e:	b087      	sub	sp, #28
 8000260:	af00      	add	r7, sp, #0
	//enable clock for TIM1
	__HAL_RCC_TIM1_CLK_ENABLE();
 8000262:	2300      	movs	r3, #0
 8000264:	603b      	str	r3, [r7, #0]
 8000266:	4b1b      	ldr	r3, [pc, #108]	; (80002d4 <tim1_init_1sec+0x78>)
 8000268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800026a:	4a1a      	ldr	r2, [pc, #104]	; (80002d4 <tim1_init_1sec+0x78>)
 800026c:	f043 0301 	orr.w	r3, r3, #1
 8000270:	6453      	str	r3, [r2, #68]	; 0x44
 8000272:	4b18      	ldr	r3, [pc, #96]	; (80002d4 <tim1_init_1sec+0x78>)
 8000274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000276:	f003 0301 	and.w	r3, r3, #1
 800027a:	603b      	str	r3, [r7, #0]
 800027c:	683b      	ldr	r3, [r7, #0]
	//set auto-reload = 5000-1
	uint32_t* TIM1_ARR = (uint32_t*)(0x40010000 + 0x2c);
 800027e:	4b16      	ldr	r3, [pc, #88]	; (80002d8 <tim1_init_1sec+0x7c>)
 8000280:	617b      	str	r3, [r7, #20]
	*TIM1_ARR = 5000-1;
 8000282:	697b      	ldr	r3, [r7, #20]
 8000284:	f241 3287 	movw	r2, #4999	; 0x1387
 8000288:	601a      	str	r2, [r3, #0]
	//set prescale = 16000-1
	uint32_t* TIM1_PSC = (uint32_t*)(0x40010000 + 0x28);
 800028a:	4b14      	ldr	r3, [pc, #80]	; (80002dc <tim1_init_1sec+0x80>)
 800028c:	613b      	str	r3, [r7, #16]
	*TIM1_PSC = 16000-1;
 800028e:	693b      	ldr	r3, [r7, #16]
 8000290:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000294:	601a      	str	r2, [r3, #0]
	//enable update event interrupt
	uint32_t* TIM1_DIER = (uint32_t*)(0x40010000 + 0x0c);
 8000296:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <tim1_init_1sec+0x84>)
 8000298:	60fb      	str	r3, [r7, #12]
	*TIM1_DIER |= 1<<0;
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f043 0201 	orr.w	r2, r3, #1
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	601a      	str	r2, [r3, #0]
	uint32_t* NVIC_ISER0 = (uint32_t*)(0xe000e100);
 80002a6:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <tim1_init_1sec+0x88>)
 80002a8:	60bb      	str	r3, [r7, #8]
	*NVIC_ISER0 |= 1<<25;
 80002aa:	68bb      	ldr	r3, [r7, #8]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	601a      	str	r2, [r3, #0]

	//start timer/counter
	uint32_t* TIM1_CR1 = (uint32_t*)0x40010000;
 80002b6:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <tim1_init_1sec+0x8c>)
 80002b8:	607b      	str	r3, [r7, #4]
	*TIM1_CR1 |= 1<<0;
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f043 0201 	orr.w	r2, r3, #1
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	601a      	str	r2, [r3, #0]
}
 80002c6:	bf00      	nop
 80002c8:	371c      	adds	r7, #28
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40023800 	.word	0x40023800
 80002d8:	4001002c 	.word	0x4001002c
 80002dc:	40010028 	.word	0x40010028
 80002e0:	4001000c 	.word	0x4001000c
 80002e4:	e000e100 	.word	0xe000e100
 80002e8:	40010000 	.word	0x40010000

080002ec <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler()
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
	__asm("NOP");
 80002f2:	bf00      	nop
	uint32_t* TIM1_SR = (uint32_t*)0x40010010;
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <TIM1_UP_TIM10_IRQHandler+0x24>)
 80002f6:	607b      	str	r3, [r7, #4]
	*TIM1_SR &= ~(1<<0);
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f023 0201 	bic.w	r2, r3, #1
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	601a      	str	r2, [r3, #0]
}
 8000304:	bf00      	nop
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	40010010 	.word	0x40010010

08000314 <main>:

int main()
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	system_tick_init();
 8000318:	f7ff ff6c 	bl	80001f4 <system_tick_init>
	tim1_init_1sec();
 800031c:	f7ff ff9e 	bl	800025c <tim1_init_1sec>


	while(1)
 8000320:	e7fe      	b.n	8000320 <main+0xc>

08000322 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000322:	b480      	push	{r7}
 8000324:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000326:	e7fe      	b.n	8000326 <NMI_Handler+0x4>

08000328 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800032c:	e7fe      	b.n	800032c <HardFault_Handler+0x4>

0800032e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800032e:	b480      	push	{r7}
 8000330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000332:	e7fe      	b.n	8000332 <MemManage_Handler+0x4>

08000334 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000338:	e7fe      	b.n	8000338 <BusFault_Handler+0x4>

0800033a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800033a:	b480      	push	{r7}
 800033c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800033e:	e7fe      	b.n	800033e <UsageFault_Handler+0x4>

08000340 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr

0800034e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000352:	bf00      	nop
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr

0800035c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
	...

0800036c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000370:	4b06      	ldr	r3, [pc, #24]	; (800038c <SystemInit+0x20>)
 8000372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000376:	4a05      	ldr	r2, [pc, #20]	; (800038c <SystemInit+0x20>)
 8000378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800037c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	e000ed00 	.word	0xe000ed00

08000390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000394:	480d      	ldr	r0, [pc, #52]	; (80003cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000396:	490e      	ldr	r1, [pc, #56]	; (80003d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000398:	4a0e      	ldr	r2, [pc, #56]	; (80003d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800039c:	e002      	b.n	80003a4 <LoopCopyDataInit>

0800039e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a2:	3304      	adds	r3, #4

080003a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a8:	d3f9      	bcc.n	800039e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003aa:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80003ac:	4c0b      	ldr	r4, [pc, #44]	; (80003dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80003ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b0:	e001      	b.n	80003b6 <LoopFillZerobss>

080003b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b4:	3204      	adds	r2, #4

080003b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b8:	d3fb      	bcc.n	80003b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003ba:	f7ff ffd7 	bl	800036c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003be:	f000 f811 	bl	80003e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003c2:	f7ff ffa7 	bl	8000314 <main>
  bx  lr    
 80003c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003d4:	0800044c 	.word	0x0800044c
  ldr r2, =_sbss
 80003d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003dc:	20000024 	.word	0x20000024

080003e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC_IRQHandler>
	...

080003e4 <__libc_init_array>:
 80003e4:	b570      	push	{r4, r5, r6, lr}
 80003e6:	4d0d      	ldr	r5, [pc, #52]	; (800041c <__libc_init_array+0x38>)
 80003e8:	4c0d      	ldr	r4, [pc, #52]	; (8000420 <__libc_init_array+0x3c>)
 80003ea:	1b64      	subs	r4, r4, r5
 80003ec:	10a4      	asrs	r4, r4, #2
 80003ee:	2600      	movs	r6, #0
 80003f0:	42a6      	cmp	r6, r4
 80003f2:	d109      	bne.n	8000408 <__libc_init_array+0x24>
 80003f4:	4d0b      	ldr	r5, [pc, #44]	; (8000424 <__libc_init_array+0x40>)
 80003f6:	4c0c      	ldr	r4, [pc, #48]	; (8000428 <__libc_init_array+0x44>)
 80003f8:	f000 f818 	bl	800042c <_init>
 80003fc:	1b64      	subs	r4, r4, r5
 80003fe:	10a4      	asrs	r4, r4, #2
 8000400:	2600      	movs	r6, #0
 8000402:	42a6      	cmp	r6, r4
 8000404:	d105      	bne.n	8000412 <__libc_init_array+0x2e>
 8000406:	bd70      	pop	{r4, r5, r6, pc}
 8000408:	f855 3b04 	ldr.w	r3, [r5], #4
 800040c:	4798      	blx	r3
 800040e:	3601      	adds	r6, #1
 8000410:	e7ee      	b.n	80003f0 <__libc_init_array+0xc>
 8000412:	f855 3b04 	ldr.w	r3, [r5], #4
 8000416:	4798      	blx	r3
 8000418:	3601      	adds	r6, #1
 800041a:	e7f2      	b.n	8000402 <__libc_init_array+0x1e>
 800041c:	08000444 	.word	0x08000444
 8000420:	08000444 	.word	0x08000444
 8000424:	08000444 	.word	0x08000444
 8000428:	08000448 	.word	0x08000448

0800042c <_init>:
 800042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042e:	bf00      	nop
 8000430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000432:	bc08      	pop	{r3}
 8000434:	469e      	mov	lr, r3
 8000436:	4770      	bx	lr

08000438 <_fini>:
 8000438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043a:	bf00      	nop
 800043c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043e:	bc08      	pop	{r3}
 8000440:	469e      	mov	lr, r3
 8000442:	4770      	bx	lr
